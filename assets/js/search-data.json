{
  
    
        "post0": {
            "title": "Tri 2   Week 20 Mcq",
            "content": "Overall Score . . Blog . Question 1 . | I am blogging this question because it made me think a little bit. This segment would still set z as the max value, because it iterates through the second if loop and the conditions of the if loop to set y as the max aren’t met, and so z would be set as max in the end due to the else statement. . | . . Question 13 . | I got this question wrong because I selected the Boolean which used an and expression instead of an or expression. The and expression can only be true if both conditions are met simultaneously. However, no number can be BOTH equal to 15 and also greater than 15 at the same time. Therefore, we must use the OR operation. . | . . Question 15 . | I chose to blog this question because it took me a really long time to answer. I had to run through the code segment in my head and visualize it. However, eventually I chose this as the answer because at the end, it would choose to turn right first instead of left as indicated by the order of statements in the if loop, thus landing it on the right side of the maze as an endpoint rather than on the left as desired. . | . . . Question 22 . | I misread this question. I thought that algorithm A was sampling with replacement, which meant that heights could be repeated. However, in algorithm A, each student was chosen from a standing group of students, who would sit down once their turn was over. So, this method would also work. I thought they were just randomly selecting from the same pool of people, which could allow for repeat heights and an incorrect calculation of the average. . | . . Question 16 . | I chose to blog this question because I didn’t know what “selection” meant. I now know that selection allows you to “select” the items in a list that meet a particular criteria. . | . . Question 30 . | Going to be completely honest here, I didn’t understand this question. I would appreciate an explanation, but collegeboard did not supply us with one. . | . . . Question 45 . | Before this question, I did not know what a heuristic solution was. I learned that a heuristic solution is one that can be solved in a shorter period of time and comes up with an approximate solution. . | . . Question 50 . | Never heard of this or learned about it. Needs some review. . | . . .",
            "url": "https://rey444.github.io/shreya/2023/01/30/Tri-2-Week-20-MCQ.html",
            "relUrl": "/2023/01/30/Tri-2-Week-20-MCQ.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Tri 1 Final Mcq Practice Blog",
            "content": "Shreya Sapkal . Period 3 . Tri 1 Final MCQ Practice Blog . Q8: Documentation for procedure with lists . | . Reflection: This problem was confusing to me. I understood that a newList is created out of the numList, and that the elements at indices j and k are interchanged. I didn’t understand the second half of the problem, so I reviewed the collegeboard explanation. The explanation helped me understand that the procedure can only work if j and k are valid indices, and in order for the indices to be valid, the values of j and k must be between 1 and the length of the original numList [LENGTH(numList)]. . Q17: Purpose of Internet protocols . | . Reflection: I researched what an open protocol was in order to answer this question. After I did some research, I was able to learn that open protocols on the internet allow devices manufactured by different companies in a standardized way. This allows data transmission to be standardized between different devices, and thus D is the correct answer. . Q19: Adding numbers in 4-bit representation . | . Reflection: For this question, I consulted my peers for help, because I didn’t know much about binary sequences or “bits.” I learned that “bits” are the 1s and 0s that come together to form a decimal number in binary. I also learned that the largest number 4 bits can represent is 15, and this knowledge helped me understand this question. While 14 and 15 can be represented by 4 bits, their sum, 29, cannot be represented because the largest number that can be represented by 4 bits is 15. . Q20: Bits needed to represent directions . | . Reflection: The collegeboard answer explanation helped me understand this problem better after I answered it. I learned that 4 bits can store 16 pieces of information (24 = 16). Because the developer is trying to store only 8 directions for the character, 4 bits should be enough to store the directions because 8 &lt; 16. . Q20: Data that can be represented with binary sequences . | . Reflection: I am blogging this question because prior to it, I didn’t know a lot about binary sequences. Now I know that digital data is represented at the lowest level by sequences of bits, which is essentially binary sequences. I also learned that binary sequences can be used to represent many different kinds of data, such as text (strings of characters), colors, numbers, images, and sounds (audio recordings). . Q22: Decimal value not equal to given binary values . | . Reflection: I had to look this problem up, because I don’t know much about binary numbers. . Q23: Digital representation of position of runner . | . Reflection: From this I learned that analog data is sampled at multiple points and has a continuous electric signal, while digital signals have non-continuous electrical signals. At first I didn’t know how to answer this question, but reading the collegeboard explanation after completing the test gave me some insight. Analog data values change smoothly and are sampled at regular intervals, and therefore the position of the runner must be sampled at regular intervals to approximate the real-world position. The analog data can be approximated digitally by mearuding the analog signal at intervals called samples. Sequences of bits are used to represent the samples digitally. . Q24 Put binary and decimal numbers in order . | . Reflection: I had to look up what decimal number binary 1011 stands for, and discovered that it was equivalent to 11. I also looked up what decimal number binary 1101 stands for, and discovered that it was equivalent to 13. Then, I simply ordered the numbers from least to greatest: 5, 11, 12, 13, or 5, 1011, 12, 1101. . Q26 Appropriate data type for isOpen . | . Reflection: For this question, I had to keep in mind the fact that a Boolean variable is one that is represented by the values true and false. Because whether or not a store is currently open can be represented by a true/false statement, the most appropriate data type for isOpen would be a boolean. . Q29 Benefit of using a list as a data abstraction . | . Reflection: From this question, I learned that lists are best used in data abstraction in a program, because they can hold many data values and can be easily changed as needed. From Question #30, it is also easy to apply the same algorithm to every element in a list than it is to apply an algorithm to many variables separately . Q32 Contents of myList and yourList . | . Reflection: For this question, I answered B while the correct answer was A. This is because myList was converted to have the contents of yourList – myList had the values of [10, 30, 50, 70], but now that it’s been converted to have the contents of yourList, it will no longer have [10, 30, 50, 70]. Therefore, A is the correct answer. . Q36 Store even numbers in evenList . | . Reflection: Option C is correct, because it would store the first element of the list as 2, while the option D would store the first element of the list as 4. . Q38 Update values of three words . | . Reflection: Option B is correct, because the first statement assigns the value of word1 to the temporary variable temp. The second statement assigns the value of word3 to word1. The third statement assigns the original value of word1, which is stored in temp, to word3. The original values of word1 and word3 are interchanged, which reverses the values of the variables as intended, making the table values after updating zebra –&gt; yarn –&gt; xylophone. . Q39 Valid index for wordList . | . Reflection: I learned that indices are usually non-negative integers. “Hello” is a string value, which could be an element in the list. A list is a structure whose index values are 1 through the number of elements in the list. The list’s index, however, should be a non-negative integer, and be between 1 and 10, because there are 10 elements in the list. 4 is a non-negative integer and 1&lt;4&lt;10, and thus option D is correct. . Q43 Value of x after REPEAT UNTIL block . | . Reflection: I chose option B, which would be the value of result if the loop iterated one less time. The variables x and result are both initialized to 0. Within the loop, result is increased by x and x is increased by 1. The loop stops when x&gt;5. So, the result must be the sum of the integers from 0 to 5, which is 15. . Q47 Values of variables after arithmetic operations . | . Reflection: For this question, I did the order of operations wrong. For the 8th code block, the operation is c + (d/2). However, I thought that it was (c+d)/2. C is 30, and d is 40. 30 + (40/2) = 50, therefore, the correct answer is option D. .",
            "url": "https://rey444.github.io/shreya/2023/01/30/Tri-1-Final-MCQ-Practice-Blog.html",
            "relUrl": "/2023/01/30/Tri-1-Final-MCQ-Practice-Blog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Alumni Panel Notes",
            "content": "Alumni Panel Tips Notes . Must learn programming going into other engineering fields . | . Facing Challenges in Class . Googling solutions on the internet helps overcome challenges in class . | Keep trying to solve the problem at hand . | Focus on your own path, and don’t be discouraged if others do something that’s better than your work or have higher accomplishments . There’s always going to be someone better than you! . | . | Think through problems and flowchart your work + use google to help you solve problems . | Don’t be afraid to ask for help from people who know how to do it . | Don’t cut corners, have the mindset to go above and beyond . | There isn’t only one correct answer/way to do something in CS . | Just start coding, and troubleshoot problems as you go . | . Mechanical Engineering . UCSD: one hands-on project for freshman and senior year each . | . Project Based Learning in College . Communicate with team members daily . | Study in groups and work with others, especially for the first couple years of college (and for general education courses . | . Coding . Knowing how to code helps you do math in the forms of vectors and matrices . | Can code out what your object will look like for 3D printing . | Problem solving knowledge besides coding also helps in other classes . | Jupyter notebooks are being used for technical papers for interactive work . | Stats major: some projects are done in R . | Matlab is used in many fields, as well as CS . | . How to Get a Job or Internship as a College Student . Show up to office hours . | Ask teachers questions . | Stand out to your teacher and set yourself apart from other students . | Many companies look for interns starting in September when the school year starts . | Have a resume ready by early September of the year before when you want to work/intern . | Create a LinkedIn profile . | Build a network of people you know to reach out to get job/internship opportunities . Parents, friend’s parents, professors, engineers you know . | . | Getting a referral from someone who works at the company is a good idea . | . UCSD . Autonomous car projects: go-kart and indy500 autonomous cars . Triton AI . | . | Can ask professor if there’s any space in the lab for you to intern . | . Python scripting, web development, IT tools, how Linux works: all helps in college . Colin used these skills at his internship at Northrup Grumman: technical diagrams, website for flight data that takes information from the test database, scripting . | . | . Working on Personal Projects . Many companies look for personal projects that you’ve done or made . Help set you apart from other applicants to college/jobs/internships . | . | Visual projects are great - ex. Algorithm visualizers . | Can even make something fun; doesn’t have to be very life changing . | Sorting algorithms, travelling salesman problem, data visualization . | Can make scripts to make work on Mechanical Engineering projects easier . Data manipulation . | . | Computation Aided Manufacturing . Editing G-code + manipulating commands . | . | Material simulations . Can help you convert hand functions to actual functions –&gt; set up a server –&gt; run the data . | . | .",
            "url": "https://rey444.github.io/shreya/2023/01/30/Alumni-Panel-Notes.html",
            "relUrl": "/2023/01/30/Alumni-Panel-Notes.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": ".2 Ap Daily Videos",
            "content": "1.2: Program Function &amp; Purpose . Video 1 . Learning how to describe the purpose of a computing innovation . | All computing innovations are developed for a purpose, and this purpose guides the creation of the innovation . | The purpose of computing innovations is to solve problems or to pursue interests through creative expression . | Understanding the purpose of a computing innovation helps developers improve their ability to develop that innovation . | Categories of Computing innovations . Applications . Games . | Social media . | Business productivity . | . | Physical devices . Computers . | Smart phones/tablets . | Wearables . Smart watch . | . | Smart “things” . Smart doorbells, smart thermostats, smart refrigerators, etc . | . | Helps you do things you couldn’t do before . | . | Systems . E-commerce . | Cloud services . | E-mail . | . | . | Guiding questions: . Why does the computing innovation exist? . | What problems does the computing innovation solve? . | What does the computing innovation allow us to do that we couldn’t do before? . | . | Investigate Examples of Computing Innovations &amp; Describe the purpose of the following computing innovations . Social Media Applications . To enable faster communication between people across the world . | To solve the problem of a lack of communication . | Allows us to have instant outreach and communicate with others instantly . | Allows users to connect from a distance &amp; archive/document their activities . | . | E-commerce . To connect shoppers with goods and services from their comfort of their homes . | Allow for better communication between producers &amp; consumers . | Allow for less warehouse space needs . | Allows for better customer service &amp; feedback to producers . | Allows users to save time &amp; money by being able to shop from home . | . | Digital Assistant Device . Allows users to control their devices hands-free, making them safer to use while driving or more convenient when trying to multitask . | . | . | .",
            "url": "https://rey444.github.io/shreya/2023/01/30/.2-AP-Daily-Videos.html",
            "relUrl": "/2023/01/30/.2-AP-Daily-Videos.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": ".1 Ap Daily Videos",
            "content": "1.1: Collaboration &amp; Why it’s Important for the Industry . Video 1 . Example: Facebook . Special areas that encourage collaboration . | . | Effective collaboration produces computing innovation that reflects the diversity of talents and perspectives of those who design it . | Computing innovation . Program as an integral part of its function . | Can be physical (ex. Self-driving cars), non-physical computing software, or a computing concept like e-commerce . | . | Super Mario Brothers 3 . Kensuke Tanabe &amp; Shigeru Miyamoto collaborated to use both their ideas for how game levels should be structured to make SMB3 . | Tanabe liked vertical (up-down) levels . | Miyamoto liked horizontal (left-right) levels . | Characters could move up, down, left, right, etc. . | . | Collaboration w/ people w/ diverse perspectives helps avoid bias in development of computing innovations . | Practice: What are the benefits of collaborating with your peers? . B: Effective collaboration produces computing innovation that reflects the diversity of talents and perspectives of those who design it . | . | Takeaways . Interpersonal skills learned through collaboration: . Communication . | Consensus building . | Conflict resolution . | Negotiation . | Matter in all fields . | . | . | . Video 2 . Pair programming: when two programmers work together as a pair . Driver: writes the program code . | observer/Pointer/navigator: reviews each line of program code as it is typed in, helps the driver when they need it, provides their perspective . | . | Think-pair-share: think through a problem alone –&gt; pair with a partner to share ideas –&gt; share results with the class . Ex. like charades . | The thoughts and ideas of others help you come up with new things . | . | Leave comments in code . Helps communicate with partner . | Helps you communicate/remember your ideas for yourself . | Acknowledge code segments used from other sources; reference where U got them from . | Acknowledge media used from other sources: reference where u got them from in a comment . | Differentiate what you did and what your partner(s) did . | Clarify the functionality of your code . | . | Tools to help collaborate in class . Repl.it . | GitHub - collaboration &amp; repository . Repository = a place where you can put all your projects and get comments/feedback on them . | . | Shared document or folder . | Ask friends to test drive program &amp; give feedback . | . | Takeaways . Consultation &amp; communication with users are important aspects of the development of computing innovations . | Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives &amp; to develop a program that fully incorporates these perspectives . | Online tools support collaboration by allowing programmers to share &amp; provide feedback to each other . | . | .",
            "url": "https://rey444.github.io/shreya/2023/01/30/.1-AP-Daily-Videos.html",
            "relUrl": "/2023/01/30/.1-AP-Daily-Videos.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Big Idea 5.2 Digital Divide",
            "content": "Digital Divide . &quot;have&quot; vs. &quot;have not&quot; in terms of computers, internet, or access to technology some areas of the country/world may have little to no access to technology | some countries have restricted internet access | divide in digital services allowed in countries | . | . Factors that Contribute to the Digital Divide . socioeconomic status | geographic location san diego area itself has discrepancies in access to technology between the northern and southern regions | sunnyvale is considered to be a &quot;tech hub&quot; for the US | at the start of the pandemic, 90,000 kids in New Jersey didn&#39;t have access to computers for distance learning | . | education level | nationality | religion some religious groups choose not to use technology, ex. the Amish | . | age | ethnicity | people may be working on older versions of technology and not have access to the latest updates older generations of computers, older software versions, etc. | . | . Computers in the Classroom . Del Norte prefers that students bring computers to school + provide chromebooks to all students who don&#39;t have access to a computer | at school, there are internet blockers and limitations on what chromebooks or school computers can do, thus giving those with a personal computer an advantage | . 5.2 Hacks Questions . 1. What do you think of investments being made in protection versus investments being made in technology education? Are digital fears expanding digital divide? . Investments being made in protection online are important to prevent getting hacked. Investments made in technology education are equally as important, because we use technology more and more every day, and having the skills to be able to use it effectively are becoming more important. I don&#39;t think that fears about hackers or digital safety are expanding the digital divide, but it can be argued that they are, since it costs money to get your devices protected. . 2. How does someone empower themselves in a digital world? . People can empower themselves in the digital world by using computers that are accessible to all at libraries/schools to learn more about the technology. . 3. How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . Donating old electronics or computer models or unused tech could be a way for those who are empowered to help those who are not empowered. We can also give monetary donations that would enable those in need to buy devices. . 4. Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . I don&#39;t think that the use of traditional methods of teaching are blocking empowerment. However, some places have technology bans and bans on which sites can be accessed on the internet, and this can lead to blocks in digital empowerment. .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/24/notes-5.2.html",
            "relUrl": "/t2/2023/01/24/notes-5.2.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Big Idea 5.1 Beneficial and Harmful Effects Notes",
            "content": "ChatGPT . disruptive technology: changes the way we do things in everyday life | owned by OpenAI --&gt; owned by microsoft | what does it do: can give you answers to coding problems, can do your math homework, can do history homework, can write code for you, and more | who is concerned about it? artists | poets | authors | teachers/schools: some schools are banning it | google: Platform shift, money disrupter, revenue model for Google changes | github complement: can suggest code in real time | . | chatGPT doesn&#39;t cause you to click links for getting money through advertising like google does | it&#39;s basically stuff that we already have access to, but now we get it through less clicks | might hinder students&#39; learning and hinder the development of critical thinking induces bias: only gives one answer to a single problem rather than considering multiple different perspectives; propagates one perspective | dangers of limited perspective and bias is important to consider in CS | bias is brought up by collegeboard as well in MCQ | . | . Dopamine/Tech Addiction . games, social media, etc. can become addicting and prevent us from living healthy lives | anything in moderation is good, but too much of anything can lead to negative drawbacks in lifestyle, physical health, and mental health | we become less conscious of our real lives and focus on our virtual lives | . Automated Telephone Trees . basically when a robot/pre-programmed voice answers the phone voice recognition and keypad use --&gt; customers can find answers quickly | . | designed to save companies money | reduce hold time for customers | . Automated Telephone Tree Questions . 1. What are innovation you would like to see in phone tree? . An innovation I would like to see in a phone tree is the ability to take orders for restaurants. For example, you could use the keypad to select menu items as prompted by the phone tree, and it records you order. . 2. Will this phone tree transfer you to relevant department during office hours? . Phone trees are already used by many schools to help transfer callers between departments. . 3. Will it always enable you the opportunity for human response? . Human response should be an opportunity in most cases, because the technology obviously isn&#39;t perfect and the needs of all callers can&#39;t be met using a call tree. . 5.1 Hacks Questions . 1. Come up with three of your own Beneficial and corresponding Harmful Effects of Computing . - Benefit: faster communication - Drawback: social media addiction - Benefit: ability to automate phone calls and redirect phone calls automatically, and use robots for manufacturing - Drawback: job loss for humans - Benefit: new safety technology for vehicles, like blindspot warnings and self-driving systems - Drawback: putting your life into the hands of AI . 2. Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? . I think that the dopamine issues discussed above are real. Ever since I got social media, I have observed that I do spend more time on it--time which could be spent doing other things. I have also seen the impact our phones have had on in-person social interaction, as it has become more difficult to stay in the moment and engage with those who are in the room with us, since it is so easy to text people. Sometimes, my phone has distracted me from studying, because I&#39;ll sometimes want to text or call a friend instead of working. I never really got into video games, however, which was probably for the best. I try to take breaks from social media occasionally by deleting the app for a coupe days or sometimes even weeks, and have tried to create a schedule for myself which balances texting friends/socializing and work. . 5.1 &amp; 5.2 Reflection Questions . 1. Think of three beneficial effects of your projects based on 5.1 Unit . - Saving Time: Users can use our website to help them decide which chevrolet car is best suited for them to buy. This is beneficial, because there are many cars available on the market and it is very time consuming to go through the process of deciding which new car to buy, because there are so many specifications which vary across different models. - Advertisement: Chevrolet&#39;s cars are the cars on our website, which means that users will be directed towards buying a chevy since chevys are the only car brand whose cars are in our API. - Convenient: Instead of having to go to the dealership to figure out the features of a car or sort through a car company&#39;s website which has hundreds of cars on it, it&#39;s easier to just plug your needs into our questionnaire and get suggested a car which is a good match for your needs! . 2. Think of a potential harmful effect of your project. . A potential harmful effect of our CPT project is that it can draw people away from visiting car dealerships or car companies&#39; websites. If a person already knows exactly which car they want to buy after being helped from our site, their visit to the dealership will be much shorter. Additionally, since users will be able to use our site to find which car is the best fit to them, this could decrease internet traffic to the websites of actual car companies which provide a plethora of information about their car models, which you&#39;d normally have to browse through when considering which new car to buy. . 3. Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . Pros of internet blockers at school are that they can keep students away from distracting sites, so they can&#39;t waste time in class. A con of having internet blockers and admin passwords at school is that they can sometimes hinder learning in computer based classes like CSP, which require visiting many sites and accessing many features, some of which are blocked by the school wifi. . 4. What concerns do you have personally about the digital divide? For yourself or for others. . A concern I have about the digital divide lies in the ability to find jobs. Today, many jobs require having basic software skills--skills which are difficult for people who grew up in some developing countries to have, with unreliable internet and lack of access to devices which can run various softwares. .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/24/notes-5.1.html",
            "relUrl": "/t2/2023/01/24/notes-5.1.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "CPT Scoring Assignment 3",
            "content": "Reporting Category Student 1 Score: 3/6 Collegeboard Score: 3/6 Comments . Program Purpose and Function | 0 | 1 | video shows input, program functionality, and output | describes overall purpose of program | describes overall functionality of program, but program has &quot;hello&quot; and &quot;hi&quot; as inputs, which is different from the written description | describes input and output of program, but slightly differently from what&#39;s presented in video | collegeboard scored 1 for this criteria, stating that the response does match with the functionality shown in the video, because the rock/paper/scissors was present in both the video and the written response | | . Data Abstraction | 0 | 0 | has one code segment that shows how data&#39;s being stored in a list and identifies the name of the variable representing the list being used in the program | second code segment does not show the data in the list being used | name of the list (RPS) isn&#39;t called in the code | identifies what data&#39;s stored in the list; the potential options that the computer can select as its input | | . Managing Complexity | 1 | 0 | includes a list, but the list isn&#39;t used to manage complexity in the program | I gave the point because the student explains how the program can be written differently without lists, but collegeboard didn&#39;t give them the point because their program can be written without the list using an if statement to set cpuPlay variable based on a random number, and because it reslits in a program that&#39;s just as easy to develop or maintain as the one with the list | | . Procedural Abstraction | 0 | 0 | shows a student developed procedure with at least one parameter | describes the functionality of the procedure, but doesn&#39;t explain how the procedure contributes to the overall program | | . Algorithm Implementation | 1 | 1 | student-developed algorithm includes sequencing, selection, and iteration | response explains how the algorithm in the procedure works in a way that would allow it to be replicated | | . Testing | 1 | 1 | describes two calls to the procedure with different argument, and shows the different results | describes the conditions being tested for the two procedure calls, and identifies the results of each call | | . Reporting Category Student 2 Score: 6/6 Collegeboard Score: 6/6 Comments . Program Purpose and Function | 1 | 1 | video shows input, program functionality, and output | written description program functionality matches what&#39;s in the video | describes the purpose of the program as &quot;creative expression&quot; | describes the input: “The input of both typing words to insert into the poem and a typing of yes or no to set articles or no articles as well as number of desired poems.” | describes the output: &quot;generated all reslits in the output of a certain specified number of poems according to those words and specifications&quot; | response describes the exact functionality shown in the video | | . Data Abstraction | 1 | 1 | two distinct code segments are provided | first segment shoes data being stored in identified lists | nsecond segment shows the data being accessed from the identified lists under a new name since it passed as a parameter: name of the list is identified as nounList, even though it&#39;s referred to as wordList when it&#39;s passed through the selectWord procedure | response identifies what&#39;s stores in the list | | . Managing Complexity | 1 | 1 | includes code that uses lists of words to manage complexity when generating poetry | explains how the code wolid be written differently without the list, and how the list helps manage complexity | | . Procedural Abstraction | 1 | 1 | includes a student developed procedure with 4 explicit parameters | describes the functionality of the procedure: &quot;it is putting together the final selection of poems&quot; | describes how the procedure contributes to the overall program by stating it&#39;s used in tandem with user inputs | | . Algorithm Implementation | 1 | 1 | includes a program code segment of a student-developed algorithm that includes sequencing and selection (if statement), and iteration (while loop) | expllains how the algorithm in the procedure works in detail | | . Testing | 1 | 1 | describes two calls to the selected procedure to reslit in different code being executed, varying the argument for the last parameter | describes the condition(s) being tested by each call to the procedure | identifies the reslits of each call | | . Reporting Category Student 3 Score: 2/6 Collegeboard Score: 1/6 Comments . Program Purpose and Function | 1 | 1 | video shows input, program functionality, and output | written description program functionality matches what&#39;s in the video | describes the purpose of the program, but not its function | describes the input | describes the output | response describes the exact functionality shown in the video | collegeboard scored 0 because the response appparently didn&#39;t sufficiently describe the function of the program&lt;/td&gt; &lt;/tr&gt; Data Abstraction | 1 | 0 | two distinct code segments are provided | doesn&#39;t show the data being accessed from the identified lists | response identifies what&#39;s stores in the list | | . Managing Complexity | 0 | 0 | includes code that uses lists to manage complexity | doesn&#39;t explain how the code wolud be written differently without the list, and how the list helps manage complexity; response is too general | | . Procedural Abstraction | 0 | 0 | includes a student developed procedure with 2 explicit parameters | does not include another code segment with a call to the procedure | describes how the procedure contributes to the overall program | | . Algorithm Implementation | 0 | 0 | includes a program code segment of a student-developed algorithm that includes sequencing and selection | does not include iteration | partially explains how the algorithm works; doesn&#39;t state that the index value is set based on the match and what value is set for each US State | | . Testing | 0 | 0 | describes two calls FROM the selected procedure instead of TO the specified procedure | describes two seperate operations being performed by the user, not the conditions being tested by the given parameter | does not identifies the reslults of each call | | . &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Reporting Category Student 4 Score: 6/6 Collegeboard Score: 5/6 Comments . Program Purpose and Function | 1 | 1 | video shows input, program functionality, and output | written description program functionality matches what&#39;s in the video | describes the purpose of the program and its function | describes the input | describes the output | response describes the exact functionality shown in the video | | . Data Abstraction | 1 | 1 | two distinct code segments are provided | first segment shoes data being stored in a list named guesses | second segment doesn&#39;t show the data stored in the list being used--only the length of the list is used | | . Managing Complexity | 1 | 1 | includes a program code segment that uses a list, but the list isn&#39;t used to manage complexity | list merely acts as a counter; can be replaced with a single counter variable | does not explain how the code wolid be written differently without the list, and how the list helps manage complexity | | . Procedural Abstraction | 1 | 1 | includes a student developed procedure with 1 explicit parameter | includes another code segment with a call to the procedure | describes the functionality of the procedure, and how the procedure contributes to the overall program | | . Algorithm Implementation | 1 | 1 | includes a program code segment of a student-developed algorithm that includes sequencing and selection (if statement), and iteration (a repeat loop) | explains how the algorithm in the procedure works in detail | | . Testing | 1 | 0 | gives the conditions being tested for the cases rather than two different arguments that cause a different segment of the code to execute | arguments sholid be specific values used in the call to the procedure | describes the conditions being tested for the cases &amp; what the reslit wolid be for each condition | | . Reflection . Sample 2 is a good example, so to save it in my own notes I have linked it below for reference: Video | Written Response | CB Grading | . | . Personal CPT Connection . In our video, we could demonstrate a user logging in and then answering the questionnaire that helps our program narrow down the best fit chevrolet car for the user | Purpose: to help users find the chevrolet vehicle that would best fit with their transportational needs | Functionality: collecting information for certain attributes and then narrowing down the car model that matches the most of those attributes | input: user answering questionnaire on frontend | output: site telling user which chevrolet vehicle is best fit for them to buy | Data Abstraction data stored in api --&gt; called | . | . &lt;/div&gt; | | .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/22/cpt-3.html",
            "relUrl": "/t2/2023/01/22/cpt-3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Database/Model, Backend, OOP, Python Notes & Hacks",
            "content": "Vocab . table = a model/schema within a database | SQL = structure and query language the way we interact with databases | we will do regular coding, and it will allow us to interact with the database | . | persistent data = data that is saved somewhere into a database | . User Table Schema . Defining the title of the table and what goes into it is the schema | db.Model allows us to inherit the properties of db into our user class | database = collection of spreadsheets/tables --&gt; should be on our backend | db.Model is inhertied into the class User(db.model) | each db.Column gets properties according to the capabilities of SQL | . How it Works . we ask the user for an input | it takes the input to the backend --&gt; stores it into a database | we can extract information from the database to bring it back to the frontend, if needed ex. setting a password --&gt; when the site tells you your password is incorrect, it&#39;s crosschecking with the table created on the backend | . | . db = SQLAlchemy(app) &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object # creates multiple columns, one for each type of data (name, uid, password, dob) # defining the database id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) # associating the properties with the database; allows us to move the infor in and out of the database using the column name _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # Defines a relationship between User record and Notes table, one-to-many (one user to many notes) posts = db.relationship(&quot;Post&quot;, cascade=&#39;all, delete&#39;, backref=&#39;users&#39;, lazy=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=date.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob . User Table CRUD Operations . allow us to move data in and out of the database | all the defs are methods of the User Class | python sessions with the database | we are going to try to use these methods to create our own database for our CPT | we need to tell our code where our database file is in order to access it | . def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, &quot;posts&quot;: [post.read() for post in self.posts] } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . DevOps and Databases . can create a database which runs locally to work on/actually code on run locally as we develop on a test database | . | create another database which is used to actually deploy the work; copy over from the database which runs locally once you have it working | we store our database into the &quot;volumes&quot; directory persistent data is stored into the databse | must be careful to ensure that the persistent data isn&#39;t erased | . | Link to DevOps section of lecture for refernece | there are administrative tools that help us open the database ex. SQLite | . | . SQL Administrative Tools . we are the admins use tools to help us figure out what&#39;s going on in the backend | . | .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/17/database-backend-oop-python.html",
            "relUrl": "/t2/2023/01/17/database-backend-oop-python.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "CPT Scoring Assignment 2",
            "content": "Reporting Category Student 1 Score Collegeboard Score Comments . Program Purpose and Function | 0 | 0 | video shows input, program functionality, and output . written description program functionality doesn&#39;t match what&#39;s in the video . doesn&#39;t give thorough explanation of program purpose/creativity that went into the idea . does not state intended purpose of the program . written response doesn&#39;t describe the functionality shown in the video . | . Data Abstraction | 0 | 0 | one program code that shows how data has been stored in this list (or another collection type). . does not have one program code that shows the data in this same list being used as part of fulfilling the program’s purpose. . response describes the data contained in animalList, but also describes the images from another life, animalImages and states that the images are in the list . no descriptive captions and photos are provided in the writeup . | . Managing Complexity | 0 | 0 | does not include a program code segment that uses a list to manage complexity . code segments show data being stores in a list, but neither contain code using a list . does not describe how the list helps manage complexity . | . Procedural Abstraction | 0 | 0 | includes a student developed procedure with one explicit parameter . response includes a call to the procedure in another code segment using an argument . does not describe how the written precedure contributes to the overall functionality . | . Algorithm Implementation | 0 | 0 | includes a program code segment of a student-developed algorithm that includes sequencing and iteration (a for loop), and selection (an if statement) . doesn&#39;t explain how the algorithm works in detail; someone else wouldn&#39;t be able to read it and recreate it . | . Testing | 1 | 1 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. . describes the condition(s) being tested by each call to the procedure: The response states, “The condition tested in the first call is when evaluateGuess is equal to one of the animals in animalList.” The response states the other condition being tested is “when evalulateGuess is not equal to one of the animals in animalList.” . identifies the results of each call: “Result of the first call was ‘You got a point!’,” and “Result of the second call was ‘Thats 1 strike’.” . | . Reporting Category Student 2 Score Collegeboard Score Comments . Program Purpose and Function | 1 | 1 | video shows input, program functionality, and output . written description program functionality matches what&#39;s in the video . describes the purpose of the program as &quot;creative expression&quot; . describes the input: “The input of both typing words to insert into the poem and a typing of yes or no to set articles or no articles as well as number of desired poems.” . describes the output: &quot;generated all results in the output of a certain specified number of poems according to those words and specifications&quot; . response describes the exact functionality shown in the video . | . Data Abstraction | 1 | 1 | two distinct code segments are provided . first segment shoes data being stored in identified lists . nsecond segment shows the data being accessed from the identified lists under a new name since it passed as a parameter: name of the list is identified as nounList, even though it&#39;s referred to as wordList when it&#39;s passed through the selectWord procedure . response identifies what&#39;s stores in the list . | . Managing Complexity | 1 | 1 | includes code that uses lists of words to manage complexity when generating poetry . explains how the code would be written differently without the list, and how the list helps manage complexity . | . Procedural Abstraction | 1 | 1 | includes a student developed procedure with 4 explicit parameters . describes the functionality of the procedure: &quot;it is putting together the final selection of poems&quot; . describes how the procedure contributes to the overall program by stating it&#39;s used in tandem with user inputs . | . Algorithm Implementation | 0 | 1 | includes a program code segment of a student-developed algorithm that includes sequencing and selection (if statement), and iteration (while loop) . expllains how the algorithm in the procedure works in detail . | . Testing | 1 | 1 | describes two calls to the selected procedure to result in different code being executed, varying the argument for the last parameter . describes the condition(s) being tested by each call to the procedure . identifies the results of each call . | . Reporting Category Student 3 Score Collegeboard Score Comments . Program Purpose and Function | 1 | 0 | video shows input, program functionality, and output . written description program functionality matches what&#39;s in the video . describes the purpose of the program, but not its function . describes the input . describes the output . response describes the exact functionality shown in the video . collegeboard scored 0 because the response appparently didn&#39;t sufficiently describe the function of the program&lt;/td&gt; &lt;/tr&gt; Data Abstraction | 1 | 1 | two distinct code segments are provided . first segment shoes data being stored in identified lists . second segment shows the data being accessed from the identified lists in a loop via a parameter that is set to the identified list . response identifies what&#39;s stores in the list . | . Managing Complexity | 1 | 1 | includes a list that combines 6 rankings and an image URL for a single character into one collection to pass to the function that determines a winner . explains how the code would be written differently without the list, and how the list helps manage complexity . | . Procedural Abstraction | 1 | 1 | includes a student developed procedure with 2 explicit parameters . includes another code segment with a call to the procedure . describes how the procedure contributes to the overall program . | . Algorithm Implementation | 1 | 1 | includes a program code segment of a student-developed algorithm that includes sequencing and selection (if statement), and iteration (for loop) . expllains how the algorithm in the procedure works in detail . | . Testing | 1 | 1 | describes two calls to the selected procedure to result in different code being executed, varying the argument for the last parameter . describes the condition(s) being tested by each call to the procedure . identifies the results of each call . | . &lt;/tbody&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Reporting Category Student 4 Score Collegeboard Score Comments . Program Purpose and Function | 1 | 1 | video shows input, program functionality, and output . written description program functionality matches what&#39;s in the video . describes the purpose of the program and its function . describes the input . describes the output . response describes the exact functionality shown in the video . | . Data Abstraction | 1 | 0 | two distinct code segments are provided . first segment shoes data being stored in a list named guesses . second segment doesn&#39;t show the data stored in the list being used--only the length of the list is used . | . Managing Complexity | 1 | 0 | includes a program code segment that uses a list, but the list isn&#39;t used to manage complexity . list merely acts as a counter; can be replaced with a single counter variable . does not explain how the code would be written differently without the list, and how the list helps manage complexity . | . Procedural Abstraction | 1 | 1 | includes a student developed procedure with 1 explicit parameter . includes another code segment with a call to the procedure . describes the functionality of the procedure, and how the procedure contributes to the overall program . | . Algorithm Implementation | 1 | 1 | includes a program code segment of a student-developed algorithm that includes sequencing and selection (if statement), and iteration (a repeat loop) . explains how the algorithm in the procedure works in detail . | . Testing | 1 | 0 | gives the conditions being tested for the cases rather than two different arguments that cause a different segment of the code to execute . arguments should be specific values used in the call to the procedure . describes the conditions being tested for the cases &amp; what the result would be for each condition . | . Reflection . What our program will need to meet all CPT requirements:1. clear video showing input, program functionailty, and output2. a clear description of the purpose of our project (why we chose to make it), and functionality/what it actually does . explanation of the exact functionality that&#39;s shown in the video | code that shows data being stored in a list | code that shows the data stored in the list being used | explanation of how the list is being used to manage complexity | an explanation of how the code might be written differently without the list | needs a procedure and a call to the procedure | a description of the procedure and how it contributes to the overall program | an algorithm that uses sequencing, selection, and iteration | an explanation of how the algorithm in the procedure works | gives two different arguments that cause different segments of the code to execute | describe the conditions being tested for the arguments and what the results would be for each condition | &lt;/div&gt; . | .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/17/cpt-2.html",
            "relUrl": "/t2/2023/01/17/cpt-2.html",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Model and Object-Oriented Programming Notes & Hacks",
            "content": "Vocab . Class = a blueprint for creating an object (person) | Object = a data structure; used like Python variables when we have an object, we have specific properties with which can describe the object | an instance of the class/template | many objects can be created from the same class | each object contains its own instance data | instance data is set up by the constructor (&quot;init&quot; method; init helps us make the object) | use self.() to refer to something that&#39;s a part/attribute of our object | . | A Class . has attributes, which are collections of data | has methods, which are a collection of functions/procedures | we use special symbols in our class to help us do stuff with our objects | . Dot Notation . Methods in the class/template become part of the object | Methods can be accessed using dot notation: object.method() | . Class and Object Code; How to Create Objects and Print Them . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid # user id / username self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # we store the underscore, but it will give us the result without the underscore; instead of getting the object ID back, we get the printed version # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) # creates user 1 as an object. this object&#39;s properties are name, uid, and password. u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) # creates user 2 as another object u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user from database of users print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) # using function created above to set their password u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$PDY...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$pxX...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$AYz...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Jrq...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$rH9...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$PDY...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$pxX...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$Mkz...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$Jrq...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$rH9...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$PDYnY6nRiKxxZT9a$a40c359b1c23fc476cbd710b4040951525bb509714ff26675411961d51b1d90b&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$pxXh8SHOTMeEJkZA$e90edf4495b56fbeebcd5346a4783457f39893c1453d5cafb1fe79219dc15cd0&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$Mkzfzq5qH0sH6Q8c$5b7e637b47ecdaef09a14d96d68500ae2f43b9e3b6ba9abe5dd08f7b8f8e09cb&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$JrqvCTzmWtq44I71$bab9299cd8572611637205861ac9ef978b17c2c21c827b075c95fcc04460b39a&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$rH9FJjAgwHZnpc8q$e88a5e6dd21f6fef1ac2cea3deff3db5d052d993dd2a3b7b8df78745fa07c13c&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$PDYnY6nRiKxxZT9a$a40c359b1c23fc476cbd710b4040951525bb509714ff26675411961d51b1d90b&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$pxXh8SHOTMeEJkZA$e90edf4495b56fbeebcd5346a4783457f39893c1453d5cafb1fe79219dc15cd0&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$Mkzfzq5qH0sH6Q8c$5b7e637b47ecdaef09a14d96d68500ae2f43b9e3b6ba9abe5dd08f7b8f8e09cb&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$JrqvCTzmWtq44I71$bab9299cd8572611637205861ac9ef978b17c2c21c827b075c95fcc04460b39a&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$rH9FJjAgwHZnpc8q$e88a5e6dd21f6fef1ac2cea3deff3db5d052d993dd2a3b7b8df78745fa07c13c&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2004, 12, 14) age = calculate_age(dob) print(age) . 18 . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): # also add classOf up here self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf # adding classOf attribute to define year of graduation @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) @property def classOf(self): return self._classOf # add setter function for classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class of&quot; : self.classOf # update dictionary by adding classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password}, dob={self._dob}, class of={self._classOf})&#39; # update by adding classOf if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&#39;1872&#39;) u2 = User(name=&#39;Shreya Sapkal&#39;, uid=&quot;rev&quot;, password=&#39;password&#39;, dob=date(2001, 1, 1), classOf=&#39;2023&#39;) # set new user, which is me print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) # call new user data print(&quot;Raw Variables of object: n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u2), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u2), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;class of&#34;: &#34;1872&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$rExnFZCwS8zACJw3$7b01f6dd4dfabef426a45506b7380f5e348210fedc6159bc1f57d68181483a26&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: &#39;1872&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$rExnFZCwS8zACJw3$7b01f6dd4dfabef426a45506b7380f5e348210fedc6159bc1f57d68181483a26, dob=1847-02-11, class of=1872) JSON ready string: {&#34;name&#34;: &#34;Shreya Sapkal&#34;, &#34;uid&#34;: &#34;rev&#34;, &#34;dob&#34;: &#34;01-01-2001&#34;, &#34;age&#34;: 22, &#34;class of&#34;: &#34;2023&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Shreya Sapkal&#39;, &#39;_uid&#39;: &#39;rev&#39;, &#39;_password&#39;: &#39;sha256$mH2K840rgcynTeBy$50b97b58930c257824bfe3ba516d6b2ab70e1d42280882e653a1cb1276ae4d89&#39;, &#39;_dob&#39;: datetime.date(2001, 1, 1), &#39;_classOf&#39;: &#39;2023&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Shreya Sapkal, uid=rev, password=sha256$mH2K840rgcynTeBy$50b97b58930c257824bfe3ba516d6b2ab70e1d42280882e653a1cb1276ae4d89, dob=2001-01-01, class of=2023) . CPT Connection . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, carType): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._carType = carType # will store what car type a person chooses (gas vs. electric) so we can show it as stats for site visitors @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def carType(self): return self._carType # a setter function, allows classOf to be updated after initial object creation @carType.setter def name(self, carType): self._carType = carType # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;selected car type&quot; : self.carType } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password}, selected car type={self._carType})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, carType=&#39;electric&#39;) u2 = User(name=&#39;Shreya Sapkal&#39;, uid=&#39;rev&#39;, password=&#39;password&#39;, carType=&#39;gasoline&#39;) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) print(&quot;JSON ready string: n&quot;, u2, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u2), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u2), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;electric&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;selected car type&#34;: &#34;electric&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$xXKiDujwgutJcOH2$f59ab95e2aa72e8807a3fa41889e3a95e530145f09a577d55da6dd583f774819&#39;, &#39;_carType&#39;: &#39;electric&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_carType&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;carType&#39;, &#39;dictionary&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$xXKiDujwgutJcOH2$f59ab95e2aa72e8807a3fa41889e3a95e530145f09a577d55da6dd583f774819, selected car type=electric) JSON ready string: {&#34;name&#34;: &#34;gasoline&#34;, &#34;uid&#34;: &#34;rev&#34;, &#34;selected car type&#34;: &#34;gasoline&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Shreya Sapkal&#39;, &#39;_uid&#39;: &#39;rev&#39;, &#39;_password&#39;: &#39;sha256$85TWjnU8CyiKGKN9$4c8fc9432404f397b9f07e3a46be17a72f54f3c4b87b6d00fc7d13eae08e35cb&#39;, &#39;_carType&#39;: &#39;gasoline&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_carType&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;carType&#39;, &#39;dictionary&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Shreya Sapkal, uid=rev, password=sha256$85TWjnU8CyiKGKN9$4c8fc9432404f397b9f07e3a46be17a72f54f3c4b87b6d00fc7d13eae08e35cb, selected car type=gasoline) . something I want to add: code segment that counts up how many users chose gasoline for car type and how many chose electric | way to display comparison of how many users have chosen each type | .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/10/model-and-object-oriented-programming.html",
            "relUrl": "/t2/2023/01/10/model-and-object-oriented-programming.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Create Performance Task Evaluations",
            "content": "| Reporting Category | Student 1 Score | Student 2 Score | Why | |-|-|-|-| | Program Purpose and Function | 4/6 | 4/6 | describes the overall purpose of the program demonstrated in the video. describes what functionality of the program is demonstrated in the video describes the input and output of the program describes the overall purpose of the program demonstrated in the video. describes what functionality of the program is demonstrated in the video describes the input and output of the program Video does not even use up half of 1 min and I think there was more to show. Could have demonstrated the classification of other types of triangles. In addition, the person only states what the program does, not what other purpose it can serve so the response could be more detailed | | Data Abstraction | 6/6 | 6/6 | one program code that shows how data has been stored in this list (or another collection type). one program code that shows the data in this same list being used as part of fulfilling the program’s purpose. identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program one program code that shows how data has been stored in this list (or another collection type). one program code that shows the data in this same list being used as part of fulfilling the program’s purpose. identifies the name of the variable representing the list being used in this response. describes what the data contained in this list is representing in the program Very descriptive captions and photos are provided in the writeup | |Managing Complexity | 5/6 | 4/6| includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. The list example they provided doesn’t actually manage the complexity of the program because it could be replaced and the code would be just as manageable this shows how they used multiple lists to manage a lot of information | | Procedural Abstraction | 3/6 | 6/6 | one program code showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure one program code showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program one program code showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure one program code showing where the student-developed procedure is being called. describes what the identified procedure does and how it contributes to the overall functionality of the program | | Algorithm Implementation | 4/6 | 6/6 | includes a program code segment of a student-developed algorithm that includes sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it includes a program code segment of a student-developed algorithm that includes sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it Code does show the use of conditionals and loops for iteration but theses features are not shown in the video. Video was only 14s long so this is something that could have been demonstrated | | Testing | 5/6 | 6/6 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. describes the condition(s) being tested by each call to the procedure. identifies the result of each call | .",
            "url": "https://rey444.github.io/shreya/tri2/2023/01/09/create-performance-task-evaluation-1.html",
            "relUrl": "/tri2/2023/01/09/create-performance-task-evaluation-1.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "CPT Scoring Assignment 1",
            "content": "Reporting Category Student 1 Score Student 2 Score Why . Program Purpose and Function | 4/6 | 4/6 | describes the overall purpose of the program demonstrated in the video . describes what functionality of the program is demonstrated in the video . describes the input and output of the program . describes the overall purpose of the program demonstrated in the video. . describes what functionality of the program is demonstrated in the video . describes the input and output of the program . Video does not even use up half of 1 min and I think there was more to show. Could have demonstrated the classification of other types of triangles. In addition, the person only states what the program does, not what other purpose it can serve so the response could be more detailed . | . Data Abstraction | 6/6 | 6/6 | one program code that shows how data has been stored in this list (or another collection type). . one program code that shows the data in this same list being used as part of fulfilling the program’s purpose. . identifies the name of the variable representing the list being used in this response.describes what the data contained in this list is representing in the program . one program code that shows how data has been stored in this list (or another collection type). . one program code that shows the data in this same list being used as part of fulfilling the program’s purpose. . identifies the name of the variable representing the list being used in this response. . describes what the data contained in this list is representing in the program . Very descriptive captions and photos are provided in the writeup . | . Managing Complexity | 5/6 | 4/6 | includes a program code segment that shows a list being used to manage complexity in the program . explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. . includes a program code segment that shows a list being used to manage complexity in the program explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. . The list example they provided doesn&#39;t actually manage the complexity of the program because it could be replaced and the code would be just as manageable this shows how they used multiple lists to manage a lot of information . | . Procedural Abstraction | 3/6 | 6/6 | one program code showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure . one program code showing where the student-developed procedure is being called. . describes what the identified procedure does and how it contributes to the overall functionality of the program . one program code showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure . one program code showing where the student-developed procedure is being called. . describes what the identified procedure does and how it contributes to the overall functionality of the program . | . Algorithm Implementation | 4/6 | 6/6 | includes a program code segment of a student-developed algorithm that includes sequencing, selection, and iteration . explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it . includes a program code segment of a student-developed algorithm that includes sequencing, selection, and iteration explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it . Code does show the use of conditionals and loops for iteration but theses features are not shown in the video. Video was only 14s long so this is something that could have been demonstrated . | . Testing | 5/6 | 6/6 | describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. . describes the condition(s) being tested by each call to the procedure.identifies the result of each call . describes two calls to the selected procedure identified in written response 3c. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. . describes the condition(s) being tested by each call to the procedure. . identifies the result of each call . | .",
            "url": "https://rey444.github.io/shreya/t2/2023/01/09/cpt.html",
            "relUrl": "/t2/2023/01/09/cpt.html",
            "date": " • Jan 9, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Car Questions Sample Page",
            "content": "",
            "url": "https://rey444.github.io/shreya/tri1/2023/01/08/car-questions.html",
            "relUrl": "/tri1/2023/01/08/car-questions.html",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "3.17 - 3.18 Notes",
            "content": "Vocab . algorithmic efficiency: The ability of an algorithm to solve a problem in an efficient way time complexity | space complexity | . | decision problem: a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. | decidable problem: a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not | . | undecidable problem: problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem | . | the halting problem: an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. | . | . 3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of &quot;never&quot;. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is &quot;halts&quot;. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of &quot;never&quot;. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/14/3.17-3.18-notes.html",
            "relUrl": "/t2notes/2022/12/14/3.17-3.18-notes.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "3.17 - 3.18 Hacks",
            "content": "Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . An example of an undecidable problem is determining how many even numbers exist. There are an infinite number of even numbers, so the algorithm would just keep running forever and producing higher and higher values. . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! (Plot 5 Points Minimum) | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 3000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 3000 loops in 127 microseconds Your number was found at 2999 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 149 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 13 loops in 4 microseconds . 148 . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . def checkEven(number): if number % 2 == 0: print(str(number) + &quot; is even&quot;) else: print(str(number) + &quot; is not even&quot;) print(checkEven(30)) print(checkEven(15)) . 30 is even None 15 is not even None . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . KeyboardInterrupt Traceback (most recent call last) /home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb Cell 8 in &lt;cell line: 12&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; while i == 0: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; number += 1 &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; if integerTest(number) == False: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; i +=1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print(&#34;Done&#34;) /home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb Cell 8 in integerTest(n) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; def integerTest(n): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; # Testing if the number is an integer -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; if n%1 ==0: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return True &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-14-3.17-3.18-hacks.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; else: KeyboardInterrupt: .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/14/3.17-3.18-hacks.html",
            "relUrl": "/t2hacks/2022/12/14/3.17-3.18-hacks.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "3.16 Notes",
            "content": "Vocab . simulation: a tested scenario used for viewing results/outputs to prepare for them in real world situations | . 3.16: Simulations . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . It will take 1.0101525445522108 seconds for an object that weighs 110 pounds to fall 5.0 meters in a vacuum . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . 1.0999999999999999 5.928999999999999 . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . The Man Has Made It Home After 572 Turns The Man Has Made It Home After 2 Turns ( 66 -404 ) The Man Has Made It Home After 1828044 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 1928 Turns The Man Has Made It Home After 56 Turns The Man Has Made It Home After 12 Turns The Man Has Made It Home After 5768 Turns The Man Has Made It Home After 22 Turns ( -14 328 ) ( -615 2049 ) ( -1159 2319 ) ( -2036 1732 ) ( -2585 1893 ) ( -2833 2779 ) ( -1702 2286 ) ( -684 2366 ) ( -1541 1373 ) ( -2082 2754 ) Caped The Man Has Made It Home After 2 Turns ( 778 -670 ) ( 1112 -1570 ) ( 1488 -1500 ) ( 1136 -902 ) ( 1621 -553 ) ( 2546 -370 ) ( 2531 -193 ) ( 2797 -3 ) ( 3104 -230 ) ( 2032 1002 ) Caped The Man Has Made It Home After 10 Turns ( 501 -1749 ) ( 647 -2137 ) ( 1308 -3072 ) ( 2321 -3659 ) ( 3291 -4465 ) ( 2779 -4627 ) ( 2292 -4508 ) ( 2668 -4744 ) ( 1801 -4825 ) ( 2392 -3998 ) Caped The Man Has Made It Home After 2 Turns The Man Has Made It Home After 12 Turns ( -1235 1487 ) ( -1977 2633 ) ( -1229 2907 ) ( -2113 4507 ) ( -1013 5001 ) ( -1899 3185 ) ( -2019 2675 ) ( -1339 2787 ) ( -1675 4913 ) ( -2086 4420 ) Caped The Man Has Made It Home After 6 Turns The Man Has Made It Home After 784 Turns ( -1105 811 ) ( -802 574 ) ( -1642 508 ) ( -762 1000 ) ( -586 1782 ) ( -551 1287 ) ( -873 1797 ) ( -777 2045 ) ( -710 2192 ) ( -2326 1600 ) Caped The Man Has Made It Home After 4 Turns ( 1001 675 ) ( 888 -1056 ) ( 101 -575 ) ( -802 -1418 ) ( -1621 -2107 ) ( -131 -1483 ) ( 723 -1063 ) ( 825 -615 ) ( 655 -691 ) ( 518 -472 ) Caped The Man Has Made It Home After 283134 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 14 Turns The Man Has Made It Home After 8 Turns The Man Has Made It Home After 18550 Turns ( -147 -637 ) ( -497 -393 ) ( -1147 -1043 ) ( -1103 483 ) ( -1463 -313 ) ( -1695 -1027 ) ( -1595 -585 ) ( -1367 -573 ) ( -1875 -987 ) ( -2162 -640 ) Caped The Man Has Made It Home After 36 Turns ( -244 262 ) ( -1827 867 ) ( -2695 2177 ) ( -1045 1895 ) ( -1242 2510 ) ( -2110 3398 ) ( -1437 3329 ) ( -1826 3328 ) ( -1898 2946 ) ( -1169 2805 ) Caped The Man Has Made It Home After 2 Turns The Man Has Made It Home After 44 Turns ( -484 -44 ) ( -333 -805 ) ( -1934 -1484 ) ( -2054 -730 ) ( -2698 -486 ) ( -2237 -683 ) ( -2378 -1132 ) ( -2729 -2369 ) ( -3263 -2557 ) ( -2990 -1460 ) Caped The Man Has Made It Home After 4 Turns The Man Has Made It Home After 28 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2336 Turns The Man Has Made It Home After 6 Turns The Man Has Made It Home After 10446 Turns The Man Has Made It Home After 2 Turns ( -751 -289 ) ( -1276 -398 ) ( -944 -1130 ) ( -390 -52 ) ( -992 -1144 ) ( -696 -338 ) ( -1482 -720 ) ( -2860 944 ) ( -3373 1163 ) ( -3846 -410 ) Caped The Man Has Made It Home After 141810 Turns The Man Has Made It Home After 1110 Turns The Man Has Made It Home After 2 Turns ( -789 -585 ) ( 993 223 ) ( 1196 1154 ) ( 1130 1598 ) ( 1677 959 ) ( 2182 -946 ) ( 528 -526 ) ( 443 173 ) ( -504 498 ) ( -1990 1058 ) Caped The Man Has Made It Home After 4 Turns The Man Has Made It Home After 6 Turns ( -509 117 ) ( -91 -953 ) The Man Has Made It Home After 2556012 Turns ( 1371 -1267 ) ( 2279 -1267 ) ( 1937 -913 ) ( 2078 -1288 ) ( 2963 -367 ) . KeyboardInterrupt Traceback (most recent call last) /home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb Cell 9 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if step == 1: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; x = x-1 &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; if step == 2: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; y = y+1 &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X12sdnNjb2RlLXJlbW90ZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; if step == 3: KeyboardInterrupt: . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . ( -397 616 ) | -103 ( 429 342 ) | 139 ( 1148 819 ) | -663 ( 1579 1068 ) | 249 ( 1296 1471 ) | -549 ( 1651 905 ) | -836 ( 663 962 ) | -387 ( -431 1555 ) | -138 ( -40 1225 ) | -331 ( -63 1059 ) | 350 Caped ( -77 -817 ) | -30 ( 286 -1176 ) | 286 ( -510 -2666 ) | 744 . KeyboardInterrupt Traceback (most recent call last) /home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb Cell 10 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; turns = [] &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; while (nights &lt; 100): &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; #rando movement &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; step = random.randrange(6) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if step == 0: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-12-13-3.16-notes.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; x = x+1 File /usr/lib/python3.8/random.py:215, in Random.randrange(self, start, stop, step, _int) 213 if stop is None: 214 if istart &gt; 0: --&gt; 215 return self._randbelow(istart) 216 raise ValueError(&#34;empty range for randrange()&#34;) 218 # stop argument supplied. File /usr/lib/python3.8/random.py:254, in Random._randbelow_with_getrandbits(self, n) 251 &#34;Return a random int in the range [0,n). Raises ValueError if n==0.&#34; 253 getrandbits = self.getrandbits --&gt; 254 k = n.bit_length() # don&#39;t use (n-1) here because n can be 1 255 r = getrandbits(k) # 0 &lt;= r &lt; 2**k 256 while r &gt;= n: KeyboardInterrupt: . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/13/3.16-notes.html",
            "relUrl": "/t2notes/2022/12/13/3.16-notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "3.16 Hacks",
            "content": "Hacks . Create a simulation. It can be anything, just has to simulate something. | Some ideas: . Two objects colliding | Gravity on other planets | . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation | import random data = [] for i in range(600): pink = random.randint(1, 6) # pink is one 6 sided die blue = random.randint(1, 6) # blue is another 6 sided die d = { &quot;pink: &quot; + str(pink), &quot;blue: &quot; + str(blue) } data.append(d) df = (data) . df # simulates many rolls . [{&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 2&#39;, &#39;pink: 6&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 6&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 4&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 6&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 3&#39;}, {&#39;blue: 6&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 3&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 3&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 1&#39;}, {&#39;blue: 6&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}, {&#39;blue: 6&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 5&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 5&#39;, &#39;pink: 5&#39;}, {&#39;blue: 4&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 3&#39;, &#39;pink: 3&#39;}, {&#39;blue: 1&#39;, &#39;pink: 1&#39;}, {&#39;blue: 2&#39;, &#39;pink: 4&#39;}, {&#39;blue: 1&#39;, &#39;pink: 4&#39;}, {&#39;blue: 2&#39;, &#39;pink: 3&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 3&#39;, &#39;pink: 4&#39;}, {&#39;blue: 5&#39;, &#39;pink: 2&#39;}, {&#39;blue: 4&#39;, &#39;pink: 3&#39;}, {&#39;blue: 2&#39;, &#39;pink: 2&#39;}] . Simulation Example . The game F1 2020 uses simulations, because it lets you select a car and track to race on from many options. There are multiple options to choose from, and multiple features you can change. It is a simulation because it creates racing situations on the track which are similar to real-world F1 races. .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/13/3.16-hacks.html",
            "relUrl": "/t2hacks/2022/12/13/3.16-hacks.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "3.14 - 3.15 Notes",
            "content": "Vocab . library: is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations | module: precompiled bundle of code that can be used repeatedly in different programs | API: contains specific direction for how the procedures in a library behave and can be used; acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . 3.14: Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank def Dice(n): sum = 0 while n &gt; 0: sum = sum + random.randint(1, 6) n = n - 1 return(sum) # Code here Dice(5) # Will output a range of 4 to 11 . 4 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/12/3.14-3.15-notes.html",
            "relUrl": "/t2notes/2022/12/12/3.14-3.15-notes.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "3.14 - 3.15 Hacks",
            "content": "3.14 Hacks . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . Pandas . A Berkeley Software Distribution licensed open source library | used in data science | used for data analysis, manipulation, and cleaning | makes programming easier by allowing for simple data modeling and data analysis operations without switching to other languages | can slice data frames | can join and merge data frames | can concatenate columns from 2 data frames | can change index values in a data frame | can change column headers | can convert data into many forms | . | Scikit Learn . open source library for machine learning algorithms | can be used with both supervised and unsupervised learning algorithms | does cross validation: checking the accurary of supervised models on unseen data most common use is for music suggestions on spotify | . | has Unsupervised learning algorithms: ex. clustering, factor analysis, principal component analysis, and unsupervised neural networks | can extract features from photos and text | helps programmers code because it includes many algorithms and can be used to perform machine learning and data mining tasks applications in dimensionality reduction, classification, regression, clustering, and model selection | . | . | 3.15 Hacks . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | import random # import all numbers def sortList(numList): # define a function sortList numList = random.sample(range(1, 100), 10) # generate a list of 10 numbers between 1 and 100, and assign it to variable &quot;numList&quot; print(&quot;Your list of 10 random numbers: &quot; + str(numList)) # print the list of 10 random numbers between 1 and 100 evenList = [] # create an empty list for even numbers oddList = [] # create an empty list for odd numbers for i in numList: # iterate through numList if i % 2 == 0: # check if number is divisible by 2 -- remainder must be 0 evenList.append(i) # if the number is divisible by 2, add it to evenList else: oddList.append(i) # if the number is not divisible by 2, add it to oddList print(&quot;Your sorted list of even numbers: &quot; + str(evenList)) # print the evenList print(&quot;Your sorted list of odd numbers: &quot; + str(oddList)) # print the oddList newList = (str(sortList(str(numList)))) # calling the function . Your list of 10 random numbers: [77, 24, 11, 92, 47, 15, 27, 28, 58, 10] Your sorted list of even numbers: [24, 92, 28, 58, 10] Your sorted list of odd numbers: [77, 11, 47, 15, 27] . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 0, -6, 24, 0]) # kept trying different zero placement until i got the right polynomial; left is highest power and right is lowest power print(&quot;Polynomial function f(x)= n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative f&#39;(x)=&quot;, derivative) . Polynomial function f(x)= 5 2 2 x - 6 x + 24 x Derivative f&#39;(x)= 4 10 x - 12 x + 24 . import numpy as np # defining polynomial function var = np.poly1d([13, 0, 4, 0, 0]) function = var / 2 print(&quot;f(x)= n&quot;, function) # calculating the derivative derivative = function.deriv() print(&quot;f&#39;(x)=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=9 f&#39;(x)=&quot;, derivative(9)) . f(x)= 4 2 6.5 x + 2 x f&#39;(x)= 3 26 x + 4 x When x=9 f&#39;(x)= 18990.0 . import random dogs = [&quot;oreo&quot;, &quot;mocha&quot;, &quot;coffee&quot;, &quot;lilly&quot;, &quot;daisy&quot;, &quot;buddy&quot;, &quot;bubba&quot;, &quot;mothi&quot;, &quot;leo&quot;, &quot;sunny&quot;] # create list of 10 dog names cats = [&quot;mimi&quot;, &quot;kyoto&quot;, &quot;billy&quot;, &quot;whiskers&quot;, &quot;bobby&quot;, &quot;basil&quot;, &quot;simba&quot;, &quot;mitten&quot;, &quot;cora&quot;, &quot;gwen&quot;] # create list of 10 cat names random.shuffle(dogs) # use &quot;random.shuffle&quot; command to shuffle the elements in the list of 10 dog names print(&quot;Shuffled dog name list: &quot; + str(dogs)) random.shuffle(cats) # use &quot;random.shuffle&quot; command to shuffle the elements in the list of 10 cat names print(&quot;Shuffled cat name list: &quot; + str(cats)) . Shuffled dog name list: [&#39;mocha&#39;, &#39;leo&#39;, &#39;sunny&#39;, &#39;mothi&#39;, &#39;daisy&#39;, &#39;bubba&#39;, &#39;lilly&#39;, &#39;buddy&#39;, &#39;coffee&#39;, &#39;oreo&#39;] Shuffled cat name list: [&#39;kyoto&#39;, &#39;basil&#39;, &#39;whiskers&#39;, &#39;mitten&#39;, &#39;bobby&#39;, &#39;cora&#39;, &#39;gwen&#39;, &#39;simba&#39;, &#39;billy&#39;, &#39;mimi&#39;] .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/12/3.14-3.15-hacks.html",
            "relUrl": "/t2hacks/2022/12/12/3.14-3.15-hacks.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "3.12 - 3.13 Notes",
            "content": "Vocab . A procedure is a named group of programming instructions that may have parameters and return values | Parameters are input values of a procedure | Arguments specify the values of the parameters when procedure is called | procedural abstraction: provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it; naming and calling a prewritten procedure | modularity: Subdivision of a program into separate subprograms | . 3.12: Calling Procedures Part 1 . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Calling Procedures Part 2 . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . procName (arg1, arg2, ...) --&gt; result . Calling Procedures Practice . Add a procedure call to the code segment below that will convert the outside temperature to Celsius. Assume the Temperature outside is Fahrenheit. The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. You will need to convert the pseudo code to Python . def convertFahrenheit (temperature): # function that converts the variable temperature to celsius celsius = temperature - 32 celsius = celsius * 5/9 return celsius outsideTemperature = input(&quot;What is the temperature outside?&quot;) outsideTemperature = (convertFahrenheit(int(outsideTemperature))) # call the function and assign it to the variable &quot;outsideTemperature&quot;. &#39;outsideTemperature&#39; is the temperature argument print(outsideTemperature) . 26.11111111111111 . 3.13: Developing Procedures . There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements | Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) | Steps of developing procedure: picking name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. | . Practice Writing Procedures . quizGrade = 35 def changeQuizGrade (currentPoints): currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 return currentGrade newPoints = int(input(print(&quot;How many points did you get on your most recent quiz attempt, out of 40?&quot;))) print(str(newPoints) + &quot;/40&quot;) newGrade = (changeQuizGrade(int(newPoints))) if newPoints &gt; quizGrade: newQuizGrade = newGrade print(&quot;Your new grade is &quot; + str(newQuizGrade)) else: print(&quot;Your quiz score is still &quot; + str(quizGrade)) . How many points did you get on your most recent quiz attempt, out of 40? 38/40 Your new grade is 95.0 . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it This is very helpful in managing complexity in a program | . | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what it&#39;s supposed to do is crucial | . Practice Procedural Abstraction . Determine the outcome of this code segment: . quizAverage = 74 . currentScore = 35 . totalPoints = 40 . PROCEDURE updateQuiz(quizAverage, currentScore, totalPoints) . tempAverage &lt;-- currentScore / totalPoints . tempAverage &lt;-- tempAverage * 100 . if tempAverage &gt; quizAverage . quizAverage &lt;-- tempAverage . return quizAverage . The output should be 87.5 . Updating the Contents of a Procedure . It is possible to simply update the contents of the procedure (possibly with another procedure) if you know how to call that specific procedure | For example, we are able to update the procedure updateQuiz with the round() procedure by simply knowing how to call it: | . quizAverage = 74 . currentScore = 35 . totalPoints = 40 . PROCEDURE updateQuiz(quizAverage, currentScore, totalPoints) . tempAverage &lt;-- currentScore / totalPoints . tempAverage &lt;-- tempAverage * 100 . tempAverage &lt;-- round(tempAverage) &lt;- updating the procedure updateQuiz using round() . if tempAverage &gt; quizAverage . quizAverage &lt;-- tempAverage . return quizAverage .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/08/3.12-3.13-notes.html",
            "relUrl": "/t2notes/2022/12/08/3.12-3.13-notes.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "3.12 - 3.13 Hacks",
            "content": "Write and call a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | quizGrade = 35 # set the quiz grade that the student currently has to 35 def changeQuizGrade (currentPoints): # procedure currentGrade = currentPoints / 40 # divide currentPoints by 40 and set equal to currentGrade currentGrade = currentGrade * 100 # calculate a percentage value for the current grade by multiplying currentGrade by 100 return currentGrade newPoints = int(input(print(&quot;How many points did you get on your most recent quiz attempt, out of 40?&quot;))) # get an integer input for the student&#39;s most recent test score print(str(newPoints) + &quot;/40&quot;) # print the student&#39;s most recent score newGrade = (changeQuizGrade(int(newPoints))) # get the new grade by calling the procedure defined as changeQuizGrade if newPoints &gt; quizGrade: # if the new grade is greater than the student&#39;s current grade: newQuizGrade = newGrade # create a new variable for the new quiz grade, and set it equal to newGrade. which we calculated by using the procedure print(&quot;Your new grade is &quot; + str(newQuizGrade)) # print newGrade/the most recent test score else: print(&quot;Your quiz score is still &quot; + str(quizGrade)) # if the latest score isn&#39;t greater than the current score, keep the student&#39;s score the same . How many points did you get on your most recent quiz attempt, out of 40? 38/40 Your new grade is 95.0 .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/08/3.12-3.13-hacks.html",
            "relUrl": "/t2hacks/2022/12/08/3.12-3.13-hacks.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "3.9 & 3.11 Notes",
            "content": "Vocab . algorithms: a process of set of rules to be followed through code | flowcharts: help us visualize the functionality of an algorithm | binary Search Algorithm: a search algorithm that finds the position of a target value within a sorted array | . Algorithms . An algorithm is a process or set of rules to be followed through CODE | Set limitations | can be written in different ways and still accomplish the same tasks | Algorithms that appear similar can yield different side effects or results. | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) | Different algorithms can be developed or use to solve the same problem | . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) # Input 54 and then 95, what do you notice? # when I inputted 54, the output was &quot;It is too cold outside!&quot; # when I inputted 95, the output was &quot;It is too hot outside!&quot; . It&#39;s too hot outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) # Input 54 and then Input 95, what do you notice? # # when I inputted 54, the output was &quot;It is too cold outside!&quot; # when I inputted 95, the output was &quot;It is too hot outside!&quot; AND &quot;Sure I will play outside!&quot; . It&#39;s too hot outside! Sure I will play outside! . Conditionals vs. Booleans . First Block . sum = 1 counter = 3 #iteration var = 0 while (var &lt; 4): #while the var is &lt;= 4, it executes those commands, once it exceeds it hits the else command sum = sum + counter counter = counter + 2 var = var + 1 # now go through the whole thing 4 times, this is an iteration, a vital part of algorithms. else: print(sum) . 25 . Second Block . sum = 0 counter = 9 #iteration while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . 25 . Flowcharts . help us visualize the functionality of an algorithm | good way to double check whether or not the algorithm is achieving its purpose | . How to Set up a Flowchart . label the start point . | Define any and all variables you may need . | Consider the first question you want the algorithm to ask . | Write what you want the algorithm to do if the answer to that question is yes (or true) . | Write what you want the algorithm to do if the answer to that question is no (or false) . Steps 3-5 are the steps to creating code that uses a process called selection (you can convert the question from step 3 to a conditional if-statement in code) . | Write out all necessary steps for the algorithm to function properly . | You may want your algorithm to iterate some steps until a condition is met . | You can write the steps that need to be repeated, then draw an arrow from the last step to a step above that contains a conditional statement . Determine a way to reach the end goal | Selection vs. Iteration . Selection . A process used in algorithms where a conditional if-statement leads to one of two outcomes Outcome 1:if the conditional statement is true, something will happen - Outcome 2: if the conditional statement is false, something else will happen | . | . Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied Once the condition is satisfied, then an outcome is produced | This can take the form of a for-loop, while-loop, and/or if-statement | . | . Combining Algorithms . benefit of combining algorithms:can reduce development time, testing time, and simplify the identification of errors . Rules of Collatz Conjecture . start with any positive integer | if the preceding term is even; divide by 2 | if the preceding term is odd; multiply by 3 and add 1 | repeat steps until you arrive at 1 | the sequence should ALWAYS end up at 1 if repeated. | Algorithm to Start (Determining Whether a Number is Even or Odd) . print(&quot;choose value for x&quot;) varx=int(input(&quot;Enter any positive Integer&quot;)) if (varx %2 == 0): print(&quot;the number is even&quot;) else: print(&quot;the number is odd&quot;) # Run this cell to see how it works . choose value for x the number is odd . Binary Search Algorithm . a search algorithm that finds the position of a target value within a sorted array | compares the target value to the middle element of the array. | algorithm for iterating to find a value inside a data set | starts in the middle of a data set of numbers and eliminates half the data. This process repeats until the desired value is found or until all elements have been eliminated | In order to use binary search effectively and properly, data must be stored in order | must set numbers in an increasing or decreasing order | . How Binary Search Works . Binary Search finds the desired element by continuously chopping the search area in half . Example . [a b c d e f g h] , we are looking for the element f . start in the middle at element d | our target element is greater than d, so we will eliminate everything to the left of d including d | [a b c d e f g h] --&gt; [e f g h] . chop in half again, and when we iterate through we&#39;ll have to eliminate g and h | eliminate g and h | [e f g h] --&gt; [e f] . chop in half again to get the desired element | [e f] --&gt; [f] . binary_search() Function . Made up of 2 arguments: A list to be sorted | A number to be searched | . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Element is present at index 1 . We have created a function called binary_search() function which takes two arguments - a list to be sorted and a number to be searched. . | We have declared two variables to store the lowest and highest values in the list. The lowest is assigned initial value to 0, the highest to len(list1) 1 and mid as 0. . | Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest. The while loop will iterate if the number has not been found yet. . | In the while loop, we find the mid value and compare the index value to the number we are searching for. . | If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to the low. The search moves to the left side. . | Otherwise, if the value of mid index is larger than n, we decrease the mid value by 1 and assign it to the high. The search moves to the right side. . | If the n is equal to the mid value then return mid. . | This will happen until the low is equal and smaller than the high. . | If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function. . | .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/07/3.9-3.11-notes.html",
            "relUrl": "/t2notes/2022/12/07/3.9-3.11-notes.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "3.9 & 3.11 Hacks",
            "content": "3.9: Algorithms &amp; Flowcharts Hacks . Consider this situation: . You&#39;re playing a short game using a random number generator from 1 to 20 . | On each turn, a player will generate 3 random numbers . | They get to keep the highest number that they generate as their score . | . Your TASK: . Create a flowchart that can be used to write an algorithm that calculates a player&#39;s score after a turn . NOTE: Don&#39;t forget the syntax for Flowcharts! (each shape represents an action) . | Try to implement selection and/or iteration in your algorithm . | Please do this using Google Drawing. It can be found in your Google Drive if you click New &gt; More &gt; Google Drawings . | . | Write the working algorithm in Python . Make sure to initialize / define any variables you may need . | Add comments to your code! . | . | Link to my Flowchart . import random # import random numbers numList = [] # create an empty list to be filled with the randomly generated numbers score = 0 # create a variable score, and set it equal to 0 number1, number2, number3 = random.sample(range(1,20), 3) # take a random sample of 3 numbers out of a range of 1-20, and set each of those 3 numbers equal to one of the 3 variables numList.extend([str(number1), str(number2), str(number3)]) # use the 3 variables assigned to the 3 randomly generated numbers to fill the once empty list numList for i in numList: # iterate through numList score = (max(map(int, numList))) # search for the highest number in numList, and once it is found assign it to the variable &quot;score&quot; print(&quot;Your random numbers are &quot; + str(number1) + &quot;, &quot; + str(number2) + &quot;, and &quot; + str(number3) + &quot;. Your score is equivalent to your highest number: &quot; + str(score)) # print the list of 3 random numbers and indicate the score) . Your random numbers are 19, 2, and 14. Your score is equivalent to your highest number: 19 . 3.11: Binary Search Hacks . Using my example above and steps below, create your own iteration using binary search . Steps . Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half subarray after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | def binarySearch(array, x): low = 0 # define low as 0 high = len(array)-1 # define high as the length of the array -1 mid = 0 # define middle as 0 if low &lt;= high: # if low is less than high mid = (low + high) // 2 # find the middle (taking the highest index number plus the lowest and divided by two) if x == array[mid]: # if x is equal to the middle element, return it return mid elif x &lt; array[mid]: # if x is lower than the middle element, make &quot;high&quot; the left of the middle to search the lower half high = mid - 1 return high else: low = mid + 1 # if x is smaller than the middle element, check to the right of the middle element return low else: return -1 array = [1,2,3,4,5,6,7,8,9,10,11] # 6 is at position 5 x = 6 result = binarySearch(array, x) if result != -1: print(&quot;Found at position : &quot;,str(result)) else: print(&quot;Not found, try again&quot;) . Found at position : 5 .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/07/3.9-3.11-hacks.html",
            "relUrl": "/t2hacks/2022/12/07/3.9-3.11-hacks.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "3.8 & 3.10 Hacks",
            "content": "Iteration Hacks . Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word . Ex: . list -&gt; . lima india sierra tango . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() out = &quot;&quot; for letter in inp: for word in words: if letter == word[0]: out += word + &quot; &quot; print(&quot;input:&quot; + &quot; &quot; + inp + &quot; n&quot; + &quot;NATO phonetic alphabet:&quot; + &quot; &quot; + out) . input: boost NATO phonetic alphabet: bravo oscar oscar sierra tango . 2D Arrays Hacks . keypad = [[1, 2, 3], # i represents the row [4, 5, 6], # j represents the columns [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] matrix = 0 while matrix &lt; len(keypad): print(*keypad[matrix]) matrix = matrix + 1 . 1 2 3 4 5 6 7 8 9 0 . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(&quot;Birthdate:&quot; + &quot; &quot; + keyboard[2][2] + keyboard[1][2] + keyboard[3][2] + keyboard[1][2] + keyboard[3][6] + keyboard[3][4] + keyboard[1][2] + keyboard[1][3] + &quot; &quot; + str(keyboard[0][1]) + str(keyboard[0][2]), end=&quot; &quot;) print(&quot; n&quot; + &quot;Age:&quot; + &quot; &quot; + str(keyboard[0][1]) + str(keyboard[0][7]), end=&quot; &quot;) . Birthdate: DECEMBER 12 Age: 17 .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/06/3.8-3.10-hacks.html",
            "relUrl": "/t2hacks/2022/12/06/3.8-3.10-hacks.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "3.8 & 3.10 Notes",
            "content": "Vocab . lists: a sequence of variables | Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | Iteration: the repetition of a process or utterance applied to the result or taken from a previous statement. | Loop: allow you to take the iterators and make them useful | Iterable vs. iteration: When an object is iterable it can be used in an iteration; When passed through the function iter() it returns an iterator | 2D array: a list of lists | . Lists . What are lists? . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . List examples in Python, JavaScript, and Pseudocode. . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] print (fruits) . const fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;]; . fruits ← [apple, grape, strawberry] . More list examples . brands = [&quot;nike&quot;, &quot;adidas&quot;, &quot;underarmour&quot;] #string numbers = [1, 2, 3, 4, 5] #integer truefalse = [True, False, True] #boolean . 4 Data Collection Types in Python . List: collection that is changeable, ordered, allows duplicates, used to store multiple items into one variable | Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) # should print grape; index starts from 0 . grape . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | used when you want to expand the list with more data | | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.insert(1, &quot;hockey&quot;) # first, insert hockey as the first element in the list sports.remove(&quot;soccer&quot;) # then, take out soccer print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list sports.insert(3, &quot;golf&quot;) # use the sports.insert command and indicate what index value (3) we want to add golf at print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;baseball&#39;, &#39;golf&#39;, &#39;basketball&#39;] . Try this . Determine the output of the code segment | . Output . unusual | bold | away | prints these 3 values, because they have a length that is greater than 3 letters | . Iteration . First, what not to do . Iteration is important for your time and sanity . print(&quot;alpha&quot;) print(&quot;bravo&quot;) print(&quot;charlie&quot;) print(&quot;delta&quot;) print(&quot;echo&quot;) print(&quot;foxtrot&quot;) print(&quot;golf&quot;) print(&quot;hotel&quot;) print(&quot;india&quot;) print(&quot;juliett&quot;) print(&quot;kilo&quot;) print(&quot;lima&quot;) print(&quot;mike&quot;) print(&quot;november&quot;) print(&quot;oscar&quot;) print(&quot;papa&quot;) print(&quot;quebec&quot;) print(&quot;romeo&quot;) print(&quot;sierra&quot;) print(&quot;tango&quot;) print(&quot;uniform&quot;) print(&quot;victor&quot;) print(&quot;whiskey&quot;) print(&quot;x-ray&quot;) print(&quot;yankee&quot;) print(&quot;zulu&quot;) #please help me . alpha bravo charlie delta echo foxtrot golf hotel india juliett kilo lima mike november oscar papa quebec romeo sierra tango uniform victor whiskey x-ray yankee zulu . Coding all of these individually takes a lot of unnecessary time, how can we shorten this time? . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | . Types of Iteration . for loop | for loop and range () | while loop | comprehension | . Iterable Objects . Iterable objects are objects that can be iterated. They are the &#39;containers&#39; that store the data to be iterated . lists | tuples | dictionaries | sets | . use iter() command to iterate these containers . 2 Types of Iteration . Definite: clarifies how many times the loop is going to run | Indefinite: specifies a condition that must be met | . for variable in iterable: statement() . Iterable vs. Iterator . When an object is iterable it can be used in an iteration | When passed through the function iter() it returns an iterator | . # iter() is used to iterate manually, one at a time a = [&#39;alpha&#39;, &#39;bravo&#39;, &#39;charlie&#39;] itr = iter(a) print(next(itr)) print(next(itr)) print(next(itr)) . alpha bravo charlie . Loops . Loops allow u to take the iterators and make them useful . Loops take essentially what we did above and automate it | . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Charlie&quot;, &quot;Delta&quot;, &quot;Echo&quot;, &quot;Foxtrot&quot;, &quot;Golf&quot;, &quot;Hotel&quot;, &quot;India&quot;, &quot;Juliett&quot;, &quot;Kilo&quot;, &quot;Lima&quot;, &quot;Mike&quot;, &quot;November&quot;, &quot;Oscar&quot;, &quot;Papa&quot;, &quot;Quebec&quot;, &quot;Romeo&quot;, &quot;Sierra&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Alpha Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform Victor Whiskey X-ray Yankee Zulu . Using the range() function . saves time, but can become tedious . x = range(5) for n in x: print(n) . 0 1 2 3 4 . else, elif, and break . Use when 1 statement isn&#39;t enough . else:when the condition does not meet, do statement()- elif: when the condition does not meet, but meets another condition, do statement() | break: stop the loop | . 2D Iteration . 2D Arrays . A 2D array is simply just a list of lists. The example below is technically correct but... . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Conventially 2D arrays are written like below. This is because 2D arrays are meant to be read in 2 dimensions (hence the name). Writing them like below makes them easier to visualize and understand. . keypad = [[1, 2, 3], # i represents the row [4, 5, 6], # j represents the columns [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Printing a 2D Array . We already know that we can&#39;t just print the matrix by calling it. We need to iterate through it to print it. . i represents the row | j represents the columns | . def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in row: # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col. print(col, end=&quot; &quot;) # Same as 1 print() # Same as 1 print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . More Functions . Try to find another way to print the matrix. Only complete one of the two (unless you&#39;d like to do both). Below is a hint . fruit = [&quot;apples&quot;, &quot;bananas&quot;, &quot;grapes&quot;] print(fruit) print(*fruit) # Python built in function: &quot;*&quot;. Figure out what it does . [&#39;apples&#39;, &#39;bananas&#39;, &#39;grapes&#39;] apples bananas grapes . def print_matrix3(matrix): code = &quot;your code goes here&quot; . Alternatively, find a way to print the matrix using the iter() function you already learned. Or use both! . def print_matrix4(matrix): code = &quot;your code goes here&quot; . Challenge . Change all of the letters that you DIDN&#39;T print above to spaces, &quot; &quot;, and then print the full keyboard. (the things you did print should remain in the same spot) . Alternative Challenge: If you would prefer, animate it using some form of delay so it flashes one of your letters at a time on the board in order and repeats. (this one may be slightly more intuitive) . DO NOT HARD CODE THIS. Don&#39;t make it harder on yourself, iterate through, make it abstract so it can be used dynamically. You should be able to input any string and your code should work. . . 1 6 R A H C M . If you get stuck you can just make a picture with an array and print it (I will grade based on how good it looks) . I do expect an attempt so write some code to show you tried the challenge. .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/05/3.8-3.10-notes.html",
            "relUrl": "/t2notes/2022/12/05/3.8-3.10-notes.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "3.5 - 3.7 Notes",
            "content": "Vocab . boolean: a data type with two possible values - true or false | logic operators: These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result | selection: Selection determines which part of an algorithm are executed based on a condition being true or false | algorithm: a finite set of instructions that accomplish a specific task | . What is a boolean? . A data type with two possible values: true or false | . Boolean and Binary . So similar yet so different. . Boolean math and binary notation both use the same two ciphers: 1 and 0. | However, please note that Boolean quantities are restricted to a singlular bit (can only be either 1, or 0) | On the otherhand, binary numbers may be composed of many bits adding up in place-weighted form to any finite value, or size | . Must Knows . A Boolean value is either TRUE or FALSE | The AP Exam will provide you with a reference sheet with the operators below. | . Operators . a = b | . a ≠ b | . a &gt; b | . a &lt; b | . a ≥ b | . a ≤ b | . Relational Operators in action . How could you use operators to determine if the average of 5 grades is greater than 80? | . With the grades below, use a boolean expression to determine if the average grade is above an 80 and print the result (True or False) | Try it in as few steps as possible! | Be creative! There are obviously TONS of different practical solutions | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 sum = grade1 + grade2 + grade2 + grade3 + grade4 + grade5 avg = sum/5 print(&quot;The average grade is above 80:&quot;, avg &gt; 80) . The average grade is above 80: True . The versatility of relational operators: . print(&quot;100 == 100:&quot;,100==100) print(&quot;Hello == Adios:&quot;,&quot;greeting&quot;==&quot;farewell&quot;) print(&quot;Hello != Adios:&quot;,&quot;greeting&quot;!=&quot;farewell&quot;) print(&quot;Hello == Hola:&quot;,&quot;greeting&quot;==&quot;greeting&quot;) print(&quot;5&gt;=4:&quot;, 5&gt;=4) print (&#39;&#39;) # Notice that relational operators can even work on lists! # For lists, the relational operator compares each respective component until an answer is derived print(&quot;[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]:&quot;, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]) print(&quot;[1,2,3,5] &gt; [1,2,3,4]:&quot;, [1,2,3,5] &gt; [1,2,3,4]) print(&quot;[1,2,3,5] &lt; [1,2,3,4]:&quot;, [1,2,3,5] &lt; [1,2,3,4]) print(&quot;[1,2,3,5] == [1,2,3,4]:&quot;, [1,2,3,5] == [1,2,3,4]) # use == for if conditions . 100 == 100: True Hello == Adios: False Hello != Adios: True Hello == Hola: True 5&gt;=4: True [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;] &gt; [&#39;x&#39;,&#39;y&#39;,&#39;z&#39;]: False [1,2,3,5] &gt; [1,2,3,4]: True [1,2,3,5] &lt; [1,2,3,4]: False [1,2,3,5] == [1,2,3,4]: False . Logical Operators! . These types of operators don&#39;t necessarily deal with equivalent/non-equivalent values, but they rather work on operands to produce a singular boolean result . AND : returns TRUE if the operands around it are TRUE | OR : returns TRUE if at least one operand is TRUE | NOT : returns TRUE if the following boolean is FALSE | . Turn the following arithmetic phrases into either True or False statements as indicated USING LOGICAL OPERATORS . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;24 &gt; 8:&quot;, not 24 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 24 &gt; 8: False 10 &gt; 20: False . Lesson Overview: 3.6 - Conditionals . Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . has an IF statement followed by a block statement | . Can also be seen as if else statements or if else-blocks . has an IF condition followed by a block statement | has an ELSE condition followed by a second block statement | the ELSE statement will only execute if the IF condition does not apply | . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = 17 num2 = 118 sum = num1 + num2 if sum == 200: print(&quot;200&quot;) else: print(str(sum)) . 135 . Lesson Overview - 3.7 Nested Conditionals . Nested conditional statements consist of conditional statements within other conditional statements | Utilizes &quot;if else&quot; statements within &quot;if else&quot; statements | . Basics of a nested conditional: | . Block Coding Visual of Nested Conditionals: . | Example Psuedocode of Nested Conditional Statements . | . Analyzing Code Walkthrough . Psuedocode to the left, block code to the right | Approach the problem by going through each condition one at a time . Decide which ones are false to skip and which ones are true to execute | . | You Try: . | . score = 82 if (score &gt;= 90) { console.log(&quot;You got an A, congrats!&quot;) } else; { if (score &gt;= 75) { console.log(&quot;Please come to retake up to a 90 next week at tutorial!&quot;) } else { console.log(&quot;You have detention!&quot;) } } . The answer for the problem above: it should print &quot;Please come to retake up to a 90 next week at tutorial!&quot; . carbs = 36 protein = 25 sugar = 11 if (carbs &gt;= 55 || protein &lt;= 20 || sugar &gt;= 15) { console.log(&quot;Your lunch is too unhealthy, please pick a new one&quot;) } else { if (carbs &lt; 35 || protein &lt; 25) { console.log (&quot;This lunch is alright but try to add some more carbs or protein&quot;) } else { if (sugar &gt;= 11) { console.log (&quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot;) } else { console.log (&quot;Amazing, you created a healthy lunch!!!&quot;) } } } . The answer for the problem above: It should print &quot;Looks great but lets see if we can cut down on sugar, we don&#39;t want diabetes!&quot; . Writing Nested Code Activity . Write a program that fits these conditions using nested conditionals: If a person has at least 8 hours, they are experienced | If a person is experienced their salary is 90k, if they have ten hours or above their salary 150k | If a person is inexperienced their salary is always 50k | print the salary of the person at the end and whether they are experienced or not | . | hours = 9 # if you use one equal sign, you are assigning a value to a variable; for the booleans, use 2 equal signs if hours &gt;= 10: print(&quot;Very Experienced Person; Salary 150k&quot;) else: if hours &gt;= 8: print(&quot;Experienced Person; Salary 90k&quot;) else: print(&quot;Unexperienced Person; Salary 50k&quot;) . Experienced Person; Salary 90k .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/12/01/3.5-3.7-notes.html",
            "relUrl": "/t2notes/2022/12/01/3.5-3.7-notes.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "3.5 - 3.7 Hacks",
            "content": "Hacks Assignments - Shreya Sapkal . Conditionals: . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . # Here is a python template for you to use. expired = False cost = 50 if expired == True: print(&quot;This product is no good!&quot;) else: if cost &gt; 50: print(&quot;This product is too expensive!&quot;) elif cost &gt;= 25: print(&quot;This is a regular product!&quot;) else: print(&quot;This is a cheap product!&quot;) . This is a regular product! . Boolean/Conditionals: . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | Points will be awarded for creativity, intricacy, and how well Boolean/Binary concepts have been intertwined | . import getpass, sys def question_with_response(prompt): # use of a function print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 question_and_answer = input print(&#39;Hello, &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What year was the last major recession in the US? | a) 2008 | b) 2010 | c) 2020&quot;) if rsp == &quot;a&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The correct answer was a&quot;) rsp = question_with_response(&quot;Who recently bought Twitter? | a) Jeff Bezos | b) Elon Musk | c) Oprah Winfrey&quot;) if rsp == &quot;b&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The correct answer was b&quot;) rsp = question_with_response(&quot;What element causes the sky to look blue? | a) Oxygen | b) Nitrogen | c) Carbon&quot;) if rsp == &quot;b&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect! The correct answer was b&quot;) print(&quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, shreyasapkal You will be asked 3 questions. Question: What year was the last major recession in the US? | a) 2008 | b) 2010 | c) 2020 a is correct! Question: Who recently bought Twitter? | a) Jeff Bezos | b) Elon Musk | c) Oprah Winfrey c is incorrect! The correct answer was b Question: What element causes the sky to look blue? | a) Oxygen | b) Nitrogen | c) Carbon b is correct! you scored 2/3 .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/12/01/3.5-3.7-hacks.html",
            "relUrl": "/t2hacks/2022/12/01/3.5-3.7-hacks.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "3.3 - 3.4 Notes",
            "content": "Vocab . algorithm: a set of instructions that can accomplish a specific task | variables: a method to store data | . What is an Algorithm? . a set of instructions that can accomplish a specific task . 3 Components of an Algorithm . Sequencing: Algorithms do tasks in the order of specification. | Selection: Helps choose two different outcomes based off a decision. | Iteration: If a condition is true, then the code can repeat. | Representing Algorithms . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | Pseudocode: A blend of human language and coding format. | Arithmetic Operations . Subtraction - represented by &quot;-&quot; . num1 = 2 - 1 . Addition - Represented by &quot;+&quot; . num1 = 2 + 1 . Multiplication - Represented by “*” . num1 = 2 * 1 . Division - Represented by “/” . num1 = 2 / 1 . Getting the Remainder - Represented by “MOD” (% in python) . num1 = 5 % 2 . Application of Mathematical Expressions . . Note: collegeboard pseudocode starts at 1 . items can be numbers or variables | num1 = 10 # &quot;num1&quot;, &quot;num2&quot;, etc. are variables num2 = num1 - 25 # we can perform mathematical expressions on the variables as well num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . order of operations (same as in normal math) | num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) # should print 10 . 10.0 . Variables . 4 Different Ways to Store Variables . Numerical value stored in a variable | ex. score = 0 . Value of another variable stored in a variable | ex. score = newScore . Performing mathematical expressions on a variable/Result of an operation stored in a variable | ex. score = newScore + 1 . Result of a procedure call stored in a variable | ex. avgScore = allScores(20, 60, 80) . Sequencing . every time a new value is assigned to a variable, it overrides the last value which was assigned to the same variable | changing order of steps changes overall outcome | . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 #vs. num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables - AP Exam Question . make sure to account for every time a variable changes when writing code | . var1 = 9 var2 = 7 var3 = 2 var = var1 + 5 var2 = var1 - var3 var1 = var2 var3 = (var1 + var2) / 2 var2 = 6 print(var1) # question would ask something like, what&#39;s the value of var1, var2, and var3 print(var2) print(var3) . 7 6 7.0 . Strings . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc | Certain procedures may be used with strings and they vary from programming language to language Python examples | . String Commands for AP Exam Pseudocode . len() to find the length of a string | lower() to convert to lowercase | concat() returns a string made up of the concatenated | substring() returns the characters from the string beginning at the at the first position to the last | . Substring Example . substring(&quot;abcdefghijkl&quot;, 2, 5) would print bcde . String Concatenation . combining 2 or more strings to make a new strings in order to create a new string | . Example of String Concatenation . concat(&quot;cookie&quot;, &quot;monster&quot;) returns cookiemonster . Substrings . a part of an already existing string | . Example of Substrings . concat(&quot;My dogs are cute&quot; 1,2) would return My .",
            "url": "https://rey444.github.io/shreya/t2notes/2022/11/29/3.3-3.4-notes.html",
            "relUrl": "/t2notes/2022/11/29/3.3-3.4-notes.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "3.3 - 3.4 Hacks",
            "content": "Hacks . Algorithms &amp; Flowcharts Hack Link . Variables Hacks . Num1 = 50 # define Num1 as 50 Num2 = Num1 % 9 + 15 # 5 + 15 = 20, num2 = 20 Num3 = Num2 / Num1 + ( Num2 * 2 ) # 20/50 + (20*2) = 20/50 + 40 = 40.4 = num3 Num4 = Num3 + Num1 / 5 - 10 # 40.4 + 50/5 - 10 = 40.4 = num4 Result = Num4 - Num2 # 40.4 - 20 = 20.4 = Result --&gt; the result should be 20.4 print(Result) # checking work . 20.4 . Num1 = 10 # set Num1 as 10 Num2 = Num1 % 3 * 4 # 10/3 is 3R3 --? 3*4 = 12 --&gt; Num2 = 12 Num1 = Num2 # Num1 = 12 Num3 = Num1 * 3 # 12*3 = 36 --&gt; Num3 = 36 Result = Num3 % 2 # 36/2 = 18R0 --&gt; Result = 0 print(Result) # checking work . 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA # 17-4 = 13 --&gt; valueB = 13 valueA = valueA * 10 # 4*10 = 40 --&gt; valueA = 40 if valueB &gt; 10: # this condition is met, since valueB = 13 and 13&gt;10 print(valueC) # it should print 17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; # changes type from curly to straight hair = type + color + length print(hair) # should print straight brown short . straightbrownshort . Strings Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Noun = &quot;MinYoongi&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[3:9] # pseudocode: subtring(Noun, 1, 7) yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; # pseudocode: concat(Adjective2, &quot; &quot;, Adjective, &quot; &quot;, abrev, &quot; &quot;,Verb, &quot;.&quot;) print(yoda) # pseudocode: display[yoda] # should print &quot;Very handsome Yoongi is.&quot; . Very handsome Yoongi is. . # cookie = &quot;choclate&quot; # cookie2 = &quot;rasin&quot; # len1 = len(cookie) / 2 # len2 = len(cookie2) * 45 # vote1 = (cookie, &quot;vote&quot;, len2) # vote2 = (cookie2, &quot;vote&quot;, len1) # votes = concat(vote1, &quot; &quot;, vote2) # display[votes] cookie = &quot;chocolate&quot; cookie2 = &quot;raisin&quot; len1 = (len(cookie) / 2) len2 = (len(cookie2) * 45) vote1 = (cookie + &quot; &quot; + &quot;vote&quot; + &quot; &quot; + str(len2)) vote2 = (cookie2 + &quot; &quot; + &quot;vote&quot; + &quot; &quot; + str(len1)) votes = vote1 + &quot;, &quot; + vote2 print(votes) . chocolate vote 270, raisin vote 4.5 .",
            "url": "https://rey444.github.io/shreya/t2hacks/2022/11/29/3.3-3.4-hacks.html",
            "relUrl": "/t2hacks/2022/11/29/3.3-3.4-hacks.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Binary Math",
            "content": ". Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | . There are two types of functions for this page: adding/subtracting, and toggling from bit to bit | The functions are all abstractions | .",
            "url": "https://rey444.github.io/shreya/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "SSJN Trimester 1 Project Purpose",
            "content": "SSJN Group Project . How it will Work . Users enter their current emotion into a text entry box | User is then prompted to fill out an optional survey to further personalize song list. | The program outputs a list of songs that match their current emotion, with spotify links embedded, so the users can explore new music! | Spotify x SSJN! . . xxx . . Roles . Scrum Master: Shreya Sapkal | Frontend Developer: Noor Grewal | Backend Developers: Sanika Shahapurkar &amp; Jiya Savlani | . Implementation: 6 Principles of College Board . Program Purpose and Function | To help users discover new types of music, artists, and songs. To help users diversify their music listening experience. To match users with a list of songs to listen to depending on their current emotion. Input: Emotion/Mood (out of options provided) Output: Song that matches mood (selected out of info provided from API, additional information like lyrics or link to listen may be provided) . Data Abstraction | Output will be displayed using a list, to provide multiple song options to diversify users listening experience. Planned name of varibale representing list: Melancholy = [“I Bet On Losing Dogs”, “See You Again”, “Burning Hill”] Data in this list represents music type . Managing Complexity | By using lists to display song output, it is not necessary to write continuous lines of if/else statements, though they may still be useful for further personalization. In case that list is not used to provide songs, multiple functions may have to be written and printed seperately ex: if Emotion=Melancholy print(“I Bet On Losing Dogs”” print(“See You Again”) print(“Burning Hill”) . Procedural Abstraction | Use procedural abstraction to account for user error input, to ensure selected Emotion is existent in program ex: def emotion_input if Emotion = melancholy print(“Melancholy”) elif Emotion = joy print(“Joy”) else print(“Please input emotion”) . Algorithm Implementation sequencing Use of strings and lists to output song information, as well as error information (shown above) | selection Use of if/else/elif statements (as shown above) | iteration Use of for loops (*still planning how this may be implemented productively into program given function) ex: emotion = [“melancholy”, “joy”, “rage”] for x in emotion: if x == “joy”: break print(x) | . | Testing | Test each cell, which will be organized by purpose. Each line will have notes to ensure we manage complexity, as well as best enabling ourselves to explain in video. .",
            "url": "https://rey444.github.io/shreya/tri1/2022/11/10/team-project-purpose.html",
            "relUrl": "/tri1/2022/11/10/team-project-purpose.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Tri 1 Final Mcq Practice Blog",
            "content": "Shreya Sapkal . Period 3 . Tri 1 Final MCQ Practice Blog . Q8: Documentation for procedure with lists . | . Reflection: This problem was confusing to me. I understood that a newList is created out of the numList, and that the elements at indices j and k are interchanged. I didn’t understand the second half of the problem, so I reviewed the collegeboard explanation. The explanation helped me understand that the procedure can only work if j and k are valid indices, and in order for the indices to be valid, the values of j and k must be between 1 and the length of the original numList [LENGTH(numList)]. . Q17: Purpose of Internet protocols . | . Reflection: I researched what an open protocol was in order to answer this question. After I did some research, I was able to learn that open protocols on the internet allow devices manufactured by different companies in a standardized way. This allows data transmission to be standardized between different devices, and thus D is the correct answer. . Q19: Adding numbers in 4-bit representation . | . Reflection: For this question, I consulted my peers for help, because I didn’t know much about binary sequences or “bits.” I learned that “bits” are the 1s and 0s that come together to form a decimal number in binary. I also learned that the largest number 4 bits can represent is 15, and this knowledge helped me understand this question. While 14 and 15 can be represented by 4 bits, their sum, 29, cannot be represented because the largest number that can be represented by 4 bits is 15. . Q20: Bits needed to represent directions . | . Reflection: The collegeboard answer explanation helped me understand this problem better after I answered it. I learned that 4 bits can store 16 pieces of information (24 = 16). Because the developer is trying to store only 8 directions for the character, 4 bits should be enough to store the directions because 8 &lt; 16. . Q20: Data that can be represented with binary sequences . | . Reflection: I am blogging this question because prior to it, I didn’t know a lot about binary sequences. Now I know that digital data is represented at the lowest level by sequences of bits, which is essentially binary sequences. I also learned that binary sequences can be used to represent many different kinds of data, such as text (strings of characters), colors, numbers, images, and sounds (audio recordings). . Q22: Decimal value not equal to given binary values . | . Reflection: I had to look this problem up, because I don’t know much about binary numbers. . Q23: Digital representation of position of runner . | . Reflection: From this I learned that analog data is sampled at multiple points and has a continuous electric signal, while digital signals have non-continuous electrical signals. At first I didn’t know how to answer this question, but reading the collegeboard explanation after completing the test gave me some insight. Analog data values change smoothly and are sampled at regular intervals, and therefore the position of the runner must be sampled at regular intervals to approximate the real-world position. The analog data can be approximated digitally by mearuding the analog signal at intervals called samples. Sequences of bits are used to represent the samples digitally. . Q24 Put binary and decimal numbers in order . | . Reflection: I had to look up what decimal number binary 1011 stands for, and discovered that it was equivalent to 11. I also looked up what decimal number binary 1101 stands for, and discovered that it was equivalent to 13. Then, I simply ordered the numbers from least to greatest: 5, 11, 12, 13, or 5, 1011, 12, 1101. . Q26 Appropriate data type for isOpen . | . Reflection: For this question, I had to keep in mind the fact that a Boolean variable is one that is represented by the values true and false. Because whether or not a store is currently open can be represented by a true/false statement, the most appropriate data type for isOpen would be a boolean. . Q29 Benefit of using a list as a data abstraction . | . Reflection: From this question, I learned that lists are best used in data abstraction in a program, because they can hold many data values and can be easily changed as needed. From Question #30, it is also easy to apply the same algorithm to every element in a list than it is to apply an algorithm to many variables separately . Q32 Contents of myList and yourList . | . Reflection: For this question, I answered B while the correct answer was A. This is because myList was converted to have the contents of yourList – myList had the values of [10, 30, 50, 70], but now that it’s been converted to have the contents of yourList, it will no longer have [10, 30, 50, 70]. Therefore, A is the correct answer. . Q36 Store even numbers in evenList . | . Reflection: Option C is correct, because it would store the first element of the list as 2, while the option D would store the first element of the list as 4. . Q38 Update values of three words . | . Reflection: Option B is correct, because the first statement assigns the value of word1 to the temporary variable temp. The second statement assigns the value of word3 to word1. The third statement assigns the original value of word1, which is stored in temp, to word3. The original values of word1 and word3 are interchanged, which reverses the values of the variables as intended, making the table values after updating zebra –&gt; yarn –&gt; xylophone. . Q39 Valid index for wordList . | . Reflection: I learned that indices are usually non-negative integers. “Hello” is a string value, which could be an element in the list. A list is a structure whose index values are 1 through the number of elements in the list. The list’s index, however, should be a non-negative integer, and be between 1 and 10, because there are 10 elements in the list. 4 is a non-negative integer and 1&lt;4&lt;10, and thus option D is correct. . Q43 Value of x after REPEAT UNTIL block . | . Reflection: I chose option B, which would be the value of result if the loop iterated one less time. The variables x and result are both initialized to 0. Within the loop, result is increased by x and x is increased by 1. The loop stops when x&gt;5. So, the result must be the sum of the integers from 0 to 5, which is 15. . Q47 Values of variables after arithmetic operations . | . Reflection: For this question, I did the order of operations wrong. For the 8th code block, the operation is c + (d/2). However, I thought that it was (c+d)/2. C is 30, and d is 40. 30 + (40/2) = 50, therefore, the correct answer is option D. .",
            "url": "https://rey444.github.io/shreya/2022/11/09/Tri-1-Final-MCQ-Practice-Blog.html",
            "relUrl": "/2022/11/09/Tri-1-Final-MCQ-Practice-Blog.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "SSJN Trimester 1 Team Project Code Screenshots",
            "content": "Link to Final Project Final Blog . Github Fastpages . “input emotion” page . . song api md file . . Flask Page: . song api python file . . model songs python file . .",
            "url": "https://rey444.github.io/shreya/tri1/2022/11/04/projectscreenshots.html",
            "relUrl": "/tri1/2022/11/04/projectscreenshots.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Trimester 1 Night at the Museum Blog",
            "content": "SSJN Scrum Team at Night At the Museum . Our Scrum Team gathered at night at the museum to present our Trimester 1 Project, which used a music API to output songs that would match an emotion that a user entered. . . SSJN Presenting Our Project . We explained our project and how it worked to those who passed by, allowing them to give it a try! . . . . SSJN Exploring Other Projects . Lastly, we went around and explored other groups’ coding projects. We also looked at some of the fine arts projects. . . .",
            "url": "https://rey444.github.io/shreya/tri1/2022/11/03/NATM-blog.html",
            "relUrl": "/tri1/2022/11/03/NATM-blog.html",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random # the jokes data is on the back end (in the AWS server) car_jokes_data = [] car_joke_list = [ &quot;1. What do you call a Ford Fiesta that ran out of gas? A Ford Siesta.&quot;, &quot;2. When is a car not a car? When it turns into a driveway.&quot;, &quot;3. What kind of car does yoda drive? A toyoda.&quot;, &quot;4. Who can drive all their customers away and still make money? Taxi drivers.&quot;, &quot;5. What kind of car does a snake drive? An Ana-Honda.&quot;, &quot;6. What has four wheels and flies? A garbage truck.&quot;, &quot;7. What do you get when dinosaurs crash their cars? Tyrannosaurus wrecks.&quot;, &quot;8. What snakes are found on cars? Windshield vipers.&quot;, &quot;9. I couldn’t work out how to fasten my seatbelt. Then it clicked.&quot;, &quot;10. I ran my Subaru into a lake. Now it’s a Scubaru.&quot; &quot;11. Why can’t motorcycles hold themselves up? Because they are two-tired.&quot;, &quot;12. What do you say to a frog who needs a ride? Hop in.&quot;, &quot;13. What did the tornado say to the sports car? Want to go for a spin.&quot;, &quot;14. What do you call a used car salesman? A car-deal-ologist.&quot;, &quot;15. Why are pigs bad drivers? They hog the road.&quot;, &quot;16. Where do dogs park their cars? In the barking lot.&quot;, &quot;17. What&#39;s a car&#39;s favorite meal? Brake-fast.&quot;, &quot;18. Why do chicken coops have only two doors? If they had four, they would be chicken sedans.&quot;, ] # Initialize jokes # setting up a dictionary to store all the jokes data and how many likes/dislikes each joke gets def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo in a FOR LOOP item_id = 0 for item in joke_list: car_jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # jokes are being built into a list # Return all jokes from jokes_data def getJokes(): return(car_jokes_data) # Joke getter def getJoke(id): return(car_jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(car_jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return car_jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return car_jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): car_jokes_data[id][&#39;haha&#39;] = car_jokes_data[id][&#39;haha&#39;] + 1 return car_jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): car_jokes_data[id][&#39;boohoo&#39;] = car_jokes_data[id][&#39;boohoo&#39;] + 1 return car_jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(car_jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # have to get jokes out of the back end # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) # we have to store data -- use &quot;str&quot; to add to the counter . Most liked 18 13 15. Why are pigs bad drivers? They hog the road. haha: 18 boohoo: 4 Most jeered 6 11 13. What did the tornado say to the sports car? Want to go for a spin. haha: 12 boohoo: 6 Random joke 4 5. What kind of car does a snake drive? An Ana-Honda haha: 11 boohoo: 4 Jokes Count: 17 . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . How to Make an API . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 --&gt; this URL calls the API from the backend api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes # BASICALLY THE STEPS TO MAKE AN API api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) . &lt;Response [200]&gt; {&#39;boohoo&#39;: 5489, &#39;haha&#39;: 30400, &#39;id&#39;: 1, &#39;joke&#39;: &#39;Q: Why did I divide sin by tan? A: Just cos.&#39;} &lt;Response [200]&gt; {&#39;boohoo&#39;: 5489, &#39;haha&#39;: 30401, &#39;id&#39;: 1, &#39;joke&#39;: &#39;Q: Why did I divide sin by tan? A: Just cos.&#39;} &lt;Response [200]&gt; {&#39;boohoo&#39;: 5490, &#39;haha&#39;: 30401, &#39;id&#39;: 1, &#39;joke&#39;: &#39;Q: Why did I divide sin by tan? A: Just cos.&#39;} &lt;Response [200]&gt; {&#39;boohoo&#39;: 1319, &#39;haha&#39;: 1780, &#39;id&#39;: 11, &#39;joke&#39;: &#34;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&#34;} .",
            "url": "https://rey444.github.io/shreya/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Tri 1 Week 7 - MCQ Practice",
            "content": ".",
            "url": "https://rey444.github.io/shreya/collegeboard/2022/10/10/collegeboard-mc-2.html",
            "relUrl": "/collegeboard/2022/10/10/collegeboard-mc-2.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Tri 1 Week 7 - Python RapidAPI Lecture Notes",
            "content": "Python, RapidAPI Terms &amp; Shreya&#39;s Notes . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Shreya&#39;s Notes | An API is a database that you can integrate into your own program | You take an external source and use it in your own program, ex. spotify or youtube | Pulling data from External Sources | . Covid19 RapidAPI Example: Step 1 - Find an API Provider . First, find an API provider. . RapidAPI is an API provider -- they build APIs to specific standards so they all work alike and are all similar in coding, but all pull data | Go to this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | . Next step, is to format the response according to your data science needs . const axios = require(&quot;axios&quot;); const options = { method: &#39;GET&#39;, url: &#39;https://corona-virus-world-and-india-data.p.rapidapi.com/api&#39;, # the URL is the endpoint to which the API is directed; the link that takes us to the API page headers: { # the squigly brackets in the code are for a dictionary &#39;X-RapidAPI-Key&#39;: &#39;2b7a1e07f1msheec8b665a35f05fp1a1019jsn337f301b5a47&#39;, # keys and values are in between the squigly brackets &#39;X-RapidAPI-Host&#39;: &#39;corona-virus-world-and-india-data.p.rapidapi.com&#39; } }; axios.request(options).then(function (response) { # The response variable receives result of of the request in JSON text console.log(response.data); }).catch(function (error) { console.error(error); }); . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # print(response.json()) # EXTRACTING DATA FROM THE API # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # &quot;.json()&quot; code turns response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # for loop finds key and value pairs in the world --&gt; prints the world keys and values (data) print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) # countries_stat is a key for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # telling the API to filter for the USA data for key, value in country.items(): # this finds key, value pairs in country print(key, value) # prints the USA keys and values (data) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;2b7a1e07f1msheec8b665a35f05fp1a1019jsn337f301b5a47&quot;, # place your key here; it is given to you on the API page after you subscribe to the API - need to subscribe to each API you use &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;status&#34;:&#34;success&#34;,&#34;data&#34;:{&#34;stats&#34;:{&#34;total&#34;:1505,&#34;totalCoins&#34;:15880,&#34;totalMarkets&#34;:29467,&#34;totalExchanges&#34;:172,&#34;totalMarketCap&#34;:&#34;983095538550&#34;,&#34;total24hVolume&#34;:&#34;63465038613&#34;},&#34;coins&#34;:[{&#34;uuid&#34;:&#34;Qwsogvtv82FCd&#34;,&#34;symbol&#34;:&#34;BTC&#34;,&#34;name&#34;:&#34;Bitcoin&#34;,&#34;color&#34;:&#34;#f7931A&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg&#34;,&#34;marketCap&#34;:&#34;383988725165&#34;,&#34;price&#34;:&#34;20029.392179057646&#34;,&#34;listedAt&#34;:1330214400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.13&#34;,&#34;rank&#34;:1,&#34;sparkline&#34;:[&#34;20203.968383631716&#34;,&#34;20108.24855900587&#34;,&#34;20051.33382579625&#34;,&#34;20121.550797314565&#34;,&#34;20161.730510106&#34;,&#34;20262.359724033377&#34;,&#34;20311.419970515693&#34;,&#34;20346.360476516726&#34;,&#34;20343.949852023725&#34;,&#34;20382.213016951777&#34;,&#34;20323.39566595646&#34;,&#34;20241.738354658195&#34;,&#34;20217.508404168766&#34;,&#34;20183.62088115384&#34;,&#34;20159.744112050765&#34;,&#34;20135.103620334423&#34;,&#34;20152.838726388378&#34;,&#34;20223.999055486038&#34;,&#34;20188.386841136497&#34;,&#34;20099.650776087008&#34;,&#34;20022.525302913724&#34;,&#34;20060.360700925474&#34;,&#34;20058.49372151537&#34;,&#34;20101.79019444109&#34;,&#34;20068.60680042962&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc&#34;,&#34;24hVolume&#34;:&#34;35960396792&#34;,&#34;btcPrice&#34;:&#34;1&#34;},{&#34;uuid&#34;:&#34;razxDUgYGNAdQ&#34;,&#34;symbol&#34;:&#34;ETH&#34;,&#34;name&#34;:&#34;Ethereum&#34;,&#34;color&#34;:&#34;#3C3C3D&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rk4RKHOuW/eth.svg&#34;,&#34;marketCap&#34;:&#34;166061825600&#34;,&#34;price&#34;:&#34;1357.6485041155122&#34;,&#34;listedAt&#34;:1438905600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.10&#34;,&#34;rank&#34;:2,&#34;sparkline&#34;:[&#34;1355.1957971694667&#34;,&#34;1350.1443671510813&#34;,&#34;1349.0087694835117&#34;,&#34;1351.905027397555&#34;,&#34;1352.9470157886974&#34;,&#34;1366.327377860059&#34;,&#34;1375.6511405346198&#34;,&#34;1374.429028858314&#34;,&#34;1372.974155009473&#34;,&#34;1376.1292232921205&#34;,&#34;1373.8546363081466&#34;,&#34;1367.455774258437&#34;,&#34;1366.5564765946526&#34;,&#34;1362.598875204337&#34;,&#34;1360.3636987191837&#34;,&#34;1358.3640048395087&#34;,&#34;1360.4342504890021&#34;,&#34;1369.213281754299&#34;,&#34;1368.3676032576047&#34;,&#34;1364.1360571475047&#34;,&#34;1363.3432991494524&#34;,&#34;1364.0707758574745&#34;,&#34;1363.3606085887561&#34;,&#34;1364.148825121332&#34;,&#34;1361.3954792114398&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth&#34;,&#34;24hVolume&#34;:&#34;18303988746&#34;,&#34;btcPrice&#34;:&#34;0.06778281097990801&#34;},{&#34;uuid&#34;:&#34;HIVsRcGKkPFtW&#34;,&#34;symbol&#34;:&#34;USDT&#34;,&#34;name&#34;:&#34;Tether USD&#34;,&#34;color&#34;:&#34;#22a079&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mgHqwlCLj/usdt.svg&#34;,&#34;marketCap&#34;:&#34;68285632047&#34;,&#34;price&#34;:&#34;1.001071028357668&#34;,&#34;listedAt&#34;:1420761600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.25&#34;,&#34;rank&#34;:3,&#34;sparkline&#34;:[&#34;1.00067474581623&#34;,&#34;1.0011258844386617&#34;,&#34;1.000453236983016&#34;,&#34;0.9996754852345027&#34;,&#34;1.0002283577144846&#34;,&#34;0.999155133910854&#34;,&#34;0.9996202452937143&#34;,&#34;1.0005460966801791&#34;,&#34;1.000125348965174&#34;,&#34;1.0000654683931005&#34;,&#34;1.0007064730998132&#34;,&#34;1.0010472845514906&#34;,&#34;1.0001871870812535&#34;,&#34;1.00097822584521&#34;,&#34;1.0002453605323327&#34;,&#34;1.0005499753502725&#34;,&#34;0.9999702733020642&#34;,&#34;0.9994598707479958&#34;,&#34;1.0012863570809547&#34;,&#34;1.0016448157620703&#34;,&#34;0.9996482331493484&#34;,&#34;1.0004215336032052&#34;,&#34;0.9999570213425627&#34;,&#34;0.9999224272643209&#34;,&#34;1.0007392056569566&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt&#34;,&#34;24hVolume&#34;:&#34;41635126802&#34;,&#34;btcPrice&#34;:&#34;0.000049980100215141&#34;},{&#34;uuid&#34;:&#34;aKzUVe4Hh_CON&#34;,&#34;symbol&#34;:&#34;USDC&#34;,&#34;name&#34;:&#34;USDC&#34;,&#34;color&#34;:&#34;#7894b4&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/jkDf8sQbY/usdc.svg&#34;,&#34;marketCap&#34;:&#34;46238950460&#34;,&#34;price&#34;:&#34;1.0009827471883062&#34;,&#34;listedAt&#34;:1539043200,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.29&#34;,&#34;rank&#34;:4,&#34;sparkline&#34;:[&#34;1.0004741029962485&#34;,&#34;1.000975745834551&#34;,&#34;1.000338200325115&#34;,&#34;0.9997127153360669&#34;,&#34;1.0002285816016003&#34;,&#34;0.9991683546380526&#34;,&#34;0.9996032812493789&#34;,&#34;1.000320594593321&#34;,&#34;1.000161525452162&#34;,&#34;1.0000743807108587&#34;,&#34;1.0007107512244124&#34;,&#34;1.0009449284705079&#34;,&#34;1.0001378697824121&#34;,&#34;1.0008248585454766&#34;,&#34;1.0001965553835719&#34;,&#34;1.0005780931027144&#34;,&#34;1.0000088554796078&#34;,&#34;0.9994586243665149&#34;,&#34;1.0011869248897938&#34;,&#34;1.0015496148117664&#34;,&#34;0.9997673802296243&#34;,&#34;1.0003598578573154&#34;,&#34;1.0000778482427792&#34;,&#34;0.9998861638814902&#34;,&#34;1.0006873238669673&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc&#34;,&#34;24hVolume&#34;:&#34;3319032373&#34;,&#34;btcPrice&#34;:&#34;0.000049975692634094&#34;},{&#34;uuid&#34;:&#34;WcwrkfNI4FUAe&#34;,&#34;symbol&#34;:&#34;BNB&#34;,&#34;name&#34;:&#34;Binance Coin&#34;,&#34;color&#34;:&#34;#e8b342&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1N19L_dZ/bnb.svg&#34;,&#34;marketCap&#34;:&#34;42446473786&#34;,&#34;price&#34;:&#34;292.9853132704932&#34;,&#34;listedAt&#34;:1503014400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.34&#34;,&#34;rank&#34;:5,&#34;sparkline&#34;:[&#34;293.97668506149665&#34;,&#34;293.1407075092398&#34;,&#34;292.99619261004176&#34;,&#34;293.314426319534&#34;,&#34;293.9805356534211&#34;,&#34;295.24355977219363&#34;,&#34;297.1727352838543&#34;,&#34;296.59209380777276&#34;,&#34;296.46326004057556&#34;,&#34;296.25895357215705&#34;,&#34;295.9508439506615&#34;,&#34;295.1130042842961&#34;,&#34;294.91264099674373&#34;,&#34;295.0512570831633&#34;,&#34;294.5306048069131&#34;,&#34;294.30050189031186&#34;,&#34;294.22403335151813&#34;,&#34;294.80827509690437&#34;,&#34;294.33033971155965&#34;,&#34;293.96591310440675&#34;,&#34;293.66576108995565&#34;,&#34;293.99310192770326&#34;,&#34;293.69072498915045&#34;,&#34;293.4540279331547&#34;,&#34;293.23188737664185&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb&#34;,&#34;24hVolume&#34;:&#34;790073614&#34;,&#34;btcPrice&#34;:&#34;0.014627768563882485&#34;},{&#34;uuid&#34;:&#34;-l8Mn2pVlRs-p&#34;,&#34;symbol&#34;:&#34;XRP&#34;,&#34;name&#34;:&#34;XRP&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1oPuTyfX/xrp.svg&#34;,&#34;marketCap&#34;:&#34;24661745131&#34;,&#34;price&#34;:&#34;0.4946339678281492&#34;,&#34;listedAt&#34;:1421798400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.04&#34;,&#34;rank&#34;:6,&#34;sparkline&#34;:[&#34;0.4966034010193278&#34;,&#34;0.49554396329788797&#34;,&#34;0.4934182558388822&#34;,&#34;0.49362506737216266&#34;,&#34;0.49026802902183264&#34;,&#34;0.49265967443901376&#34;,&#34;0.49600890470479697&#34;,&#34;0.49519386112189673&#34;,&#34;0.49612095309902693&#34;,&#34;0.5009634729133409&#34;,&#34;0.5023452122436942&#34;,&#34;0.49856038118705276&#34;,&#34;0.4949608682752508&#34;,&#34;0.4937997408415523&#34;,&#34;0.4938461715574201&#34;,&#34;0.4949672333116952&#34;,&#34;0.49671660295169745&#34;,&#34;0.4983157134968618&#34;,&#34;0.4984385599250301&#34;,&#34;0.4958643382230643&#34;,&#34;0.4954888154508337&#34;,&#34;0.4956388106133542&#34;,&#34;0.49687913330335365&#34;,&#34;0.49710524663432437&#34;,&#34;0.4967817423491458&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp&#34;,&#34;24hVolume&#34;:&#34;2060777935&#34;,&#34;btcPrice&#34;:&#34;0.000024695405801946&#34;},{&#34;uuid&#34;:&#34;vSo2fu9iE1s0Y&#34;,&#34;symbol&#34;:&#34;BUSD&#34;,&#34;name&#34;:&#34;Binance USD&#34;,&#34;color&#34;:&#34;#f0b90b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/6SJHRfClq/busd.svg&#34;,&#34;marketCap&#34;:&#34;21401684209&#34;,&#34;price&#34;:&#34;1.0009374128999708&#34;,&#34;listedAt&#34;:1563197940,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:7,&#34;sparkline&#34;:[&#34;1.0005806927683012&#34;,&#34;1.0010131698018379&#34;,&#34;1.0003766512497372&#34;,&#34;0.9996697334127012&#34;,&#34;1.0002044875058664&#34;,&#34;0.9990351601588866&#34;,&#34;0.9995181128660227&#34;,&#34;1.0004126037965064&#34;,&#34;1.0000179287511293&#34;,&#34;0.9999724471614664&#34;,&#34;1.000692632004645&#34;,&#34;1.0009515028021934&#34;,&#34;1.0000846954124145&#34;,&#34;1.0008893072028962&#34;,&#34;1.0001675248577555&#34;,&#34;1.0004436296308015&#34;,&#34;0.9998831620327592&#34;,&#34;0.9993790802417244&#34;,&#34;1.0011655146499898&#34;,&#34;1.0015608327721508&#34;,&#34;0.9996737479147666&#34;,&#34;1.0003874163381075&#34;,&#34;0.999855178764249&#34;,&#34;0.9997695857566036&#34;,&#34;1.0006363550917916&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd&#34;,&#34;24hVolume&#34;:&#34;6555400087&#34;,&#34;btcPrice&#34;:&#34;0.000049973429245972&#34;},{&#34;uuid&#34;:&#34;qzawljRxB5bYu&#34;,&#34;symbol&#34;:&#34;ADA&#34;,&#34;name&#34;:&#34;Cardano&#34;,&#34;color&#34;:&#34;#3cc8c8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ryY28nXhW/ada.svg&#34;,&#34;marketCap&#34;:&#34;13338760651&#34;,&#34;price&#34;:&#34;0.42872694867780425&#34;,&#34;listedAt&#34;:1506902400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.75&#34;,&#34;rank&#34;:8,&#34;sparkline&#34;:[&#34;0.4319128462866555&#34;,&#34;0.4301070093895049&#34;,&#34;0.4293607332904254&#34;,&#34;0.43052964249063624&#34;,&#34;0.43107589290128834&#34;,&#34;0.4320879931539995&#34;,&#34;0.43588829259760536&#34;,&#34;0.4355968719919596&#34;,&#34;0.4346959050890022&#34;,&#34;0.43498013589184065&#34;,&#34;0.4346669754920001&#34;,&#34;0.43312028905563876&#34;,&#34;0.43265616882118346&#34;,&#34;0.43191341474300415&#34;,&#34;0.4312921949359245&#34;,&#34;0.4311011590020075&#34;,&#34;0.4302280684331196&#34;,&#34;0.4319813231178509&#34;,&#34;0.43173383257478504&#34;,&#34;0.4303997167352433&#34;,&#34;0.429398559339474&#34;,&#34;0.4299648257425132&#34;,&#34;0.4297343398397519&#34;,&#34;0.42997828353732326&#34;,&#34;0.42937033740290426&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada&#34;,&#34;24hVolume&#34;:&#34;472000466&#34;,&#34;btcPrice&#34;:&#34;0.000021404890615007&#34;},{&#34;uuid&#34;:&#34;zNZHO_Sjf&#34;,&#34;symbol&#34;:&#34;SOL&#34;,&#34;name&#34;:&#34;Solana&#34;,&#34;color&#34;:&#34;#9cddec&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/yvUG4Qex5/solana.svg&#34;,&#34;marketCap&#34;:&#34;11962392239&#34;,&#34;price&#34;:&#34;33.675844527260054&#34;,&#34;listedAt&#34;:1586539320,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.37&#34;,&#34;rank&#34;:9,&#34;sparkline&#34;:[&#34;34.12016506022125&#34;,&#34;33.82346480906877&#34;,&#34;33.75172476906559&#34;,&#34;33.897106570663055&#34;,&#34;34.0318397133767&#34;,&#34;34.2713990985727&#34;,&#34;34.3353873127038&#34;,&#34;34.34342068038388&#34;,&#34;34.328153770745175&#34;,&#34;34.39807404919778&#34;,&#34;34.36632892039718&#34;,&#34;34.18697728036539&#34;,&#34;34.00984922956877&#34;,&#34;34.032297629030815&#34;,&#34;34.0205375439139&#34;,&#34;33.986450347226565&#34;,&#34;33.97284356925897&#34;,&#34;34.12322348136839&#34;,&#34;34.04818308388973&#34;,&#34;33.90841528770745&#34;,&#34;33.922236226998955&#34;,&#34;33.895084271212774&#34;,&#34;33.877508596833344&#34;,&#34;33.769632367031555&#34;,&#34;33.71898828195219&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/zNZHO_Sjf+solana-sol&#34;,&#34;24hVolume&#34;:&#34;746955842&#34;,&#34;btcPrice&#34;:&#34;0.001681321341466911&#34;},{&#34;uuid&#34;:&#34;a91GCGd_u96cF&#34;,&#34;symbol&#34;:&#34;DOGE&#34;,&#34;name&#34;:&#34;Dogecoin&#34;,&#34;color&#34;:&#34;#c2a633&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/H1arXIuOZ/doge.svg&#34;,&#34;marketCap&#34;:&#34;8459276205&#34;,&#34;price&#34;:&#34;0.06376141910465474&#34;,&#34;listedAt&#34;:1391212800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.95&#34;,&#34;rank&#34;:10,&#34;sparkline&#34;:[&#34;0.06517900643903335&#34;,&#34;0.06479961509289048&#34;,&#34;0.06428429249412718&#34;,&#34;0.0643822298596851&#34;,&#34;0.06460689935721148&#34;,&#34;0.0650408192160027&#34;,&#34;0.06504698376655794&#34;,&#34;0.06503491080507982&#34;,&#34;0.06597766345501518&#34;,&#34;0.06597104799065628&#34;,&#34;0.06580401206150757&#34;,&#34;0.0655038835692329&#34;,&#34;0.06533905872763061&#34;,&#34;0.06510197364336227&#34;,&#34;0.06525813392333525&#34;,&#34;0.06507123735868817&#34;,&#34;0.06508747877233641&#34;,&#34;0.06537694106515178&#34;,&#34;0.06521416310707462&#34;,&#34;0.06486795280882116&#34;,&#34;0.06440018609785521&#34;,&#34;0.06431000551190193&#34;,&#34;0.06399099516985579&#34;,&#34;0.0639611688502269&#34;,&#34;0.06388198077385676&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge&#34;,&#34;24hVolume&#34;:&#34;440063304&#34;,&#34;btcPrice&#34;:&#34;0.000003183392612948&#34;},{&#34;uuid&#34;:&#34;uW2tk-ILY0ii&#34;,&#34;symbol&#34;:&#34;MATIC&#34;,&#34;name&#34;:&#34;Polygon&#34;,&#34;color&#34;:&#34;#8247e5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WulYRq14o/polygon.png&#34;,&#34;marketCap&#34;:&#34;7358962383&#34;,&#34;price&#34;:&#34;0.8404795037695242&#34;,&#34;listedAt&#34;:1558961160,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.08&#34;,&#34;rank&#34;:11,&#34;sparkline&#34;:[&#34;0.8488683947817877&#34;,&#34;0.844261325684805&#34;,&#34;0.8441517776694942&#34;,&#34;0.8516535236312476&#34;,&#34;0.8528667517203153&#34;,&#34;0.8538310293736446&#34;,&#34;0.8514044235965006&#34;,&#34;0.8494691100998122&#34;,&#34;0.8468719287432697&#34;,&#34;0.8483129178304412&#34;,&#34;0.846409617173921&#34;,&#34;0.8440408671561839&#34;,&#34;0.845969924983047&#34;,&#34;0.8474973485957346&#34;,&#34;0.8463925672110996&#34;,&#34;0.8432430183950218&#34;,&#34;0.8407816804410218&#34;,&#34;0.8419007497492077&#34;,&#34;0.8398864867524278&#34;,&#34;0.8393073071328305&#34;,&#34;0.8429567390022452&#34;,&#34;0.8430941255831178&#34;,&#34;0.8444119779861358&#34;,&#34;0.8446502533596543&#34;,&#34;0.8422100742264239&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic&#34;,&#34;24hVolume&#34;:&#34;415611443&#34;,&#34;btcPrice&#34;:&#34;0.000041962307006416&#34;},{&#34;uuid&#34;:&#34;25W7FG7om&#34;,&#34;symbol&#34;:&#34;DOT&#34;,&#34;name&#34;:&#34;Polkadot&#34;,&#34;color&#34;:&#34;#d64cA8&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/RsljYqnbu/polkadot.svg&#34;,&#34;marketCap&#34;:&#34;7344522551&#34;,&#34;price&#34;:&#34;6.384280071801486&#34;,&#34;listedAt&#34;:1598365200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.08&#34;,&#34;rank&#34;:12,&#34;sparkline&#34;:[&#34;6.3965864125254&#34;,&#34;6.404004723676076&#34;,&#34;6.396580513456493&#34;,&#34;6.4118313471558155&#34;,&#34;6.432157826539117&#34;,&#34;6.4585867738477205&#34;,&#34;6.491203189353306&#34;,&#34;6.503365628711354&#34;,&#34;6.493776043856009&#34;,&#34;6.4969261435753065&#34;,&#34;6.477679946923399&#34;,&#34;6.472448866542233&#34;,&#34;6.446417687489772&#34;,&#34;6.4451248697841494&#34;,&#34;6.445036089260377&#34;,&#34;6.436040246095806&#34;,&#34;6.435080457086081&#34;,&#34;6.463836456516857&#34;,&#34;6.450387542070514&#34;,&#34;6.421359237807177&#34;,&#34;6.391124134834344&#34;,&#34;6.389976567958392&#34;,&#34;6.385572049998837&#34;,&#34;6.392125200223458&#34;,&#34;6.382091060151221&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/25W7FG7om+polkadot-dot&#34;,&#34;24hVolume&#34;:&#34;221416486&#34;,&#34;btcPrice&#34;:&#34;0.000318745572243414&#34;},{&#34;uuid&#34;:&#34;xz24e0BjL&#34;,&#34;symbol&#34;:&#34;SHIB&#34;,&#34;name&#34;:&#34;Shiba Inu&#34;,&#34;color&#34;:&#34;#fda32b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/D69LfI-tm/shib.png&#34;,&#34;marketCap&#34;:&#34;6652108208&#34;,&#34;price&#34;:&#34;0.00001128324794062&#34;,&#34;listedAt&#34;:1620650373,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.29&#34;,&#34;rank&#34;:13,&#34;sparkline&#34;:[&#34;0.000011430886900052&#34;,&#34;0.00001138463596749&#34;,&#34;0.00001138733759886&#34;,&#34;0.000011405292020829&#34;,&#34;0.00001143699351968&#34;,&#34;0.000011496602959082&#34;,&#34;0.000011522798136638&#34;,&#34;0.000011526794983798&#34;,&#34;0.00001156726241084&#34;,&#34;0.000011578749434759&#34;,&#34;0.000011495952496203&#34;,&#34;0.000011463028444232&#34;,&#34;0.000011435008665671&#34;,&#34;0.00001144032221974&#34;,&#34;0.000011461144205322&#34;,&#34;0.000011476554808705&#34;,&#34;0.000011469743005642&#34;,&#34;0.00001147197624755&#34;,&#34;0.000011424815330699&#34;,&#34;0.000011366708333454&#34;,&#34;0.0000113570498162&#34;,&#34;0.000011330129168691&#34;,&#34;0.000011283648128574&#34;,&#34;0.000011278387257469&#34;,&#34;0.000011289529854914&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/xz24e0BjL+shibainu-shib&#34;,&#34;24hVolume&#34;:&#34;262980048&#34;,&#34;btcPrice&#34;:&#34;5.63334516e-10&#34;},{&#34;uuid&#34;:&#34;MoTuySvg7&#34;,&#34;symbol&#34;:&#34;DAI&#34;,&#34;name&#34;:&#34;Dai&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg&#34;,&#34;marketCap&#34;:&#34;6334106502&#34;,&#34;price&#34;:&#34;1.000570450749159&#34;,&#34;listedAt&#34;:1585574040,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.25&#34;,&#34;rank&#34;:14,&#34;sparkline&#34;:[&#34;1.000186297816053&#34;,&#34;1.0007170712510804&#34;,&#34;1.000076003665291&#34;,&#34;0.9995190316555369&#34;,&#34;0.9998862356864888&#34;,&#34;0.9989127563401832&#34;,&#34;0.9993980043346639&#34;,&#34;0.9998645744521338&#34;,&#34;0.9998146071451304&#34;,&#34;0.9995523850278402&#34;,&#34;1.0001791138289333&#34;,&#34;1.0005514323488356&#34;,&#34;0.9999749336446756&#34;,&#34;1.0003550198188038&#34;,&#34;1.0000223644977213&#34;,&#34;1.0001689023102156&#34;,&#34;0.9997500246036027&#34;,&#34;0.999188166117977&#34;,&#34;1.0005244452746045&#34;,&#34;1.0009465956605519&#34;,&#34;0.999923212227354&#34;,&#34;0.999943746062425&#34;,&#34;0.9998895246210896&#34;,&#34;0.9996584146724661&#34;,&#34;1.00032070114622&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/MoTuySvg7+dai-dai&#34;,&#34;24hVolume&#34;:&#34;106945713&#34;,&#34;btcPrice&#34;:&#34;0.000049955108063406&#34;},{&#34;uuid&#34;:&#34;qUhEFk1I61atv&#34;,&#34;symbol&#34;:&#34;TRX&#34;,&#34;name&#34;:&#34;TRON&#34;,&#34;color&#34;:&#34;#eb0029&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/behejNqQs/trx.svg&#34;,&#34;marketCap&#34;:&#34;5773520085&#34;,&#34;price&#34;:&#34;0.06252708822599085&#34;,&#34;listedAt&#34;:1505260800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.09&#34;,&#34;rank&#34;:15,&#34;sparkline&#34;:[&#34;0.062490450573204355&#34;,&#34;0.0623310141321653&#34;,&#34;0.06237286872116223&#34;,&#34;0.06246471742963638&#34;,&#34;0.06241172909992005&#34;,&#34;0.06222575081152512&#34;,&#34;0.062246052639756126&#34;,&#34;0.0626926791910014&#34;,&#34;0.06279923150630577&#34;,&#34;0.06276578075127191&#34;,&#34;0.06267020237072249&#34;,&#34;0.0625456021280362&#34;,&#34;0.062449168944641004&#34;,&#34;0.062470443380712434&#34;,&#34;0.06256137344897823&#34;,&#34;0.06269756605100256&#34;,&#34;0.06269254530093321&#34;,&#34;0.06269809717602999&#34;,&#34;0.06270258509423554&#34;,&#34;0.06262935941097252&#34;,&#34;0.0625525372842027&#34;,&#34;0.0626080433578714&#34;,&#34;0.06263852382635865&#34;,&#34;0.06265458985596026&#34;,&#34;0.06258971581342093&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/qUhEFk1I61atv+tron-trx&#34;,&#34;24hVolume&#34;:&#34;319896786&#34;,&#34;btcPrice&#34;:&#34;0.000003121766635104&#34;},{&#34;uuid&#34;:&#34;Mtfb0obXVh59u&#34;,&#34;symbol&#34;:&#34;WETH&#34;,&#34;name&#34;:&#34;Wrapped Ether&#34;,&#34;color&#34;:&#34;#303030&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/KIviQyZlt/weth.svg&#34;,&#34;marketCap&#34;:&#34;5515799820&#34;,&#34;price&#34;:&#34;1358.9688222082978&#34;,&#34;listedAt&#34;:1600259445,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.40&#34;,&#34;rank&#34;:16,&#34;sparkline&#34;:[&#34;1356.5732586778527&#34;,&#34;1352.0719502189272&#34;,&#34;1349.2246427699731&#34;,&#34;1351.8387835694202&#34;,&#34;1354.6183861187728&#34;,&#34;1362.6280153931773&#34;,&#34;1373.436900799631&#34;,&#34;1375.3644528730088&#34;,&#34;1373.4188949549532&#34;,&#34;1374.6125126235245&#34;,&#34;1374.2330132945756&#34;,&#34;1369.816880893475&#34;,&#34;1366.6442277093329&#34;,&#34;1364.4398969103008&#34;,&#34;1361.7692633130323&#34;,&#34;1360.874730475116&#34;,&#34;1360.5880536977058&#34;,&#34;1367.7933188873656&#34;,&#34;1371.0864182649937&#34;,&#34;1366.2849418001506&#34;,&#34;1363.6612621508384&#34;,&#34;1366.3897957603679&#34;,&#34;1362.6017418911797&#34;,&#34;1363.558194381478&#34;,&#34;1361.1032201925939&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth&#34;,&#34;24hVolume&#34;:&#34;321040508&#34;,&#34;btcPrice&#34;:&#34;0.06788016952161434&#34;},{&#34;uuid&#34;:&#34;_H5FVG9iW&#34;,&#34;symbol&#34;:&#34;UNI&#34;,&#34;name&#34;:&#34;Uniswap&#34;,&#34;color&#34;:&#34;#ff007a&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;5353533862&#34;,&#34;price&#34;:&#34;6.894020122063479&#34;,&#34;listedAt&#34;:1600323371,&#34;tier&#34;:1,&#34;change&#34;:&#34;2.08&#34;,&#34;rank&#34;:17,&#34;sparkline&#34;:[&#34;6.775059279986249&#34;,&#34;6.758213036449903&#34;,&#34;6.7721692645296505&#34;,&#34;6.758329949999127&#34;,&#34;6.79774330771248&#34;,&#34;6.872154058933371&#34;,&#34;6.943589001249496&#34;,&#34;6.97921769368874&#34;,&#34;6.943933667270293&#34;,&#34;6.928301334277354&#34;,&#34;6.906609412142296&#34;,&#34;6.871228973240848&#34;,&#34;6.898965983267765&#34;,&#34;6.902438327868096&#34;,&#34;6.863039316865727&#34;,&#34;6.8298809342946445&#34;,&#34;6.841694456601706&#34;,&#34;6.90374298301861&#34;,&#34;6.8980780970926565&#34;,&#34;6.846666245892528&#34;,&#34;6.840143513460894&#34;,&#34;6.886346571294433&#34;,&#34;6.894919048207694&#34;,&#34;6.8980327967208135&#34;,&#34;6.897799219282073&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/_H5FVG9iW+uniswap-uni&#34;,&#34;24hVolume&#34;:&#34;178463429&#34;,&#34;btcPrice&#34;:&#34;0.000344195173794227&#34;},{&#34;uuid&#34;:&#34;dvUj0CzDZ&#34;,&#34;symbol&#34;:&#34;AVAX&#34;,&#34;name&#34;:&#34;Avalanche&#34;,&#34;color&#34;:&#34;#e84242&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png&#34;,&#34;marketCap&#34;:&#34;5080602981&#34;,&#34;price&#34;:&#34;17.158675617919222&#34;,&#34;listedAt&#34;:1600961596,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.92&#34;,&#34;rank&#34;:18,&#34;sparkline&#34;:[&#34;17.30831877293559&#34;,&#34;17.258822212116986&#34;,&#34;17.254916542277368&#34;,&#34;17.317908074079064&#34;,&#34;17.363786992952992&#34;,&#34;17.454761466692503&#34;,&#34;17.543241013498488&#34;,&#34;17.54683351869748&#34;,&#34;17.522053872857185&#34;,&#34;17.571807935450114&#34;,&#34;17.505279274718713&#34;,&#34;17.42149676784545&#34;,&#34;17.402913385205366&#34;,&#34;17.367848226413336&#34;,&#34;17.336368659218273&#34;,&#34;17.319601875912156&#34;,&#34;17.320429202377582&#34;,&#34;17.375834229410586&#34;,&#34;17.37115155021162&#34;,&#34;17.337499378166246&#34;,&#34;17.29492516682681&#34;,&#34;17.27482970087828&#34;,&#34;17.236186499512122&#34;,&#34;17.23084707590994&#34;,&#34;17.187481717207028&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax&#34;,&#34;24hVolume&#34;:&#34;189500112&#34;,&#34;btcPrice&#34;:&#34;0.00085667480393439&#34;},{&#34;uuid&#34;:&#34;x4WXHge-vvFY&#34;,&#34;symbol&#34;:&#34;WBTC&#34;,&#34;name&#34;:&#34;Wrapped BTC&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg&#34;,&#34;marketCap&#34;:&#34;4902193989&#34;,&#34;price&#34;:&#34;20028.855538247128&#34;,&#34;listedAt&#34;:1549894980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.20&#34;,&#34;rank&#34;:19,&#34;sparkline&#34;:[&#34;20207.23732618027&#34;,&#34;20110.453223281886&#34;,&#34;20052.82798227752&#34;,&#34;20119.400015935713&#34;,&#34;20156.923955556937&#34;,&#34;20260.350057885225&#34;,&#34;20307.00444314564&#34;,&#34;20345.21936097743&#34;,&#34;20341.49681229592&#34;,&#34;20380.578094513094&#34;,&#34;20318.8122688521&#34;,&#34;20239.30732353884&#34;,&#34;20213.14393253162&#34;,&#34;20181.299321117534&#34;,&#34;20155.621076440202&#34;,&#34;20130.24398537466&#34;,&#34;20151.81371000324&#34;,&#34;20220.458796392188&#34;,&#34;20191.06461094672&#34;,&#34;20102.3711890372&#34;,&#34;20023.818445349818&#34;,&#34;20063.904548084807&#34;,&#34;20060.09333245677&#34;,&#34;20106.126030789226&#34;,&#34;20068.970588505534&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc&#34;,&#34;24hVolume&#34;:&#34;54900769&#34;,&#34;btcPrice&#34;:&#34;0.9999732073342156&#34;},{&#34;uuid&#34;:&#34;Knsels4_Ol-Ny&#34;,&#34;symbol&#34;:&#34;ATOM&#34;,&#34;name&#34;:&#34;Cosmos&#34;,&#34;color&#34;:&#34;#5064fb&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HJzHboruM/atom.svg&#34;,&#34;marketCap&#34;:&#34;4079164034&#34;,&#34;price&#34;:&#34;13.103803950679156&#34;,&#34;listedAt&#34;:1552520100,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.50&#34;,&#34;rank&#34;:20,&#34;sparkline&#34;:[&#34;12.925944851281226&#34;,&#34;12.868593902936329&#34;,&#34;12.878938070898451&#34;,&#34;12.983826758391368&#34;,&#34;13.002833379180819&#34;,&#34;13.062273951698831&#34;,&#34;13.140384744685578&#34;,&#34;13.17111542584369&#34;,&#34;13.171617318968808&#34;,&#34;13.15217159665712&#34;,&#34;13.1363313850316&#34;,&#34;13.0503320793683&#34;,&#34;13.025595433990174&#34;,&#34;13.012560239822703&#34;,&#34;12.998975121153673&#34;,&#34;12.998577583467394&#34;,&#34;12.961451954944232&#34;,&#34;13.060564440903033&#34;,&#34;13.110658052250319&#34;,&#34;13.099438593619361&#34;,&#34;13.13330326447949&#34;,&#34;13.33452783192435&#34;,&#34;13.373831271270106&#34;,&#34;13.343650016008963&#34;,&#34;13.181674409038528&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom&#34;,&#34;24hVolume&#34;:&#34;513722096&#34;,&#34;btcPrice&#34;:&#34;0.000654228737124646&#34;},{&#34;uuid&#34;:&#34;PDKcptVnzJTmN&#34;,&#34;symbol&#34;:&#34;OKB&#34;,&#34;name&#34;:&#34;OKB&#34;,&#34;color&#34;:&#34;#2d60e0&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xcZdYtX6E/okx.png&#34;,&#34;marketCap&#34;:&#34;3938559513&#34;,&#34;price&#34;:&#34;15.652334369321018&#34;,&#34;listedAt&#34;:1538524800,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.34&#34;,&#34;rank&#34;:21,&#34;sparkline&#34;:[&#34;15.580242673997288&#34;,&#34;15.65410792859574&#34;,&#34;15.560393132022524&#34;,&#34;15.564783139589581&#34;,&#34;15.519383534890673&#34;,&#34;15.571869248215773&#34;,&#34;15.65144337411307&#34;,&#34;15.729616798445825&#34;,&#34;15.728640405259684&#34;,&#34;15.756568986458378&#34;,&#34;15.719867983088795&#34;,&#34;15.66745665705333&#34;,&#34;15.658409845138157&#34;,&#34;15.651646315234636&#34;,&#34;15.638815307350377&#34;,&#34;15.638325526594082&#34;,&#34;15.630250194419004&#34;,&#34;15.770101867167902&#34;,&#34;15.772787444807776&#34;,&#34;15.726419071810144&#34;,&#34;15.730397527991796&#34;,&#34;15.706278363014619&#34;,&#34;15.644427965881071&#34;,&#34;15.661521309252834&#34;,&#34;15.65810007258811&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb&#34;,&#34;24hVolume&#34;:&#34;16544921&#34;,&#34;btcPrice&#34;:&#34;0.000781468265706375&#34;},{&#34;uuid&#34;:&#34;D7B1x_ks7WhV5&#34;,&#34;symbol&#34;:&#34;LTC&#34;,&#34;name&#34;:&#34;Litecoin&#34;,&#34;color&#34;:&#34;#345d9d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg&#34;,&#34;marketCap&#34;:&#34;3831241287&#34;,&#34;price&#34;:&#34;54.06370736300305&#34;,&#34;listedAt&#34;:1382572800,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.27&#34;,&#34;rank&#34;:22,&#34;sparkline&#34;:[&#34;54.706460858051805&#34;,&#34;54.486786633917&#34;,&#34;54.285250668307526&#34;,&#34;54.364815722649475&#34;,&#34;54.528961365730304&#34;,&#34;54.7368993203946&#34;,&#34;54.837191694188455&#34;,&#34;54.85583110277171&#34;,&#34;54.843295781423734&#34;,&#34;54.79083620498672&#34;,&#34;54.76228550686846&#34;,&#34;54.455750836831356&#34;,&#34;54.36182535628572&#34;,&#34;54.35097944334183&#34;,&#34;54.422181211169935&#34;,&#34;54.4489516734391&#34;,&#34;54.48573164038176&#34;,&#34;54.566006895097175&#34;,&#34;54.60169376918578&#34;,&#34;54.434757779526166&#34;,&#34;54.23335179752326&#34;,&#34;54.413459080815954&#34;,&#34;54.21240080510803&#34;,&#34;54.29942643192169&#34;,&#34;54.14247458562991&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc&#34;,&#34;24hVolume&#34;:&#34;414944965&#34;,&#34;btcPrice&#34;:&#34;0.00269921857237041&#34;},{&#34;uuid&#34;:&#34;NfeOYfNcl&#34;,&#34;symbol&#34;:&#34;FTT&#34;,&#34;name&#34;:&#34;FTX Token&#34;,&#34;color&#34;:&#34;#77d9ed&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg&#34;,&#34;marketCap&#34;:&#34;3294301096&#34;,&#34;price&#34;:&#34;24.678566252019138&#34;,&#34;listedAt&#34;:1566222960,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.99&#34;,&#34;rank&#34;:23,&#34;sparkline&#34;:[&#34;24.84863673360048&#34;,&#34;24.731148744683015&#34;,&#34;24.681755275069403&#34;,&#34;24.734413500517867&#34;,&#34;24.769185383467647&#34;,&#34;24.923695092650647&#34;,&#34;25.010616103895188&#34;,&#34;25.016770400105614&#34;,&#34;25.043404692278855&#34;,&#34;25.100611739124314&#34;,&#34;25.05061962383413&#34;,&#34;24.944036589670592&#34;,&#34;24.913091567109454&#34;,&#34;24.875936324284226&#34;,&#34;24.84671933295274&#34;,&#34;24.828862066050032&#34;,&#34;24.846952016930494&#34;,&#34;24.962693812346263&#34;,&#34;24.917387870404692&#34;,&#34;24.806139246634455&#34;,&#34;24.74429478499735&#34;,&#34;24.780282567891753&#34;,&#34;24.77215711531799&#34;,&#34;24.782999234672975&#34;,&#34;24.733584769696286&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt&#34;,&#34;24hVolume&#34;:&#34;63306820&#34;,&#34;btcPrice&#34;:&#34;0.001232117581572075&#34;},{&#34;uuid&#34;:&#34;hnfQfsYfeIGUQ&#34;,&#34;symbol&#34;:&#34;ETC&#34;,&#34;name&#34;:&#34;Ethereum Classic&#34;,&#34;color&#34;:&#34;#699070&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/rJfyor__W/etc.svg&#34;,&#34;marketCap&#34;:&#34;3251414903&#34;,&#34;price&#34;:&#34;27.953939321518934&#34;,&#34;listedAt&#34;:1469577600,&#34;tier&#34;:1,&#34;change&#34;:&#34;1.11&#34;,&#34;rank&#34;:24,&#34;sparkline&#34;:[&#34;27.63321589941744&#34;,&#34;27.58202782358664&#34;,&#34;27.56392529267854&#34;,&#34;27.5949775300032&#34;,&#34;27.63778161485439&#34;,&#34;27.736490721193018&#34;,&#34;28.39677573266268&#34;,&#34;28.681588383759877&#34;,&#34;28.44425346523266&#34;,&#34;28.45911275994896&#34;,&#34;28.42750317289106&#34;,&#34;28.254777612218916&#34;,&#34;28.1429136955099&#34;,&#34;28.154520421670963&#34;,&#34;28.240843430286514&#34;,&#34;28.318006504862765&#34;,&#34;28.299833108837987&#34;,&#34;28.329928166122407&#34;,&#34;28.27078454554885&#34;,&#34;28.13957915693539&#34;,&#34;28.037422192263545&#34;,&#34;28.02538763544355&#34;,&#34;27.990684342238957&#34;,&#34;27.99587068353575&#34;,&#34;27.980180249457508&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc&#34;,&#34;24hVolume&#34;:&#34;650721313&#34;,&#34;btcPrice&#34;:&#34;0.001395645912348106&#34;},{&#34;uuid&#34;:&#34;3mVx2FX_iJFp5&#34;,&#34;symbol&#34;:&#34;XMR&#34;,&#34;name&#34;:&#34;Monero&#34;,&#34;color&#34;:&#34;#ff7519&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg&#34;,&#34;marketCap&#34;:&#34;2644484614&#34;,&#34;price&#34;:&#34;145.4330391999523&#34;,&#34;listedAt&#34;:1422489600,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.74&#34;,&#34;rank&#34;:25,&#34;sparkline&#34;:[&#34;146.94173270369004&#34;,&#34;146.25404163278355&#34;,&#34;146.0377022736895&#34;,&#34;146.25176101324263&#34;,&#34;146.1822682569043&#34;,&#34;147.0770075706438&#34;,&#34;147.52969184954443&#34;,&#34;147.82022894470867&#34;,&#34;148.37593172563746&#34;,&#34;149.05034918562527&#34;,&#34;147.75879531115433&#34;,&#34;145.84431743561993&#34;,&#34;145.47401337391443&#34;,&#34;145.43911678899732&#34;,&#34;145.13011985927878&#34;,&#34;145.01926185302602&#34;,&#34;145.05380463743765&#34;,&#34;145.5189388138254&#34;,&#34;144.94121932498405&#34;,&#34;144.55169371872742&#34;,&#34;144.03637609256356&#34;,&#34;144.0602822952893&#34;,&#34;143.9422537624223&#34;,&#34;144.01800973377962&#34;,&#34;144.85743594518297&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr&#34;,&#34;24hVolume&#34;:&#34;107521449&#34;,&#34;btcPrice&#34;:&#34;0.007260981157082457&#34;},{&#34;uuid&#34;:&#34;TpHE2IShQw-sJ&#34;,&#34;symbol&#34;:&#34;ALGO&#34;,&#34;name&#34;:&#34;Algorand&#34;,&#34;color&#34;:null,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/lzbmCkUGB/algo.svg&#34;,&#34;marketCap&#34;:&#34;2457307336&#34;,&#34;price&#34;:&#34;0.3502871452525357&#34;,&#34;listedAt&#34;:1562082540,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.51&#34;,&#34;rank&#34;:26,&#34;sparkline&#34;:[&#34;0.3527488328226558&#34;,&#34;0.35220710417088796&#34;,&#34;0.35149031131442215&#34;,&#34;0.3522890146063405&#34;,&#34;0.3531848827851723&#34;,&#34;0.35437183968426583&#34;,&#34;0.3567082813614958&#34;,&#34;0.3568875577741808&#34;,&#34;0.35623433411535693&#34;,&#34;0.3578322372848037&#34;,&#34;0.3576518518997961&#34;,&#34;0.3570277246343137&#34;,&#34;0.35580495927026995&#34;,&#34;0.3549060979115252&#34;,&#34;0.3544949322189096&#34;,&#34;0.35419673898063&#34;,&#34;0.3545814398327581&#34;,&#34;0.3560563698021784&#34;,&#34;0.35476940248868055&#34;,&#34;0.35303138884975377&#34;,&#34;0.3526138360299577&#34;,&#34;0.353297325772352&#34;,&#34;0.3530050986834627&#34;,&#34;0.3519348960977679&#34;,&#34;0.3512839084444219&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo&#34;,&#34;24hVolume&#34;:&#34;114516188&#34;,&#34;btcPrice&#34;:&#34;0.000017488655777522&#34;},{&#34;uuid&#34;:&#34;f3iaFeCKEmkaZ&#34;,&#34;symbol&#34;:&#34;XLM&#34;,&#34;name&#34;:&#34;Stellar&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg&#34;,&#34;marketCap&#34;:&#34;2426817955&#34;,&#34;price&#34;:&#34;0.12010666028122727&#34;,&#34;listedAt&#34;:1484611200,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.34&#34;,&#34;rank&#34;:27,&#34;sparkline&#34;:[&#34;0.11946420943582607&#34;,&#34;0.11912472301742397&#34;,&#34;0.11884523375505367&#34;,&#34;0.11908277850194623&#34;,&#34;0.11895901878010605&#34;,&#34;0.11904417569954241&#34;,&#34;0.1194108721121216&#34;,&#34;0.11925980402300661&#34;,&#34;0.11936415064859447&#34;,&#34;0.11976375793050911&#34;,&#34;0.11978487560384776&#34;,&#34;0.11916206905037235&#34;,&#34;0.11897208646439993&#34;,&#34;0.11911213921537671&#34;,&#34;0.11882743355055038&#34;,&#34;0.11868474386838856&#34;,&#34;0.11878227754760867&#34;,&#34;0.11974550069912294&#34;,&#34;0.11958643330478903&#34;,&#34;0.11927337184798883&#34;,&#34;0.11957351041625688&#34;,&#34;0.11944049884817015&#34;,&#34;0.12009378998253879&#34;,&#34;0.12024109052539109&#34;,&#34;0.12017728479638659&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm&#34;,&#34;24hVolume&#34;:&#34;162687717&#34;,&#34;btcPrice&#34;:&#34;0.000005996520473887&#34;},{&#34;uuid&#34;:&#34;ZlZpzOJo43mIo&#34;,&#34;symbol&#34;:&#34;BCH&#34;,&#34;name&#34;:&#34;Bitcoin Cash&#34;,&#34;color&#34;:&#34;#8dc451&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/By8ziihX7/bch.svg&#34;,&#34;marketCap&#34;:&#34;2296807697&#34;,&#34;price&#34;:&#34;120.05434571253869&#34;,&#34;listedAt&#34;:1541808000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.35&#34;,&#34;rank&#34;:28,&#34;sparkline&#34;:[&#34;122.67694332734729&#34;,&#34;122.3278382037123&#34;,&#34;122.30773411807947&#34;,&#34;122.25039668314258&#34;,&#34;122.19157595212056&#34;,&#34;122.83530239892909&#34;,&#34;123.1940069678215&#34;,&#34;122.92546780609763&#34;,&#34;122.74097933708403&#34;,&#34;122.6131282480114&#34;,&#34;122.19145107828301&#34;,&#34;121.46370201610601&#34;,&#34;121.04945353042237&#34;,&#34;121.08144019937376&#34;,&#34;121.3486844528348&#34;,&#34;121.35241663771652&#34;,&#34;121.4308975310673&#34;,&#34;121.83807088869149&#34;,&#34;121.79108869683151&#34;,&#34;121.38727041457742&#34;,&#34;120.77014246462569&#34;,&#34;120.9730955171752&#34;,&#34;120.81712651964756&#34;,&#34;120.67586343768751&#34;,&#34;120.35934093743896&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch&#34;,&#34;24hVolume&#34;:&#34;189086609&#34;,&#34;btcPrice&#34;:&#34;0.005993908583909263&#34;},{&#34;uuid&#34;:&#34;9_jH48RBW&#34;,&#34;symbol&#34;:&#34;BTCB&#34;,&#34;name&#34;:&#34;Bitcoin BEP2&#34;,&#34;color&#34;:&#34;#ff9d14&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Swr_SeZio/4023.png&#34;,&#34;marketCap&#34;:&#34;2256819816&#34;,&#34;price&#34;:&#34;20060.442274396293&#34;,&#34;listedAt&#34;:1629334963,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.42&#34;,&#34;rank&#34;:29,&#34;sparkline&#34;:[&#34;20238.973751908492&#34;,&#34;20133.197961225203&#34;,&#34;20047.333792919962&#34;,&#34;20087.343894321733&#34;,&#34;20159.394462561493&#34;,&#34;20224.635751815204&#34;,&#34;20306.9255861848&#34;,&#34;20357.39118685795&#34;,&#34;20334.177674095823&#34;,&#34;20380.735634942914&#34;,&#34;20334.29432495635&#34;,&#34;20278.707779471843&#34;,&#34;20234.022033611724&#34;,&#34;20214.37272239842&#34;,&#34;20157.58477689183&#34;,&#34;20148.427911440165&#34;,&#34;20139.404745478332&#34;,&#34;20195.51476083255&#34;,&#34;20218.207717425983&#34;,&#34;20128.86850120113&#34;,&#34;20006.9744546404&#34;,&#34;20060.410623139804&#34;,&#34;20033.996371801375&#34;,&#34;20098.47310976815&#34;,&#34;20097.464012404307&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb&#34;,&#34;24hVolume&#34;:&#34;12239219&#34;,&#34;btcPrice&#34;:&#34;1.0020143214557586&#34;},{&#34;uuid&#34;:&#34;DCrsaMv68&#34;,&#34;symbol&#34;:&#34;NEAR&#34;,&#34;name&#34;:&#34;NEAR Protocol&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Cth83dCnl/near.png&#34;,&#34;marketCap&#34;:&#34;2213514097&#34;,&#34;price&#34;:&#34;3.641580551056011&#34;,&#34;listedAt&#34;:1615164591,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.76&#34;,&#34;rank&#34;:30,&#34;sparkline&#34;:[&#34;3.70750458071197&#34;,&#34;3.6824957041196416&#34;,&#34;3.6757465487798333&#34;,&#34;3.6928192139697984&#34;,&#34;3.6940747496238986&#34;,&#34;3.70605194624562&#34;,&#34;3.7395994850569783&#34;,&#34;3.7274777350306603&#34;,&#34;3.7261149464334484&#34;,&#34;3.7322389451888762&#34;,&#34;3.71323745519199&#34;,&#34;3.6824155966901064&#34;,&#34;3.6731776061650954&#34;,&#34;3.6707256113983564&#34;,&#34;3.682858101631704&#34;,&#34;3.6816966205355786&#34;,&#34;3.6732422481738896&#34;,&#34;3.68742500998647&#34;,&#34;3.67949841043138&#34;,&#34;3.658086252545483&#34;,&#34;3.6466882303359083&#34;,&#34;3.653534815527586&#34;,&#34;3.6524651001872352&#34;,&#34;3.6566637162352977&#34;,&#34;3.6505578611908183&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/DCrsaMv68+nearprotocol-near&#34;,&#34;24hVolume&#34;:&#34;177528870&#34;,&#34;btcPrice&#34;:&#34;0.000181811835251974&#34;},{&#34;uuid&#34;:&#34;65PHZTpmE55b&#34;,&#34;symbol&#34;:&#34;CRO&#34;,&#34;name&#34;:&#34;Cronos&#34;,&#34;color&#34;:&#34;#01275d&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/2o91jm73M/cro.svg&#34;,&#34;marketCap&#34;:&#34;2208347683&#34;,&#34;price&#34;:&#34;0.10980286985731572&#34;,&#34;listedAt&#34;:1548953220,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.74&#34;,&#34;rank&#34;:31,&#34;sparkline&#34;:[&#34;0.11016228966006657&#34;,&#34;0.10968594168431677&#34;,&#34;0.10964927879479568&#34;,&#34;0.11005473582804114&#34;,&#34;0.11027422558257975&#34;,&#34;0.11073314021872514&#34;,&#34;0.11109138099592394&#34;,&#34;0.11106353920744405&#34;,&#34;0.11110339624354595&#34;,&#34;0.11125346285145259&#34;,&#34;0.1109178010991276&#34;,&#34;0.11057847758884053&#34;,&#34;0.11052619147867672&#34;,&#34;0.11037764443683885&#34;,&#34;0.11018324144957391&#34;,&#34;0.11015957429341776&#34;,&#34;0.11025941309951554&#34;,&#34;0.1107306596648452&#34;,&#34;0.11056541424952443&#34;,&#34;0.11033981054182589&#34;,&#34;0.11014982408569168&#34;,&#34;0.11018846762437533&#34;,&#34;0.11026378704001755&#34;,&#34;0.11036637137706824&#34;,&#34;0.11006396812568181&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/65PHZTpmE55b+cronos-cro&#34;,&#34;24hVolume&#34;:&#34;19761028&#34;,&#34;btcPrice&#34;:&#34;0.000005482086968776&#34;},{&#34;uuid&#34;:&#34;AaQUAs2Mc&#34;,&#34;symbol&#34;:&#34;LUNC&#34;,&#34;name&#34;:&#34;Terra Classic&#34;,&#34;color&#34;:&#34;#0E3CA5&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg&#34;,&#34;marketCap&#34;:&#34;1916185578&#34;,&#34;price&#34;:&#34;0.000290737400138069&#34;,&#34;listedAt&#34;:1565957940,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.70&#34;,&#34;rank&#34;:32,&#34;sparkline&#34;:[&#34;0.000299121841521715&#34;,&#34;0.00029963973487461&#34;,&#34;0.000297525427108662&#34;,&#34;0.000299831775365707&#34;,&#34;0.000301585899113257&#34;,&#34;0.000299624370013334&#34;,&#34;0.000298991487467118&#34;,&#34;0.00030262712555721&#34;,&#34;0.000302917282400826&#34;,&#34;0.000301395879660939&#34;,&#34;0.000300507018284572&#34;,&#34;0.000298793950231793&#34;,&#34;0.000295429238011752&#34;,&#34;0.00029451177987895&#34;,&#34;0.000296163406502654&#34;,&#34;0.000295896753590268&#34;,&#34;0.000296293813138895&#34;,&#34;0.00029712340206075&#34;,&#34;0.000296241802461865&#34;,&#34;0.000294833413425782&#34;,&#34;0.000295805632133273&#34;,&#34;0.000295448279840089&#34;,&#34;0.000294342506473691&#34;,&#34;0.000292052607134611&#34;,&#34;0.000290629002509443&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc&#34;,&#34;24hVolume&#34;:&#34;92713449&#34;,&#34;btcPrice&#34;:&#34;1.4515537843e-8&#34;},{&#34;uuid&#34;:&#34;08CsQa-Ov&#34;,&#34;symbol&#34;:&#34;WEMIX&#34;,&#34;name&#34;:&#34;WEMIX TOKEN&#34;,&#34;color&#34;:&#34;#9bdc70&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1N84MQsoO/7548.png&#34;,&#34;marketCap&#34;:&#34;1803326639&#34;,&#34;price&#34;:&#34;1.8033266385015005&#34;,&#34;listedAt&#34;:1638249982,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.16&#34;,&#34;rank&#34;:33,&#34;sparkline&#34;:[&#34;1.8285967152459395&#34;,&#34;1.8278723134807413&#34;,&#34;1.8195129105444636&#34;,&#34;1.8259705488511466&#34;,&#34;1.8286109679363158&#34;,&#34;1.8355357951458109&#34;,&#34;1.8374726075890546&#34;,&#34;1.8338785300044889&#34;,&#34;1.8344005132904393&#34;,&#34;1.8386764723564313&#34;,&#34;1.8393287115439652&#34;,&#34;1.8301651359756594&#34;,&#34;1.8198595455403543&#34;,&#34;1.8134695201238413&#34;,&#34;1.8119386729956268&#34;,&#34;1.8082288357010967&#34;,&#34;1.8068009632735749&#34;,&#34;1.8188388540688198&#34;,&#34;1.8203819894312625&#34;,&#34;1.814524337055796&#34;,&#34;1.808721193963964&#34;,&#34;1.8196357521223283&#34;,&#34;1.815149328780377&#34;,&#34;1.8112776438372116&#34;,&#34;1.8108458436676627&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix&#34;,&#34;24hVolume&#34;:&#34;11666450&#34;,&#34;btcPrice&#34;:&#34;0.000090034017127441&#34;},{&#34;uuid&#34;:&#34;QQ0NCmjVq&#34;,&#34;symbol&#34;:&#34;FLOW&#34;,&#34;name&#34;:&#34;Flow&#34;,&#34;color&#34;:&#34;#9efad7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/xh8X8QBss/flow.png&#34;,&#34;marketCap&#34;:&#34;1757607942&#34;,&#34;price&#34;:&#34;1.6962053096925191&#34;,&#34;listedAt&#34;:1614963736,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.50&#34;,&#34;rank&#34;:34,&#34;sparkline&#34;:[&#34;1.6922480978885228&#34;,&#34;1.6860191291670321&#34;,&#34;1.689415193344878&#34;,&#34;1.6917383647950757&#34;,&#34;1.6959828586697636&#34;,&#34;1.7038955974124341&#34;,&#34;1.7142205632595247&#34;,&#34;1.7133094615446174&#34;,&#34;1.7153447123955954&#34;,&#34;1.7178175260495157&#34;,&#34;1.7110304309251112&#34;,&#34;1.7039099391519943&#34;,&#34;1.6998006306014941&#34;,&#34;1.7003688832097956&#34;,&#34;1.6968447607894448&#34;,&#34;1.6929234664355564&#34;,&#34;1.692450465901943&#34;,&#34;1.7010313056523052&#34;,&#34;1.6985550988885165&#34;,&#34;1.6893705490937398&#34;,&#34;1.6866645696902811&#34;,&#34;1.7019443099317626&#34;,&#34;1.7014230772153076&#34;,&#34;1.7069133070811424&#34;,&#34;1.7033611748224882&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/QQ0NCmjVq+flow-flow&#34;,&#34;24hVolume&#34;:&#34;48086880&#34;,&#34;btcPrice&#34;:&#34;0.000084685810459393&#34;},{&#34;uuid&#34;:&#34;SbWqqTui-&#34;,&#34;symbol&#34;:&#34;ENS&#34;,&#34;name&#34;:&#34;EnergySwap&#34;,&#34;color&#34;:&#34;#ffda55&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png&#34;,&#34;marketCap&#34;:&#34;1717587669&#34;,&#34;price&#34;:&#34;17.175876690094942&#34;,&#34;listedAt&#34;:1626134763,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.24&#34;,&#34;rank&#34;:35,&#34;sparkline&#34;:[&#34;17.289779191921472&#34;,&#34;17.141210993619577&#34;,&#34;17.08040451137421&#34;,&#34;17.06367669811532&#34;,&#34;17.263046139058346&#34;,&#34;17.38897035978985&#34;,&#34;17.34903128275215&#34;,&#34;17.37536485913112&#34;,&#34;17.408081484557286&#34;,&#34;17.656981087936845&#34;,&#34;17.554159392743454&#34;,&#34;17.418970877607208&#34;,&#34;17.34686167592786&#34;,&#34;17.445574853391744&#34;,&#34;17.32297480082281&#34;,&#34;17.37509972478323&#34;,&#34;17.34525419003646&#34;,&#34;17.409372532584655&#34;,&#34;17.389133405821546&#34;,&#34;17.35036829752898&#34;,&#34;17.427069919455597&#34;,&#34;17.552044170794996&#34;,&#34;17.412493725255267&#34;,&#34;17.349458429441366&#34;,&#34;17.146992959728287&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/SbWqqTui-+energyswap-ens&#34;,&#34;24hVolume&#34;:&#34;17240841&#34;,&#34;btcPrice&#34;:&#34;0.000857165465951273&#34;},{&#34;uuid&#34;:&#34;ymQub4fuB&#34;,&#34;symbol&#34;:&#34;FIL&#34;,&#34;name&#34;:&#34;Filecoin&#34;,&#34;color&#34;:&#34;#0090ff&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48&#34;,&#34;marketCap&#34;:&#34;1627152239&#34;,&#34;price&#34;:&#34;5.536278289924524&#34;,&#34;listedAt&#34;:1602839473,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.89&#34;,&#34;rank&#34;:36,&#34;sparkline&#34;:[&#34;5.596535901455788&#34;,&#34;5.57969664398857&#34;,&#34;5.5616781706384915&#34;,&#34;5.567770853835976&#34;,&#34;5.578284003424381&#34;,&#34;5.604028531451866&#34;,&#34;5.625801664716765&#34;,&#34;5.621277230377107&#34;,&#34;5.636563163916574&#34;,&#34;5.634225510084751&#34;,&#34;5.620160956189447&#34;,&#34;5.602784187323373&#34;,&#34;5.58939589293232&#34;,&#34;5.592369569284194&#34;,&#34;5.578504466675582&#34;,&#34;5.569698214994045&#34;,&#34;5.57106966286358&#34;,&#34;5.5871830930712845&#34;,&#34;5.58594625512426&#34;,&#34;5.567567471367906&#34;,&#34;5.557070809165411&#34;,&#34;5.564056973722409&#34;,&#34;5.560812558868851&#34;,&#34;5.555371588027569&#34;,&#34;5.5431943077677825&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ymQub4fuB+filecoin-fil&#34;,&#34;24hVolume&#34;:&#34;193736485&#34;,&#34;btcPrice&#34;:&#34;0.000276407703260868&#34;},{&#34;uuid&#34;:&#34;aMNLwaUbY&#34;,&#34;symbol&#34;:&#34;ICP&#34;,&#34;name&#34;:&#34;Internet Computer (DFINITY)&#34;,&#34;color&#34;:&#34;#00042b&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png&#34;,&#34;marketCap&#34;:&#34;1585280534&#34;,&#34;price&#34;:&#34;6.036699371836296&#34;,&#34;listedAt&#34;:1601555742,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.25&#34;,&#34;rank&#34;:37,&#34;sparkline&#34;:[&#34;6.0303980101123935&#34;,&#34;6.022359280222669&#34;,&#34;6.01622779603638&#34;,&#34;6.02844834848022&#34;,&#34;6.025186457194555&#34;,&#34;6.0413255348583945&#34;,&#34;6.068942882872111&#34;,&#34;6.0877269427721865&#34;,&#34;6.122569377263406&#34;,&#34;6.121307379280848&#34;,&#34;6.114910042324755&#34;,&#34;6.086663439924114&#34;,&#34;6.05948511630208&#34;,&#34;6.054607074054347&#34;,&#34;6.044824998176658&#34;,&#34;6.039684832886364&#34;,&#34;6.031722431559297&#34;,&#34;6.051848135596568&#34;,&#34;6.052505386943968&#34;,&#34;6.039004021283348&#34;,&#34;6.03094716124407&#34;,&#34;6.0282463753416&#34;,&#34;6.032921444329065&#34;,&#34;6.04632010848593&#34;,&#34;6.041115706175561&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp&#34;,&#34;24hVolume&#34;:&#34;26782208&#34;,&#34;btcPrice&#34;:&#34;0.000301392040151281&#34;},{&#34;uuid&#34;:&#34;FEbS54wxo4oIl&#34;,&#34;symbol&#34;:&#34;VET&#34;,&#34;name&#34;:&#34;VeChain&#34;,&#34;color&#34;:&#34;#4bc0fa&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg&#34;,&#34;marketCap&#34;:&#34;1571751323&#34;,&#34;price&#34;:&#34;0.023543047797492656&#34;,&#34;listedAt&#34;:1533427200,&#34;tier&#34;:1,&#34;change&#34;:&#34;-1.39&#34;,&#34;rank&#34;:38,&#34;sparkline&#34;:[&#34;0.023823765118321034&#34;,&#34;0.02377340508432418&#34;,&#34;0.023748488388460245&#34;,&#34;0.02381125373722562&#34;,&#34;0.023864456977472057&#34;,&#34;0.023984157434664824&#34;,&#34;0.024045369361452452&#34;,&#34;0.024051305042701605&#34;,&#34;0.024014721017668543&#34;,&#34;0.024044338125516478&#34;,&#34;0.023988207016907237&#34;,&#34;0.023854278354627466&#34;,&#34;0.023793046417946048&#34;,&#34;0.023839365677651318&#34;,&#34;0.02381560283772684&#34;,&#34;0.02375080527252874&#34;,&#34;0.023755408145521056&#34;,&#34;0.02387716977416547&#34;,&#34;0.02387351543491939&#34;,&#34;0.023763817483126306&#34;,&#34;0.023691552163897643&#34;,&#34;0.023726104965078293&#34;,&#34;0.02368589760998112&#34;,&#34;0.023671062742535463&#34;,&#34;0.023601726034422614&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet&#34;,&#34;24hVolume&#34;:&#34;65510017&#34;,&#34;btcPrice&#34;:&#34;0.000001175424974808&#34;},{&#34;uuid&#34;:&#34;ncYFcP709&#34;,&#34;symbol&#34;:&#34;CAKE&#34;,&#34;name&#34;:&#34;PancakeSwap&#34;,&#34;color&#34;:&#34;#fe9555&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png&#34;,&#34;marketCap&#34;:&#34;1569553090&#34;,&#34;price&#34;:&#34;4.719252048982707&#34;,&#34;listedAt&#34;:1613642379,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.61&#34;,&#34;rank&#34;:39,&#34;sparkline&#34;:[&#34;4.695086344247684&#34;,&#34;4.667585420158127&#34;,&#34;4.6588485830229605&#34;,&#34;4.666802605325257&#34;,&#34;4.670637748826419&#34;,&#34;4.708273594292242&#34;,&#34;4.729111226744663&#34;,&#34;4.715177936812784&#34;,&#34;4.723046037245001&#34;,&#34;4.727423615129483&#34;,&#34;4.712401882843277&#34;,&#34;4.702427068127662&#34;,&#34;4.700110575792256&#34;,&#34;4.700438661119112&#34;,&#34;4.691700450917038&#34;,&#34;4.677135351952703&#34;,&#34;4.694429858732558&#34;,&#34;4.721898404666295&#34;,&#34;4.72192706714792&#34;,&#34;4.711492514608389&#34;,&#34;4.722961417487937&#34;,&#34;4.727350513894986&#34;,&#34;4.726777756847048&#34;,&#34;4.730691546772397&#34;,&#34;4.723894121828546&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/ncYFcP709+pancakeswap-cake&#34;,&#34;24hVolume&#34;:&#34;36882299&#34;,&#34;btcPrice&#34;:&#34;0.00023561633856853&#34;},{&#34;uuid&#34;:&#34;tEf7-dnwV3BXS&#34;,&#34;symbol&#34;:&#34;MANA&#34;,&#34;name&#34;:&#34;Decentraland&#34;,&#34;color&#34;:&#34;#f47e33&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg&#34;,&#34;marketCap&#34;:&#34;1535637639&#34;,&#34;price&#34;:&#34;0.7000854070071796&#34;,&#34;listedAt&#34;:1500336000,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.75&#34;,&#34;rank&#34;:40,&#34;sparkline&#34;:[&#34;0.7061958610934181&#34;,&#34;0.7032832644643586&#34;,&#34;0.7014374348943289&#34;,&#34;0.7014375536213877&#34;,&#34;0.7026826908124838&#34;,&#34;0.7044808209825967&#34;,&#34;0.7067232519766197&#34;,&#34;0.7095270107866539&#34;,&#34;0.7110022917743806&#34;,&#34;0.7106053240648419&#34;,&#34;0.7099564532586407&#34;,&#34;0.7069481464587034&#34;,&#34;0.7054561708729212&#34;,&#34;0.7072193110953995&#34;,&#34;0.7050915198697436&#34;,&#34;0.7044747588216688&#34;,&#34;0.7041160697442599&#34;,&#34;0.7066206655413716&#34;,&#34;0.7058549946852882&#34;,&#34;0.7032486369948753&#34;,&#34;0.7012876549332069&#34;,&#34;0.7009747852786251&#34;,&#34;0.700473849406315&#34;,&#34;0.7005982029037023&#34;,&#34;0.7002369574369308&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana&#34;,&#34;24hVolume&#34;:&#34;130918401&#34;,&#34;btcPrice&#34;:&#34;0.000034952903250812&#34;},{&#34;uuid&#34;:&#34;Z96jIvLU7&#34;,&#34;symbol&#34;:&#34;IMX&#34;,&#34;name&#34;:&#34;Immutable X&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/naRGT2Y_X/10603.png&#34;,&#34;marketCap&#34;:&#34;1526599264&#34;,&#34;price&#34;:&#34;0.7632996320832136&#34;,&#34;listedAt&#34;:1649387294,&#34;tier&#34;:1,&#34;change&#34;:&#34;-3.76&#34;,&#34;rank&#34;:41,&#34;sparkline&#34;:[&#34;0.7924038051721074&#34;,&#34;0.7880566513420024&#34;,&#34;0.7858201134232504&#34;,&#34;0.7859515208715279&#34;,&#34;0.7867008505812916&#34;,&#34;0.7919544953384113&#34;,&#34;0.7932637742652324&#34;,&#34;0.7917138701346231&#34;,&#34;0.793595091396988&#34;,&#34;0.7929496834191253&#34;,&#34;0.7896506553814846&#34;,&#34;0.7859338442030059&#34;,&#34;0.782765170473147&#34;,&#34;0.7827849158908187&#34;,&#34;0.7815399732777862&#34;,&#34;0.7772118263855671&#34;,&#34;0.7746419330272937&#34;,&#34;0.7799681155884691&#34;,&#34;0.777981466209664&#34;,&#34;0.7739045575146072&#34;,&#34;0.7718550460057184&#34;,&#34;0.7715939215456447&#34;,&#34;0.7695383673672498&#34;,&#34;0.7673191324882311&#34;,&#34;0.7657534786224457&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Z96jIvLU7+immutablex-imx&#34;,&#34;24hVolume&#34;:&#34;39904679&#34;,&#34;btcPrice&#34;:&#34;0.000038108976311388&#34;},{&#34;uuid&#34;:&#34;jad286TjB&#34;,&#34;symbol&#34;:&#34;HBAR&#34;,&#34;name&#34;:&#34;Hedera&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/dSCnSLilQ/hedera.svg&#34;,&#34;marketCap&#34;:&#34;1410292514&#34;,&#34;price&#34;:&#34;0.05792718953571414&#34;,&#34;listedAt&#34;:1568704980,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.02&#34;,&#34;rank&#34;:42,&#34;sparkline&#34;:[&#34;0.05794895825165379&#34;,&#34;0.057734766734663975&#34;,&#34;0.05770834356572597&#34;,&#34;0.05776457891143251&#34;,&#34;0.05793603308495811&#34;,&#34;0.05811275998376636&#34;,&#34;0.058253201071108464&#34;,&#34;0.058380186435012055&#34;,&#34;0.058394791168773975&#34;,&#34;0.05840849259769676&#34;,&#34;0.05828468543736715&#34;,&#34;0.05815078870632387&#34;,&#34;0.05808136692729906&#34;,&#34;0.058157030241846555&#34;,&#34;0.05809696154952601&#34;,&#34;0.05804430834562561&#34;,&#34;0.058079013279903904&#34;,&#34;0.058270287529447726&#34;,&#34;0.05828744692577993&#34;,&#34;0.05819030965298005&#34;,&#34;0.05799510351002881&#34;,&#34;0.05801850162696806&#34;,&#34;0.05804288093820356&#34;,&#34;0.05809254408384736&#34;,&#34;0.05803413483043568&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/jad286TjB+hedera-hbar&#34;,&#34;24hVolume&#34;:&#34;54394708&#34;,&#34;btcPrice&#34;:&#34;0.000002892109207202&#34;},{&#34;uuid&#34;:&#34;KfWtaeV1W&#34;,&#34;symbol&#34;:&#34;FRAX&#34;,&#34;name&#34;:&#34;Frax&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/BpVNCX-NM/frax.png&#34;,&#34;marketCap&#34;:&#34;1358167201&#34;,&#34;price&#34;:&#34;1.0000747739721663&#34;,&#34;listedAt&#34;:1615299931,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.23&#34;,&#34;rank&#34;:43,&#34;sparkline&#34;:[&#34;0.9997156631485098&#34;,&#34;1.0002802810205966&#34;,&#34;0.9997558584400775&#34;,&#34;0.99912357231276&#34;,&#34;0.9995882216164746&#34;,&#34;0.998401069923201&#34;,&#34;0.9989639051392774&#34;,&#34;0.9994726314335471&#34;,&#34;0.999514114256888&#34;,&#34;0.9993306245772301&#34;,&#34;0.9999516584075651&#34;,&#34;1.000221641596607&#34;,&#34;0.99959042305783&#34;,&#34;1.0001187705349235&#34;,&#34;0.9995079927133396&#34;,&#34;0.999782374902935&#34;,&#34;0.999308877507305&#34;,&#34;0.9988846870195152&#34;,&#34;1.0005152287641716&#34;,&#34;1.0008340522704022&#34;,&#34;0.9994436410988572&#34;,&#34;0.9996849217788387&#34;,&#34;0.9995211220531371&#34;,&#34;0.999211197536607&#34;,&#34;0.9999983085146361&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/KfWtaeV1W+frax-frax&#34;,&#34;24hVolume&#34;:&#34;3772283&#34;,&#34;btcPrice&#34;:&#34;0.000049938163358701&#34;},{&#34;uuid&#34;:&#34;bauj_21eYVwso&#34;,&#34;symbol&#34;:&#34;QNT&#34;,&#34;name&#34;:&#34;Quant&#34;,&#34;color&#34;:&#34;#585e63&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/a-i9Dl392/quant.png&#34;,&#34;marketCap&#34;:&#34;1351641110&#34;,&#34;price&#34;:&#34;138.24368254540943&#34;,&#34;listedAt&#34;:1533945600,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.22&#34;,&#34;rank&#34;:44,&#34;sparkline&#34;:[&#34;137.5462424930445&#34;,&#34;137.1444980040031&#34;,&#34;136.78826724810827&#34;,&#34;137.90003847715815&#34;,&#34;138.0526014339526&#34;,&#34;138.9625334758965&#34;,&#34;139.0907456741905&#34;,&#34;139.0537169871792&#34;,&#34;139.17039434216352&#34;,&#34;138.75289369204114&#34;,&#34;137.79602086880834&#34;,&#34;137.47400977345043&#34;,&#34;137.8859162008118&#34;,&#34;139.3980081209242&#34;,&#34;138.9594762558207&#34;,&#34;139.35956951767986&#34;,&#34;139.76224675334996&#34;,&#34;140.73346306408735&#34;,&#34;139.70014562219615&#34;,&#34;139.58102151134608&#34;,&#34;139.19177605867037&#34;,&#34;139.65458123164169&#34;,&#34;139.17824474960636&#34;,&#34;139.1901615972891&#34;,&#34;138.83319330338816&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/bauj_21eYVwso+quant-qnt&#34;,&#34;24hVolume&#34;:&#34;35630086&#34;,&#34;btcPrice&#34;:&#34;0.006902040826279012&#34;},{&#34;uuid&#34;:&#34;fsIbGOEJWbzxG&#34;,&#34;symbol&#34;:&#34;XTZ&#34;,&#34;name&#34;:&#34;Tezos&#34;,&#34;color&#34;:&#34;#2c7df7&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/HkLUdilQ7/xtz.svg&#34;,&#34;marketCap&#34;:&#34;1300100834&#34;,&#34;price&#34;:&#34;1.4315350379639447&#34;,&#34;listedAt&#34;:1530662400,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.09&#34;,&#34;rank&#34;:45,&#34;sparkline&#34;:[&#34;1.4300212075185095&#34;,&#34;1.4260850526744837&#34;,&#34;1.4210977739314623&#34;,&#34;1.4263183927748369&#34;,&#34;1.4283349120519158&#34;,&#34;1.4351536445029407&#34;,&#34;1.445847845207989&#34;,&#34;1.4455351824304574&#34;,&#34;1.4432977874541641&#34;,&#34;1.4488590688045635&#34;,&#34;1.444524532817821&#34;,&#34;1.4390895849126069&#34;,&#34;1.4357134681033727&#34;,&#34;1.436366388066666&#34;,&#34;1.4339651090330499&#34;,&#34;1.4334495267586773&#34;,&#34;1.4333504141935083&#34;,&#34;1.4389840361204465&#34;,&#34;1.4379456439736016&#34;,&#34;1.4315401694215406&#34;,&#34;1.4240153029007887&#34;,&#34;1.4240927210678032&#34;,&#34;1.4220389629012662&#34;,&#34;1.4290008245398644&#34;,&#34;1.4312652127406216&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz&#34;,&#34;24hVolume&#34;:&#34;29156674&#34;,&#34;btcPrice&#34;:&#34;0.000071471716423863&#34;},{&#34;uuid&#34;:&#34;omwkOTglq&#34;,&#34;symbol&#34;:&#34;EGLD&#34;,&#34;name&#34;:&#34;Elrond&#34;,&#34;color&#34;:&#34;#000000&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg&#34;,&#34;marketCap&#34;:&#34;1299190479&#34;,&#34;price&#34;:&#34;54.98746473723186&#34;,&#34;listedAt&#34;:1612524044,&#34;tier&#34;:1,&#34;change&#34;:&#34;0.40&#34;,&#34;rank&#34;:46,&#34;sparkline&#34;:[&#34;54.772491500471865&#34;,&#34;54.6126288550714&#34;,&#34;54.39386050530093&#34;,&#34;54.14825733323265&#34;,&#34;54.255627130760054&#34;,&#34;54.798824904486764&#34;,&#34;55.28575517141894&#34;,&#34;55.13533040428158&#34;,&#34;55.43272303660366&#34;,&#34;55.12366968257936&#34;,&#34;55.041268165468246&#34;,&#34;54.76702260252329&#34;,&#34;54.612683718253066&#34;,&#34;54.73084890510059&#34;,&#34;55.07467359664748&#34;,&#34;55.12258904806393&#34;,&#34;55.12232719822051&#34;,&#34;55.10748540691841&#34;,&#34;55.01733359597467&#34;,&#34;54.876885804473424&#34;,&#34;54.85576050348866&#34;,&#34;55.096674446643746&#34;,&#34;55.35611005385607&#34;,&#34;54.96784781952569&#34;,&#34;54.84449264613283&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/omwkOTglq+elrond-egld&#34;,&#34;24hVolume&#34;:&#34;79993091&#34;,&#34;btcPrice&#34;:&#34;0.002745338662584365&#34;},{&#34;uuid&#34;:&#34;GSCt2y6YSgO26&#34;,&#34;symbol&#34;:&#34;CHZ&#34;,&#34;name&#34;:&#34;Chiliz&#34;,&#34;color&#34;:&#34;#d05e72&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/gTsOlSnwR/4066.png&#34;,&#34;marketCap&#34;:&#34;1280569722&#34;,&#34;price&#34;:&#34;0.2155524581948288&#34;,&#34;listedAt&#34;:1562332440,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.31&#34;,&#34;rank&#34;:47,&#34;sparkline&#34;:[&#34;0.2168847528826314&#34;,&#34;0.2170843186771997&#34;,&#34;0.21526541140557998&#34;,&#34;0.2157234313328782&#34;,&#34;0.21663082409427212&#34;,&#34;0.21739445068217675&#34;,&#34;0.21886323194001345&#34;,&#34;0.21955587559095596&#34;,&#34;0.2197380199024719&#34;,&#34;0.2190179121601352&#34;,&#34;0.21830866175156532&#34;,&#34;0.21787031346559602&#34;,&#34;0.21679158202430746&#34;,&#34;0.21600225868090728&#34;,&#34;0.21587704160172458&#34;,&#34;0.2158448062065273&#34;,&#34;0.21568131629647883&#34;,&#34;0.21628666481515962&#34;,&#34;0.21575577092565493&#34;,&#34;0.21492437995400548&#34;,&#34;0.21514404501911413&#34;,&#34;0.2171108493305216&#34;,&#34;0.21771656940310347&#34;,&#34;0.21679986568652215&#34;,&#34;0.21607273994568685&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz&#34;,&#34;24hVolume&#34;:&#34;235249948&#34;,&#34;btcPrice&#34;:&#34;0.000010761807261441&#34;},{&#34;uuid&#34;:&#34;pxtKbG5rg&#34;,&#34;symbol&#34;:&#34;SAND&#34;,&#34;name&#34;:&#34;The Sandbox&#34;,&#34;color&#34;:&#34;#00adef&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/kd_vwOcnI/sandbox.png&#34;,&#34;marketCap&#34;:&#34;1270381178&#34;,&#34;price&#34;:&#34;0.8472200188493824&#34;,&#34;listedAt&#34;:1613583024,&#34;tier&#34;:1,&#34;change&#34;:&#34;-2.04&#34;,&#34;rank&#34;:48,&#34;sparkline&#34;:[&#34;0.8662372397723572&#34;,&#34;0.8640967954378587&#34;,&#34;0.8585899768679298&#34;,&#34;0.8600201705460304&#34;,&#34;0.8613894504696452&#34;,&#34;0.8657826316529281&#34;,&#34;0.8666978968431461&#34;,&#34;0.8665742629116818&#34;,&#34;0.8661387704849524&#34;,&#34;0.8669151762173647&#34;,&#34;0.8642951367281536&#34;,&#34;0.8597633681665815&#34;,&#34;0.8594894861007909&#34;,&#34;0.8662535514126233&#34;,&#34;0.8588847882234059&#34;,&#34;0.8544149170251873&#34;,&#34;0.8528484459196816&#34;,&#34;0.8567742977148085&#34;,&#34;0.8559971556239261&#34;,&#34;0.8526369746427614&#34;,&#34;0.8503963749700182&#34;,&#34;0.8514893353210455&#34;,&#34;0.8513642787546029&#34;,&#34;0.8508505323793061&#34;,&#34;0.8483933250963328&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand&#34;,&#34;24hVolume&#34;:&#34;80636351&#34;,&#34;btcPrice&#34;:&#34;0.000042298838191167&#34;},{&#34;uuid&#34;:&#34;Pe93bIOD2&#34;,&#34;symbol&#34;:&#34;LDO&#34;,&#34;name&#34;:&#34;Lido DAO Token&#34;,&#34;color&#34;:&#34;#77cced&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png&#34;,&#34;marketCap&#34;:&#34;1213105246&#34;,&#34;price&#34;:&#34;1.5082327665030524&#34;,&#34;listedAt&#34;:1627361901,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.64&#34;,&#34;rank&#34;:49,&#34;sparkline&#34;:[&#34;1.5264620522764079&#34;,&#34;1.5169889431407702&#34;,&#34;1.514815885798867&#34;,&#34;1.5192756892130144&#34;,&#34;1.5249759691093254&#34;,&#34;1.540406741914171&#34;,&#34;1.5548374133624372&#34;,&#34;1.556582015073977&#34;,&#34;1.563313056474425&#34;,&#34;1.5606864809598795&#34;,&#34;1.5643757134332952&#34;,&#34;1.5472145671770638&#34;,&#34;1.5395769620786295&#34;,&#34;1.5413748243293799&#34;,&#34;1.5406687905041778&#34;,&#34;1.5536997118197664&#34;,&#34;1.5585509390347834&#34;,&#34;1.5605461378658754&#34;,&#34;1.556322526404288&#34;,&#34;1.5432139594119398&#34;,&#34;1.527711427666444&#34;,&#34;1.5295360489082588&#34;,&#34;1.5251991365229256&#34;,&#34;1.523882390305484&#34;,&#34;1.5152199119209957&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo&#34;,&#34;24hVolume&#34;:&#34;9420143&#34;,&#34;btcPrice&#34;:&#34;0.000075300975337636&#34;},{&#34;uuid&#34;:&#34;iAzbfXiBBKkR6&#34;,&#34;symbol&#34;:&#34;EOS&#34;,&#34;name&#34;:&#34;EOS&#34;,&#34;color&#34;:&#34;#443f54&#34;,&#34;iconUrl&#34;:&#34;https://cdn.coinranking.com/PqOYrWSje/eos2.svg&#34;,&#34;marketCap&#34;:&#34;1156681628&#34;,&#34;price&#34;:&#34;1.170120302982607&#34;,&#34;listedAt&#34;:1498694400,&#34;tier&#34;:1,&#34;change&#34;:&#34;-0.39&#34;,&#34;rank&#34;:50,&#34;sparkline&#34;:[&#34;1.176144663806434&#34;,&#34;1.1710841823223916&#34;,&#34;1.1694666061233425&#34;,&#34;1.1716686337875348&#34;,&#34;1.1744690272298421&#34;,&#34;1.1797882879344748&#34;,&#34;1.1852495425709062&#34;,&#34;1.1853727662761209&#34;,&#34;1.1867848194424315&#34;,&#34;1.1885419549538256&#34;,&#34;1.1868966006158645&#34;,&#34;1.181552351792292&#34;,&#34;1.1769635624968604&#34;,&#34;1.17614591514241&#34;,&#34;1.1773458464363997&#34;,&#34;1.1770861707666584&#34;,&#34;1.1811474861902838&#34;,&#34;1.1833592012519114&#34;,&#34;1.1818251357201783&#34;,&#34;1.1782503602022067&#34;,&#34;1.176960097898779&#34;,&#34;1.1767921922729265&#34;,&#34;1.1759604894059537&#34;,&#34;1.1750064515228658&#34;,&#34;1.1729163746108195&#34;],&#34;lowVolume&#34;:false,&#34;coinrankingUrl&#34;:&#34;https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos&#34;,&#34;24hVolume&#34;:&#34;253447585&#34;,&#34;btcPrice&#34;:&#34;0.000058420160358439&#34;}]}} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) # prints the name of each type of bitcoin in the database, with the Icon URL and Rank URL of each type underneath the name except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20029.392179057646 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1357.6485041155122 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.001071028357668 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0009827471883062 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 292.9853132704932 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.4946339678281492 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0009374128999708 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.42872694867780425 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.675844527260054 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.06376141910465474 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8404795037695242 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.384280071801486 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.00001128324794062 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.000570450749159 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06252708822599085 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1358.9688222082978 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.894020122063479 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.158675617919222 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 20028.855538247128 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.103803950679156 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.652334369321018 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 54.06370736300305 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.678566252019138 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 27.953939321518934 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 145.4330391999523 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.3502871452525357 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.12010666028122727 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 120.05434571253869 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20060.442274396293 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb NEAR 3.641580551056011 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near CRO 0.10980286985731572 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro LUNC 0.000290737400138069 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8033266385015005 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.6962053096925191 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.175876690094942 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.536278289924524 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.036699371836296 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023543047797492656 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.719252048982707 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.7000854070071796 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.7632996320832136 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.05792718953571414 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0000747739721663 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 138.24368254540943 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt XTZ 1.4315350379639447 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz EGLD 54.98746473723186 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld CHZ 0.2155524581948288 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.8472200188493824 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.5082327665030524 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.170120302982607 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. . import requests url = &quot;https://tasty.p.rapidapi.com/recipes/auto-complete&quot; querystring = {&quot;prefix&quot;:&quot;chicken soup&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;2b7a1e07f1msheec8b665a35f05fp1a1019jsn337f301b5a47&quot;, &quot;X-RapidAPI-Host&quot;: &quot;tasty.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;results&#34;:[{&#34;display&#34;:&#34;chicken noodle soup&#34;,&#34;search_value&#34;:&#34;chicken noodle soup&#34;,&#34;type&#34;:&#34;ingredient&#34;},{&#34;display&#34;:&#34;chicken soup&#34;,&#34;search_value&#34;:&#34;chicken soup&#34;,&#34;type&#34;:&#34;ingredient&#34;},{&#34;display&#34;:&#34;chicken tortilla soup&#34;,&#34;search_value&#34;:&#34;chicken tortilla soup&#34;,&#34;type&#34;:&#34;ingredient&#34;}]} . import requests import json url = &quot;https://tasty.p.rapidapi.com/recipes/auto-complete&quot; querystring = {&quot;prefix&quot;:&quot;chicken soup&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;2b7a1e07f1msheec8b665a35f05fp1a1019jsn337f301b5a47&quot;, &quot;X-RapidAPI-Host&quot;: &quot;tasty.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) print(&quot;Soups&quot;) results = response.json().get(&#39;results&#39;) for display in results: if results [&quot;display&quot;] == &quot;chicken soup&quot;: json_formatted_str = json.dumps(results [&quot;results&quot;], indent=4) print (json_formatted_str) . {&#34;results&#34;:[{&#34;search_value&#34;:&#34;chicken noodle soup&#34;,&#34;type&#34;:&#34;ingredient&#34;,&#34;display&#34;:&#34;chicken noodle soup&#34;},{&#34;type&#34;:&#34;ingredient&#34;,&#34;display&#34;:&#34;chicken soup&#34;,&#34;search_value&#34;:&#34;chicken soup&#34;},{&#34;display&#34;:&#34;chicken tortilla soup&#34;,&#34;search_value&#34;:&#34;chicken tortilla soup&#34;,&#34;type&#34;:&#34;ingredient&#34;}]} Soups . TypeError Traceback (most recent call last) /home/shreyasapkal/shreya-2/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb Cell 13 in &lt;cell line: 22&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; results = response.json().get(&#39;results&#39;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; for display in results: &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; if results [&#34;display&#34;] == &#34;chicken soup&#34;: &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; json_formatted_str = json.dumps(results [&#34;results&#34;], indent=4) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/shreyasapkal/shreya-2/_notebooks/2022-10-06-PBL-python_rapidapi.ipynb#X15sdnNjb2RlLXJlbW90ZQ%3D%3D?line=24&#39;&gt;25&lt;/a&gt; print (json_formatted_str) TypeError: list indices must be integers or slices, not str .",
            "url": "https://rey444.github.io/shreya/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter z is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): # % sign is a division sign evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . # old version with repeating multiples of 10 numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: # if it is divisible by 5, it will append the list newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: # or else if it is divisible by 2, it will also append the list newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . # new version with no repeats for multiples of 10 numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: # if it is divisible by 5, it will append the list newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: # or else if it is divisible by 2, it will also append the list newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . # new version without 0 in the list # 0 is involved in the list &quot;numbers&quot;, so we need to make the code omit the 0 numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 # using del list[0] to perform removal for i in numbers: if numbers[i] % 5 == 0: # if it is divisible by 5, it will append the list newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: # or else if it is divisible by 2, it will also append the list newNumbers.append(numbers[i]) del newNumbers[0] # deletes 0 from the list to be printed print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu. Once you are done selecting items, type &#39;done&#39;&quot;) # create an if loop if item.lower() == &quot;burger&quot;: # .lower() allows the same output whether the person types upper or lowercase print(&quot;1 burger: $3.99&quot;) total = total + 3.99 elif item.lower() == &quot;fries&quot;: # create an if loop for fries print(&quot;1 fries: $1.99&quot;) total = total + 1.99 elif item.lower() == &quot;drink&quot;: # create an if loop for drinks print(&quot;1 drink: $0.99&quot;) total = total + 0.99 elif input: print(&quot;You misspelled that&quot;) #code should add the price of the menu items selected by the user print(&quot;Your total is $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 1 burger: $3.99 Your total is $3.99 . Menu w/ Multiple User Prompts &amp; Final Cost Calculator . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} # use of dictionary total = 0 #shows the user the menu and prompts them to select an item print(&quot;Shreya&#39;s Restaurant Menu&quot;) for k,v in menu.items(): # &quot;k&quot; is the item name, &quot;v&quot; is the price. &quot;k&quot; stands for key and &quot;v&quot; stands for value. print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select items from the menu. Once you are done selecting items, type &#39;done&#39;&quot;) item = input(&quot;Please select items from the menu. Once you are done selecting items, type &#39;done&#39;&quot;) while True: # Loop continuously inp = input() # Get the input if inp == &quot;burger&quot;: # input for burger print(&quot;1 burger: $3.99&quot;) total = total + 3.99 elif inp == &quot;fries&quot;: # input for fries print(&quot;1 fries: $1.99&quot;) total = total + 1.99 elif inp == &quot;drink&quot;: # input for a drink print(&quot;1 drink: $0.99&quot;) total = total + 0.99 elif inp == &quot;done&quot;: # input for completing the order break # stop asking the user for inputs # print the total order cost print(&quot;Your total is $&quot; + str(total)) . Shreya&#39;s Restaurant Menu burger $3.99 fries $1.99 drink $0.99 Please select items from the menu. Once you are done selecting items, type &#39;done&#39; 1 burger: $3.99 1 fries: $1.99 1 drink: $0.99 1 fries: $1.99 Your total is $8.96 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://rey444.github.io/shreya/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Tri 1 Week 6 - MCQ Practice",
            "content": ".",
            "url": "https://rey444.github.io/shreya/collegeboard/2022/10/01/collegeboard-mc-1.html",
            "relUrl": "/collegeboard/2022/10/01/collegeboard-mc-1.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": ".2 Ap Daily Videos",
            "content": "1.2: Program Function &amp; Purpose . Video 1 . Learning how to describe the purpose of a computing innovation . | All computing innovations are developed for a purpose, and this purpose guides the creation of the innovation . | The purpose of computing innovations is to solve problems or to pursue interests through creative expression . | Understanding the purpose of a computing innovation helps developers improve their ability to develop that innovation . | Categories of Computing innovations . Applications . Games . | Social media . | Business productivity . | . | Physical devices . Computers . | Smart phones/tablets . | Wearables . Smart watch . | . | Smart “things” . Smart doorbells, smart thermostats, smart refrigerators, etc . | . | Helps you do things you couldn’t do before . | . | Systems . E-commerce . | Cloud services . | E-mail . | . | . | Guiding questions: . Why does the computing innovation exist? . | What problems does the computing innovation solve? . | What does the computing innovation allow us to do that we couldn’t do before? . | . | Investigate Examples of Computing Innovations &amp; Describe the purpose of the following computing innovations . Social Media Applications . To enable faster communication between people across the world . | To solve the problem of a lack of communication . | Allows us to have instant outreach and communicate with others instantly . | Allows users to connect from a distance &amp; archive/document their activities . | . | E-commerce . To connect shoppers with goods and services from their comfort of their homes . | Allow for better communication between producers &amp; consumers . | Allow for less warehouse space needs . | Allows for better customer service &amp; feedback to producers . | Allows users to save time &amp; money by being able to shop from home . | . | Digital Assistant Device . Allows users to control their devices hands-free, making them safer to use while driving or more convenient when trying to multitask . | . | . | .",
            "url": "https://rey444.github.io/shreya/2022/09/30/.2-AP-Daily-Videos.html",
            "relUrl": "/2022/09/30/.2-AP-Daily-Videos.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": ".1 Ap Daily Videos",
            "content": "1.1: Collaboration &amp; Why it’s Important for the Industry . Video 1 . Example: Facebook . Special areas that encourage collaboration . | . | Effective collaboration produces computing innovation that reflects the diversity of talents and perspectives of those who design it . | Computing innovation . Program as an integral part of its function . | Can be physical (ex. Self-driving cars), non-physical computing software, or a computing concept like e-commerce . | . | Super Mario Brothers 3 . Kensuke Tanabe &amp; Shigeru Miyamoto collaborated to use both their ideas for how game levels should be structured to make SMB3 . | Tanabe liked vertical (up-down) levels . | Miyamoto liked horizontal (left-right) levels . | Characters could move up, down, left, right, etc. . | . | Collaboration w/ people w/ diverse perspectives helps avoid bias in development of computing innovations . | Practice: What are the benefits of collaborating with your peers? . B: Effective collaboration produces computing innovation that reflects the diversity of talents and perspectives of those who design it . | . | Takeaways . Interpersonal skills learned through collaboration: . Communication . | Consensus building . | Conflict resolution . | Negotiation . | Matter in all fields . | . | . | . Video 2 . Pair programming: when two programmers work together as a pair . Driver: writes the program code . | observer/Pointer/navigator: reviews each line of program code as it is typed in, helps the driver when they need it, provides their perspective . | . | Think-pair-share: think through a problem alone –&gt; pair with a partner to share ideas –&gt; share results with the class . Ex. like charades . | The thoughts and ideas of others help you come up with new things . | . | Leave comments in code . Helps communicate with partner . | Helps you communicate/remember your ideas for yourself . | Acknowledge code segments used from other sources; reference where U got them from . | Acknowledge media used from other sources: reference where u got them from in a comment . | Differentiate what you did and what your partner(s) did . | Clarify the functionality of your code . | . | Tools to help collaborate in class . Repl.it . | GitHub - collaboration &amp; repository . Repository = a place where you can put all your projects and get comments/feedback on them . | . | Shared document or folder . | Ask friends to test drive program &amp; give feedback . | . | Takeaways . Consultation &amp; communication with users are important aspects of the development of computing innovations . | Information gathered from potential users can be used to understand the purpose of a program from diverse perspectives &amp; to develop a program that fully incorporates these perspectives . | Online tools support collaboration by allowing programmers to share &amp; provide feedback to each other . | . | .",
            "url": "https://rey444.github.io/shreya/2022/09/30/.1-AP-Daily-Videos.html",
            "relUrl": "/2022/09/30/.1-AP-Daily-Videos.html",
            "date": " • Sep 30, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Tri 1 Week 6 - Big Idea 1 - Program Design Lecture Notes",
            "content": "uniform modeling language = what kind of data we would need in order to create the program; splitting up the data to model what’s in the program | you can track and outline multiple attributes through uniform modeling language outlines | think about data behavior, data interaction, or data description | Modeling and UML help with visualization | wire frames = screens that show how your program would look/work; outline what the project will look like | . UML Image . .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/09/27/program-design-notes.html",
            "relUrl": "/t1notes/2022/09/27/program-design-notes.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Create Performance Task brainstorming",
            "content": "Program that uses various parameters (price, fuel efficiency, special features, reviews, capacity) to suggest users which car model they should buy |",
            "url": "https://rey444.github.io/shreya/tri1/2022/09/27/create-task-ideas.html",
            "relUrl": "/tri1/2022/09/27/create-task-ideas.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Tri 1 Week 5 - Javascript Tutorial & Practice",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Good afternoon, World!&quot;); //python equivalent = print(&quot;insert text here&quot;) // console log helps us debug our pages . Good afternoon, World! . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . //python equivalent: msg = &quot;Goodnight, World!&quot;; var msg = &quot;kachow&quot;; //remember to put semicolons! console.log(msg); . kachow . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); //message becomes the output of the function //in jupyter notebooks, you don&#39;t need to re-define the variable, because we ran the cells above that already have the variable &quot;msg&quot; defined . kachow . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); //defining logIt logIt(2022) . Reuse of logIT Hello, Students! 2022 . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of output types in JavaScript&quot;) //calling all the logIt types logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // List -- called an &quot;object&quot; in the output -- Object is generic for this Array, which similar to Python List // there are different names for the types of print outputs, like string, number, and object . Looking at dynamic nature of output types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person // critical part of every programming language is data function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person // starting a function called .toJSON // JSON is a way for us to share data Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mrs. Derksen&quot;, &quot;none&quot;, 1990); teacher.setRole(&quot;Teacher&quot;); // output of converting the Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet; data shows up as text on the internet . object ; Person { name: &#39;Mrs. Derksen&#39;, ghID: &#39;none&#39;, classOf: 1990, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mrs. Derksen&#34;,&#34;ghID&#34;:&#34;none&#34;,&#34;classOf&#34;:1990,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Shreya&quot;, &quot;rey444&quot;, 2023), new Person(&quot;Jiya&quot;, &quot;jiya-sav&quot;, 2023), new Person(&quot;Sanika&quot;, &quot;sanikasha&quot;, 2023), new Person(&quot;Noor&quot;, &quot;Nope1013&quot;, 2023), new Person(&quot;Vaishavi&quot;, &quot;vaishavi-chan&quot;, 2023), new Person(&quot;Rahul&quot;, &quot;protein-shake&quot;, 2023), new Person(&quot;Sohni&quot;, &quot;ok i pull up&quot;, 2023) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mrs. Derksen&#39;, ghID: &#39;none&#39;, classOf: 1990, role: &#39;Teacher&#39; }, Person { name: &#39;Shreya&#39;, ghID: &#39;rey444&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Jiya&#39;, ghID: &#39;jiya-sav&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Sanika&#39;, ghID: &#39;sanikasha&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Noor&#39;, ghID: &#39;Nope1013&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Vaishavi&#39;, ghID: &#39;vaishavi-chan&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Rahul&#39;, ghID: &#39;protein-shake&#39;, classOf: 2023, role: &#39;Student&#39; }, Person { name: &#39;Sohni&#39;, ghID: &#39;ok i pull up&#39;, classOf: 2023, role: &#39;Student&#39; } ] string ; Mrs. Derksen string ; {&#34;name&#34;:&#34;Mrs. Derksen&#34;,&#34;ghID&#34;:&#34;none&#34;,&#34;classOf&#34;:1990,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mrs. Derksen&#39;, ghID: &#39;none&#39;, classOf: 1990, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom // converting the javascript data to HTML for organization is at end, using &quot;$$.html is IJavaScript HTML interpreter&quot; Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure // defining variable &quot;style&quot; var style = ( &quot;display:inline-block;&quot; + &quot;background:MediumPurple;&quot; + // to change the color, search up &quot;HTML color codes&quot; and type the name of the color you want &quot;border: 8px black;&quot; + &quot;fontcolor: black&quot; + &quot;box-shadow: 0.5em 0.5em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) // concatenations = adding/building stuff var body = &quot;&quot;; // using &quot;&quot; to define the variable allows us to have multiple outputs for the variable // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; // tr = table rows body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; // th = table headings body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark style=&#39;color: black; background-color:pink&#39;&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; // td = table data body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mrs. Derksen | none | 1990 | Teacher | Shreya | rey444 | 2023 | Student | Jiya | jiya-sav | 2023 | Student | Sanika | sanikasha | 2023 | Student | Noor | Nope1013 | 2023 | Student | Vaishavi | vaishavi-chan | 2023 | Student | Rahul | protein-shake | 2023 | Student | Sohni | ok i pull up | 2023 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/09/25/js-tutorial.html",
            "relUrl": "/t1notes/2022/09/25/js-tutorial.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "My JavaScript Calculator",
            "content": "function display(val) { document.getElementById(&quot;textval&quot;).value += val } function evaluate() { let x = document.getElementById(&quot;textval&quot;).value let y = eval(x) document.getElementById(&quot;textval&quot;).value = y } function clr() { document.getElementById(&quot;textval&quot;).value = &quot;&quot; } // defining our calculator function function myCalc() { var style1 = ( &quot;input[type=&#39;button&#39;]&quot; + &quot;{border-radius: 10px;background-color: blue;color: white; border-color: #pink; width: 100%;}&quot; ); var style2=( &quot;input[type=&#39;text&#39;]&quot; + &quot;{border-radius: 10px;text-align: right;background-color: yellow;color: white;border-color: white;width: 100%}&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // making a header body += &quot;&lt;p&gt;Calculator&lt;/p&gt;&quot;; body += &quot;&lt;div class=title&gt;A JS Calculator&lt;/div&gt;&quot;; body += &quot;&lt;table border=&#39;1&#39;&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;c&#39; onclick=&#39;clr()&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td colspan=&#39;3&#39;&gt;&lt;input type=&#39;text&#39; id=&#39;textval&#39; /&gt;&lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;+&#39; onclick=&#39;display(&#39;+&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;1&#39; onclick=&#39;display(&#39;1&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;2&#39; onclick=&#39;display(&#39;2&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;3&#39; onclick=&#39;display(&#39;3&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;-&#39; onclick=&#39;display(&#39;-&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;4&#39; onclick=&#39;display(&#39;4&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;5&#39; onclick=&#39;display(&#39;5&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;6&#39; onclick=&#39;display(&#39;6&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;*&#39; onclick=&#39;display(&#39;*&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;7&#39; onclick=&#39;display(&#39;7&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;8&#39; onclick=&#39;display(&#39;8&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;9&#39; onclick=&#39;display(&#39;9&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;/&#39; onclick=&#39;display(&#39;/&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;.&#39; onclick=&#39;display(&#39;.&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;0&#39; onclick=&#39;display(&#39;0&#39;)&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&lt;input type=&#39;button&#39; value=&#39;=&#39; onclick=&#39;evaluate()&#39; /&gt; &lt;/td&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; body += &quot;&lt;/table&gt;&quot;; // Build and HTML fragment of div, table, table body return ( &quot;&lt;div&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(myCalc()); . &lt;divCalculator . A JS Calculator | | . &lt;input type=&#39;button&#39; value=&#39;+&#39; onclick=&#39;display(&#39;+&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;1&#39; onclick=&#39;display(&#39;1&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;2&#39; onclick=&#39;display(&#39;2&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;3&#39; onclick=&#39;display(&#39;3&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; value=&#39;-&#39; onclick=&#39;display(&#39;-&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;4&#39; onclick=&#39;display(&#39;4&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;5&#39; onclick=&#39;display(&#39;5&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;6&#39; onclick=&#39;display(&#39;6&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; value=&#39;*&#39; onclick=&#39;display(&#39;*&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;7&#39; onclick=&#39;display(&#39;7&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;8&#39; onclick=&#39;display(&#39;8&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;9&#39; onclick=&#39;display(&#39;9&#39;)&#39; /&gt; | . &lt;input type=&#39;button&#39; value=&#39;/&#39; onclick=&#39;display(&#39;/&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;.&#39; onclick=&#39;display(&#39;.&#39;)&#39; /&gt; | &lt;input type=&#39;button&#39; value=&#39;0&#39; onclick=&#39;display(&#39;0&#39;)&#39; /&gt; | | . &lt;/div&gt; .",
            "url": "https://rey444.github.io/shreya/tri1/2022/09/25/js-calculator.html",
            "relUrl": "/tri1/2022/09/25/js-calculator.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Quiz Program Design w/ App Lab on Code.org",
            "content": "Code.org Lecture Notes . Debug Consoles help us determine whether or not our code is working, and also to identify areas where we messed up the code | . Program Purpose &amp; Function . Purpose: To quiz users on Okinawan Goju-Ryu Karate &amp; The Karate Kid. | Functionality: Take the user through a series of quiz pages with different questions and answer options on each page. Keep the user’s score and tell it to them at the end. Allow an opportunity to play the game again. | Input: User clicking on labeled buttons | Output: Program brings the screen for the next question, correct/incorrect answer screen, or the final score calculators screen | . Data Abstraction . Data is stored as a variable which counts the user’s score as they move through the quiz | The code segments on the final score screens print the score variable, thus showing it’s use in fulfilling the program’s purpose of quizzing the user and giving them a score | The variable is called “score” and is defined at the top of the program | The data contained in the variable “score” is the amount of points the user gathers by answering correct questions in the quiz | . Managing Complexity . My program doesn’t use a list being used to manage complexity in the program | . Procedural Abstraction . Each code segment which responds to the user clicking an answer choice button uses parameters. For example, when the user clicks the correct answer, the program adds 1 to their score and moves to the “correct answer” screen. On the other hand, when the user clicks any one of the 3 incorrect answer options, the program does not add 1 to their score and moves on to the “incorrect answer” screen. The parameter is whether the user selects the correct answer option, and the procedure that is impacted is the addition of the score and the next screen to display. | . Algorithm Implementation . My program does not use an algorithm, I think | . Testing . I included two console log message outputs to ensure that the code works when the user clicks the correct answer option for questions 1 and 2 | . Program Design Process/Flowchart . Link to code.org quiz . Program Design Flowchart . . Key Learnings . Organizing program paths in flowcharts makes it easy to understand what steps the program is taking &amp; how it responds to the user | Keeping a consistent method of naming buttons/images/pages/variables throughout the quiz makes it easier to call functions for each quiz page |",
            "url": "https://rey444.github.io/shreya/tri1/2022/09/08/code.org-quiz-design.html",
            "relUrl": "/tri1/2022/09/08/code.org-quiz-design.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Tri 1 Week 3 - Create Performance Task Notes",
            "content": "Create Performance Task Design . 6 Steps: . Program purpose &amp; function why you are making the program | purpose = why you are making it | function = what it does | . | Data Abstraction how do we make it so that data is separated from the code; storing variables, storing data in dictionaries etc. | . | Managing Complexity keeping data out of hard code | . | Procedural Abstraction using functions &amp; making loops to go through procedures rather than listing steps over and over again | . | Algorithm Implementation implementing an algorithm in your code; ex. the score calculator at the end of the quizzes we’ve been making | . | Testing debugging | checking to make sure everything works | . | Link to Resources/Project Description . AP Exam Create Task Project Description .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/09/07/create-task-lecture-copy.html",
            "relUrl": "/t1notes/2022/09/07/create-task-lecture-copy.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Customizations",
            "content": "Changing to Merlot Theme . Open config.yml | Open this link and scroll down to README.md | Change remote_theme | Add designated Plugin | . How Merlot Theme Looks . . . Reverting Back to Minima Theme . Go back to config.yml | Change remote_theme as shown in the image below | Delete the plugin | .",
            "url": "https://rey444.github.io/shreya/tri1/2022/09/04/layout-theme.html",
            "relUrl": "/tri1/2022/09/04/layout-theme.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Tri 1 Week 2 - Lists & Dictionaries Notes",
            "content": "jekyll: the coding language that allows you to do actions like committing changes/pushing changes to github | for statements: loops, iterates | if statements: conditional, branches code | HTML Fragments: all our posts are small fragments of code and files that go into the system and are processed to convert to HTML | img. tag: helps you control the size of the images you post | procedural abstraction: when we write code sections (called “procedures” or in Java, “static methods”) which are generalized by having variable parameters; The idea is that we have code which can cope with a variety of different situations, depending on how its parameters are set when it is called. | .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/09/04/Lists-Dictionaries.html",
            "relUrl": "/t1notes/2022/09/04/Lists-Dictionaries.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Alumni Panel Notes",
            "content": "Alumni Panel Tips Notes . Must learn programming going into other engineering fields . | . Facing Challenges in Class . Googling solutions on the internet helps overcome challenges in class . | Keep trying to solve the problem at hand . | Focus on your own path, and don’t be discouraged if others do something that’s better than your work or have higher accomplishments . There’s always going to be someone better than you! . | . | Think through problems and flowchart your work + use google to help you solve problems . | Don’t be afraid to ask for help from people who know how to do it . | Don’t cut corners, have the mindset to go above and beyond . | There isn’t only one correct answer/way to do something in CS . | Just start coding, and troubleshoot problems as you go . | . Mechanical Engineering . UCSD: one hands-on project for freshman and senior year each . | . Project Based Learning in College . Communicate with team members daily . | Study in groups and work with others, especially for the first couple years of college (and for general education courses . | . Coding . Knowing how to code helps you do math in the forms of vectors and matrices . | Can code out what your object will look like for 3D printing . | Problem solving knowledge besides coding also helps in other classes . | Jupyter notebooks are being used for technical papers for interactive work . | Stats major: some projects are done in R . | Matlab is used in many fields, as well as CS . | . How to Get a Job or Internship as a College Student . Show up to office hours . | Ask teachers questions . | Stand out to your teacher and set yourself apart from other students . | Many companies look for interns starting in September when the school year starts . | Have a resume ready by early September of the year before when you want to work/intern . | Create a LinkedIn profile . | Build a network of people you know to reach out to get job/internship opportunities . Parents, friend’s parents, professors, engineers you know . | . | Getting a referral from someone who works at the company is a good idea . | . UCSD . Autonomous car projects: go-kart and indy500 autonomous cars . Triton AI . | . | Can ask professor if there’s any space in the lab for you to intern . | . Python scripting, web development, IT tools, how Linux works: all helps in college . Colin used these skills at his internship at Northrup Grumman: technical diagrams, website for flight data that takes information from the test database, scripting . | . | . Working on Personal Projects . Many companies look for personal projects that you’ve done or made . Help set you apart from other applicants to college/jobs/internships . | . | Visual projects are great - ex. Algorithm visualizers . | Can even make something fun; doesn’t have to be very life changing . | Sorting algorithms, travelling salesman problem, data visualization . | Can make scripts to make work on Mechanical Engineering projects easier . Data manipulation . | . | Computation Aided Manufacturing . Editing G-code + manipulating commands . | . | Material simulations . Can help you convert hand functions to actual functions –&gt; set up a server –&gt; run the data . | . | .",
            "url": "https://rey444.github.io/shreya/2022/09/04/Alumni-Panel-Notes.html",
            "relUrl": "/2022/09/04/Alumni-Panel-Notes.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Tri 1 Week 1 - Python Lecture Notes",
            "content": "Python Key Terms . key = a field, or combination of fields, in a database table used to retrieve and sort rows in the table based on certain requirements . | sequence of code = two or more lines of code . | command/function = the code . | static text = what we ask it to print; does not change . | output = varies depending on tools and development intentions; what the code does when you run it . | variable = stores input from the user . | dynamic = the input and output can change each time the code is run . | jupyter notebook input box = obtains input from the user . | terminal = python print usually obtains inputs and outputs to a terminal . |",
            "url": "https://rey444.github.io/shreya/t1notes/2022/08/30/Python-Notes.html",
            "relUrl": "/t1notes/2022/08/30/Python-Notes.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Shreya Sapkal&quot; # name is the key/variable, and &quot;john doe&quot; is the value print(&quot;name&quot;, name, type(name)) # type(name) is an abbreviation for a string of code # variable of type integer age = 17 # integer variable = integers and whole numbers print(&quot;age&quot;, age, type(age)) # variable of type float score = 97.0 # float = more complicated numbers where you have decimal points print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # making a list of items &amp; separating them with commas print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) # index in the list: change the number in the [] here to produce a different element in the list; 0 = 1st element, 1 = 2nd element, etc. print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, # key on the left, values on the right are the values that are going to be assigned &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Shreya Sapkal &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 97.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Shreya Sapkal&#39;, &#39;age&#39;: 17, &#39;score&#39;: 97.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Shreya Sapkal &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . # Define an empty List called InfoDb # 1st item is always 0; python is a zero index language # DICTIONARIES use keys and values to store data # make sure each key has a unique name InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Shreya&quot;, &quot;LastName&quot;: &quot;Sapkal&quot;, &quot;Nicknames&quot;: [&quot;Rey&quot;, &quot;Reyu&quot;, &quot;Shweya&quot;], &quot;DOB&quot;: &quot;December 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shreya.sapkal959@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2013-Ford Escape&quot;, &quot;2020-Chrysler Pacifica&quot;], &quot;Hobbies&quot;: [&quot;Karate&quot;, &quot;Tennis&quot;, &quot;Reading&quot;, &quot;Writing&quot;, &quot;Drawing&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Jiya&quot;, &quot;LastName&quot;: &quot;Savlani&quot;, &quot;Nicknames&quot;: [&quot;Jiyu&quot;], &quot;DOB&quot;: &quot;March 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;starjiyu@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Lambo&quot;, &quot;Miata&quot;], &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;Watching Cobra Kai&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Vaishavi&quot;, &quot;LastName&quot;: &quot;Jayashankar&quot;, &quot;Nicknames&quot;: [&quot;Vaishavi-Chan&quot;, &quot;Vai&quot;, &quot;Vaiu&quot;], &quot;DOB&quot;: &quot;March 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;vaishavi2005@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagen&quot;, &quot;Chevrolet Traverse&quot;], &quot;Hobbies&quot;: [&quot;Music&quot;, &quot;Drawing&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Shreya&#39;, &#39;LastName&#39;: &#39;Sapkal&#39;, &#39;Nicknames&#39;: [&#39;Rey&#39;, &#39;Reyu&#39;, &#39;Shweya&#39;], &#39;DOB&#39;: &#39;December 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;shreya.sapkal959@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2013-Ford Escape&#39;, &#39;2020-Chrysler Pacifica&#39;], &#39;Hobbies&#39;: [&#39;Karate&#39;, &#39;Tennis&#39;, &#39;Reading&#39;, &#39;Writing&#39;, &#39;Drawing&#39;]}, {&#39;FirstName&#39;: &#39;Jiya&#39;, &#39;LastName&#39;: &#39;Savlani&#39;, &#39;Nicknames&#39;: [&#39;Jiyu&#39;], &#39;DOB&#39;: &#39;March 7&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;starjiyu@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Lambo&#39;, &#39;Miata&#39;], &#39;Hobbies&#39;: [&#39;Reading&#39;, &#39;Watching Cobra Kai&#39;]}, {&#39;FirstName&#39;: &#39;Vaishavi&#39;, &#39;LastName&#39;: &#39;Jayashankar&#39;, &#39;Nicknames&#39;: [&#39;Vaishavi-Chan&#39;, &#39;Vai&#39;, &#39;Vaiu&#39;], &#39;DOB&#39;: &#39;March 15&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;vaishavi2005@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagen&#39;, &#39;Chevrolet Traverse&#39;], &#39;Hobbies&#39;: [&#39;Music&#39;, &#39;Drawing&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # given and index this will print InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Nicknames: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Nicknames&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Shreya Sapkal Residence: San Diego Birth Day: December 12 Nicknames: Rey, Reyu, Shweya Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Hobbies: Karate, Tennis, Reading, Writing, Drawing Jiya Savlani Residence: San Diego Birth Day: March 7 Nicknames: Jiyu Cars: Lambo, Miata Hobbies: Reading, Watching Cobra Kai Vaishavi Jayashankar Residence: San Diego Birth Day: March 15 Nicknames: Vaishavi-Chan, Vai, Vaiu Cars: Volkswagen, Chevrolet Traverse Hobbies: Music, Drawing . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # my work: changed variable name def while_loop(): print(&quot;While loop output n&quot;) n = 0 while n &lt; len(InfoDb): record = InfoDb[n] print_data(record) n += 1 return while_loop() . While loop output Shreya Sapkal Residence: San Diego Birth Day: December 12 Nicknames: Rey, Reyu, Shweya Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Hobbies: Karate, Tennis, Reading, Writing, Drawing Jiya Savlani Residence: San Diego Birth Day: March 7 Nicknames: Jiyu Cars: Lambo, Miata Hobbies: Reading, Watching Cobra Kai Vaishavi Jayashankar Residence: San Diego Birth Day: March 15 Nicknames: Vaishavi-Chan, Vai, Vaiu Cars: Volkswagen, Chevrolet Traverse Hobbies: Music, Drawing . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Shreya Sapkal Residence: San Diego Birth Day: December 12 Nicknames: Rey, Reyu, Shweya Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Hobbies: Karate, Tennis, Reading, Writing, Drawing Jiya Savlani Residence: San Diego Birth Day: March 7 Nicknames: Jiyu Cars: Lambo, Miata Hobbies: Reading, Watching Cobra Kai Vaishavi Jayashankar Residence: San Diego Birth Day: March 15 Nicknames: Vaishavi-Chan, Vai, Vaiu Cars: Volkswagen, Chevrolet Traverse Hobbies: Music, Drawing . Quiz using List of Dictionaries . # values will be the correct answers q1 = &quot;&quot;&quot;How many cars does Shreya have? a. 1 b. 2 c. 3 d. none&quot;&quot;&quot; # triple quotation marks allows you to write the question string in multiple lines q2 = &quot;&quot;&quot;What is Jiya&#39;s nickname? a. Jiyu b. Jiji c. Yaya d. She doesn&#39;t have a nickname&quot;&quot;&quot; q3 = &quot;&quot;&quot;What are some of Shreya&#39;s hobbies? a. karate b. tennis c. drawing d. all of the above&quot;&quot;&quot; q4 = &quot;&quot;&quot;Where does Shreya live? a. San Jose b. San Fransisco c. San Diego d. San Clemente&quot;&quot;&quot; q5 = &quot;&quot;&quot;What is Jiya&#39;s favorite TV show? a. Miraculous Ladybug b. Cobra Kai c. Umbrella Academy d. Unlisted&quot;&quot;&quot; questions = {q1:&quot;b&quot;,q2:&quot;a&quot;,q3:&quot;d&quot;,q4:&quot;c&quot;,q5:&quot;b&quot;} # strings are q1, q2, q3, etc, and the values are the correct answers score = 0 name = input(&quot;Please enter your name:&quot;) print(&quot;Please enter your name&quot;) print(&quot;Hello&quot;, name, &quot;welcome to my quiz using a dictionary&quot;) for i in questions: # starting a for loop to print the questions print(i) # i = key = question and its option ans = input(&quot;enter the answer (a/b/c/d):&quot;) # use input function to get a string input print(&quot; t&quot;, &quot;enter answer (a/b/c/d):&quot;) print(&quot; t&quot;, ans) if ans==questions[i]: print(&quot;correct!&quot;) score = score+1 else: print(&quot;incorrect!&quot;) print(&quot;Your final score is:&quot;,score) . Please enter your name Hello Shreya welcome to my quiz using a dictionary How many cars does Shreya have? a. 1 b. 2 c. 3 d. none enter answer (a/b/c/d): b correct! What is Jiya&#39;s nickname? a. Jiyu b. Jiji c. Yaya d. She doesn&#39;t have a nickname enter answer (a/b/c/d): a correct! What are some of Shreya&#39;s hobbies? a. karate b. tennis c. drawing d. all of the above enter answer (a/b/c/d): d correct! Where does Shreya live? a. San Jose b. San Fransisco c. San Diego d. San Clemente enter answer (a/b/c/d): c correct! What is Jiya&#39;s favorite TV show? a. Miraculous Ladybug b. Cobra Kai c. Umbrella Academy d. Unlisted enter answer (a/b/c/d): b correct! Your final score is: 5 . Reversing Data Output Order . # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [20, 21, 22, 23, 24, 25, 26] print(Reverse(lst)) # reverse key . [26, 25, 24, 23, 22, 21, 20] . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://rey444.github.io/shreya/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Python Quiz!",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 question_and_answer = input print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What kernel is used to make sure your code in jupyter notebooks shows up on your fastpages?&quot;) if rsp == &quot;bash&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How can you create a _posts page with an image?&quot;) if rsp == &quot;squiggly brackets&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, shreyasapkal running /home/shreyasapkal/anaconda3/bin/python You will be asked 3 questions. Question: What kernel is used to make sure your code in jupyter notebooks shows up on your fastpages? bash] is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: How can you create a _posts page with an image? squiggly brackets is correct! shreyasapkal you scored 2/3 .",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/28/python-quiz.html",
            "relUrl": "/tri1/2022/08/28/python-quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Play Guess My Number!",
            "content": "Hello From Python . A simple line of code written using python. . print(&quot;Hello World&quot;) . Hello World . The Game . import random print(&quot;Welcome to Guess My Number!&quot;) secret_number = random.randint(1,100) num_guesses = 0 while True: current_guess = int(input(&quot;What is your guess?&quot;)) # num_guesses = num_guesses +1 num_guesses += 1 print(current_guess) if current_guess == secret_number: print(&quot;You are correct!&quot;) break elif current_guess &lt; secret_number: print(&quot;Too low!&quot;) elif current_guess &gt; secret_number: print(&quot;Too high!&quot;) print(f&quot;You took {num_guesses} guesses!&quot;) . Welcome to Guess My Number! 50 Too low! 60 Too high! 55 Too high! 55 Too high! 54 Too high! 53 Too high! 51 Too low! 52 You are correct! You took 8 guesses! .",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/26/first-python-game.html",
            "relUrl": "/tri1/2022/08/26/first-python-game.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "English Essay",
            "content": "Shreya Sapkal . Mrs. DaFoe . APEL: Period 4 . 3 November 2021 . On Demand 3 . During the 1960s, the Green Revolution was well underway. This was an agricultural revolution unlike any other before. Scientists were developing countless pesticides, insecticides, GMO crops, and other innovative technologies to produce higher yields and supposedly feed the world. However, the heavy use of the new insecticides, which were rightly advertised as a “one kills all,” had unforseen detrimental effects on our environment. In her book Silent Spring, American biologist Rachel Carson expounds upon such environmental issues, in order to open the eyes of the American people and draw urgent attention to such issues. Carson makes the American public aware that the use of insecticidal poisons jeapordizes the natural environment and American society, in order to persuade the American public to take a greater part in lobbying for the reduced use of such poisons. . Carson expounds on the drawbacks of using insecticidal poisons frequently on nature as well as the future of American society. She employs an anecdote to explain how even wildlife which is not being targeted directly by the poisons is suffering: “But such rabbits or raccoons or oppossums as may have roamed those bottomlands and perhaps never visited the farmers’ cornfields were doomed by a judge and jury who neigher knew of their existence nor cared” (28-32). In this anecdote, the innocent woodland creatures, or “rabbits,” “raccoons,” or “oppossums,” are on trial in front of a jury which has no regards for their lives or bringing them justice. They are sentenced to succumb to the “universal killer,” or the poison, despite causing no threat to American farmers or communtiies. Carson appeals to her American audience’s shared values of upholding justice and protecting the innocent. She creates a syllogism in that the animals in question likely never traversed on the fields and are innocent. According to American principles of justice and individual rights, the innocent should not be marked guilty. If the animals are innocent, they should not be considered guilty and condemned to death. The judges and juries are supposed to uphold justice and protect the innocent, but in this case, they did not. This goes against American values of liberty and justice under the law, as innocent animals are being killed for no reason due to the heavy use of these poisions, which in turn is harming our environment. The American people value defending the innocent, and hence will realize the negative effects and take a more active role in opposing the use of these pesticides. Carson suggests that if more Americans are aware of these injustices, “care,” and join this “jury,” we will be able to avoid further environmental damage and cruelty to wildlife. Another anecdote is used to invoke a sense of duty within the audience to advocate for reducing the use of pesticidal poisons: “Does Indiana still raise any boys who roam through woods or fields and might even explore margins of a river? If so, who guarded the poisoned area to keep out any who might wander in, in a misguided search for unspoiled nature?” (37-41). Carson appeal to pathos by using a annecdote of children exploring nature and being subject to health risks due to the poison. Children are generally viewed as innocents, and the American people want to protect their children. However, with all of this poision being sprayed everywhere, their children are in danger of “shock” and “death,” which can only be escaped through “skilled medical attention” (36-37). Additionally, such a dangerous poison is being used casually and widely, such as in “woods,” “fields,” or any region of “unspoiled nature.” The American public is further angered that they are not being protected or “guarded” against it, and that their children are in danger. Children also represent the future of America, and it is in jeopardy because of these pesticides. Hence, the American public is pushed to take a greater stand against the use of these pesticides. . Carson highlights the innatention the American people have been giving this issue, in order to persuade them to take a stand against the use of poisonous insecticides so they can protect what is important to them. She first employs a metaphor in the form of a rhetorical question to implore the audience to ponder about why the use of these poisons is so widespread, despite their negative consequences: “Who has made the decision that sets in motion these chains of poisonings, this ever-widening wave of death that spreads out, like ripples, when a pebble is dropped into a still pond?” This metaphor likens the increasing use of poisonous pesticides in America to a ripple in a pond. This metaphor is powerful because it demonstrates how a single instance of this pesticide use has created a vast chain of events. By likening pesticide use to an “ever-widening wave of death,” Carson frightens the American public by suggesting that they have invited death and suffering into their communities. Desiring to protect themselves and those around them, the American public will feel moved to take action to combat the destruction, which can be done by reducing the use of the poisons. Carson draws attention to the idea that many have thusfar been blind to the issue at hand by appealing to the audience’s shared values of reverence for nature and a desire for democracy. “The decision is that of the authoritarian… he has made it during a moment of inattention by millions to whom beauty and the ordered world of nature still have a meaning that is deep and imperative.” Here, Carson specifically uses the term “authoritarian” to refer to those who have approved the casual use of these pesticides. America is founded on the values of democracy, and the American people aim to fight authoritarianism and tyranny. Carson suggests that the American public can oppose this tyranny by opening their eyes and removing their “innattention.” This is an Appeal to shared values: speaker and audience, the “millions,” still care about nature and admire its beautyThis “deep and imperative” connection with nature is being threatened by the decision to use these poisons frequently . American public’s eyes are opened– these pesticides are threatening nature as we know it, and we must lobby for their reduced use to protect what we care about. .",
            "url": "https://rey444.github.io/shreya/2022/08/26/english-essay.html",
            "relUrl": "/2022/08/26/english-essay.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "My Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/shreyasapkal/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # for jupyter kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length of test if [[ ${n} &gt; 0 ]]; # define value of test length, begin while-if-else loop then # if the test legnth is greater than zero echo &quot;$check&quot; # confirmation message else # if the test length is less than zero echo &quot;$test not found&quot; #error message fi # end while-if-else loop . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/shreyasapkal/.local/share/jupyter/kernels/bash javascript /home/shreyasapkal/.local/share/jupyter/kernels/javascript python3 /home/shreyasapkal/.local/share/jupyter/kernels/python3 . Python3 Check . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/shreyasapkal/.local/share/jupyter/kernels/python3 .",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/25/tools-setup-tests.html",
            "relUrl": "/tri1/2022/08/25/tools-setup-tests.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Tri 1 Week 0 - Pseudo Code Notes",
            "content": "pseudo code = non-operational programming language; highlights instructions common for many languages | . AP Exam Resources . AP Exam Reference Sheet . .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/08/24/Pseudo-Code-Notes.html",
            "relUrl": "/t1notes/2022/08/24/Pseudo-Code-Notes.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "My Favorite Cars",
            "content": "My Favorite Cars . Dodge Challenger SRT Hellcat | McLaren Senna | Nissan Skyline GTR | Chrysler Pacifica | Dodge Charger | Toyota Tacoma | Ford Mustang Shelby | Audi R8 | Images . Dodge Challenger SRT Hellcat . . McLaren Senna . . Nissan Skyline GTR . . Chrysler Pacifica . . Dodge Charger . . Toyota Tacoma . . Ford Mustang Shelby . . Audi R81 . . Link to Audi R8 Video! &#8617; . |",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/24/My-Favorite-Cars-List.html",
            "relUrl": "/tri1/2022/08/24/My-Favorite-Cars-List.html",
            "date": " • Aug 24, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": ". . . I enjoy baking, writing, reading, and studying engine maintenance manuals. I’m the co-president of the DNHS Speech &amp; Debate Team, and the co-president of DNHS’ South Asian Student Union (SASU). You can regularly find me hiking or training at Karate. In the future, I aspire to become a Mechanical Engineer and pursue my passion for cars. click to learn more about SASU! 1. . Link to the South Asian Student Union Linktree. &#8617; . |",
          "url": "https://rey444.github.io/shreya/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Trimester 1",
          "content": "Trimester 1 . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Learning Objectives Assignment Links Notes Pages . 0 | Tools Setup, Intro to Fastpages | Changing index.html | First Markdown Post | . | Pseudo Code Notes 1 | Intro to Python, Bash &amp; Checks, Fastpages, Jupyter Notebooks, &amp; Markdown Posts | Key Tools Installation Check Using Bash + Jupyter Notebooks | Published _notebook File | Published _docx file from Google Doc source | First Python Quiz | . | Python Notes 2 | Data Abstraction, Python Lists &amp; Dictionaries, HTML &amp; Markdown Fragments, Customization, Alumni Panel | Alumni Panel Notes | Python Lists &amp; Dictionaries | Changing Theme | . | Python Lists &amp; Dictionaries Notes | 3 | Create Task Introduction, Intro to code.org, Intro to College Board Scoring Rubric, Creating a quiz on code.org, How to plan out a program | My Quiz on code.org | . | Create Task Lecture Notes | 4 | Running a Python Web Server locally, Running a Fastpages Web Server locally, Focus &amp; Habits, Group Repository, Video-Making | Link to My Review Ticket Video | Group Shared/Collaborative Repository | Actions on Shared Repository | . | None | 5 | UI Starters, HTML Python/Flask Personalization &amp; Design Elements, HTML &amp; Javascript Exploration w/ Fastpages, Scrum Team Project Brainstorming &amp; Purpose | JavaScript Exploration Calculator | Group Project Purpose Description | Team Agile Methodology Charts | Modifications to Flask index.html | Modifications to Flask stub.html | . | JavaScript Tutorial &amp; Data Table Creation | 6 | Flask/Python Deployment using Amazon AWS, Program Design, Collegeboard MCQ Practice, Collegeboard Videos | MCQ Practice: Collaboration, Program Function &amp; Purpose, and Program Design &amp; Dev | AP Daily Videos - 1.1 Notes | AP Daily Videos - 1.2 Notes | . | Program Design &amp; UML Lecture Notes | . &lt;/table&gt; ![](/shreya/images/boost.png) . | . | .",
          "url": "https://rey444.github.io/shreya/Trimester%201",
          "relUrl": "/Trimester 1",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Trimester 2",
          "content": "Please see the top of each notes page for the vocab corresponding with each section! . Week Learning Objectives Notes Pages Assignment Links Scores . 0 | 3.3 - 3.7 | 3.3 - 3.4 Notes | 3.5 - 3.7 Notes | . | 3.3 - 3.4 Hacks | 3.5 - 3.7 Hacks | . | 3.3 - 3.4: 0.9/1 | 3.5 - 3.7: 0.95/1 | . | 1 | 3.8 - 3.13 | 3.8 &amp; 3.10 Notes | 3.9 &amp; 3.11 Notes | 3.12 - 3.13 Notes | . | 3.8 &amp; 3.10 Hacks | 3.9 &amp; 3.11 Hacks | 3.12 - 3.13 Hacks | . | 3.8 &amp; 3.10: 0.9/1 | 3.9 &amp; 3.11: 0.9/1 | 3.12 - 3.13: 0.9/1 | . | 2 | 3.14 - 3.18 | 3.14 - 3.15 Notes | 3.16 Notes | 3.17 - 3.18 Notes | . | 3.14 - 3.15 Hacks | 3.16 Hacks | 3.17 - 3.18 Hacks | . | 3.14 - 3.15: 0.9/1 | 3.16: 0.85/1 | 3.17 - 3.18: 0.7/1 | . | .",
          "url": "https://rey444.github.io/shreya/Trimester%202",
          "relUrl": "/Trimester 2",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "JavaScript",
          "content": "Notes from JavaScript Lecture &amp; Data Table Building Using JavaScript | Team Exploration w/ JavaScript: Calculator | .",
          "url": "https://rey444.github.io/shreya/javascript-work/",
          "relUrl": "/javascript-work/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rey444.github.io/shreya/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}