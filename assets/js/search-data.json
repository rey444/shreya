{
  
    
        "post0": {
            "title": "Alumni Panel Notes",
            "content": "Alumni Panel Tips Notes . Must learn programming going into other engineering fields . | . Facing Challenges in Class . Googling solutions on the internet helps overcome challenges in class . | Keep trying to solve the problem at hand . | Focus on your own path, and don’t be discouraged if others do something that’s better than your work or have higher accomplishments . There’s always going to be someone better than you! . | . | Think through problems and flowchart your work + use google to help you solve problems . | Don’t be afraid to ask for help from people who know how to do it . | Don’t cut corners, have the mindset to go above and beyond . | There isn’t only one correct answer/way to do something in CS . | Just start coding, and troubleshoot problems as you go . | . Mechanical Engineering . UCSD: one hands-on project for freshman and senior year each . | . Project Based Learning in College . Communicate with team members daily . | Study in groups and work with others, especially for the first couple years of college (and for general education courses . | . Coding . Knowing how to code helps you do math in the forms of vectors and matrices . | Can code out what your object will look like for 3D printing . | Problem solving knowledge besides coding also helps in other classes . | Jupyter notebooks are being used for technical papers for interactive work . | Stats major: some projects are done in R . | Matlab is used in many fields, as well as CS . | . How to Get a Job or Internship as a College Student . Show up to office hours . | Ask teachers questions . | Stand out to your teacher and set yourself apart from other students . | Many companies look for interns starting in September when the school year starts . | Have a resume ready by early September of the year before when you want to work/intern . | Create a LinkedIn profile . | Build a network of people you know to reach out to get job/internship opportunities . Parents, friend’s parents, professors, engineers you know . | . | Getting a referral from someone who works at the company is a good idea . | . UCSD . Autonomous car projects: go-kart and indy500 autonomous cars . Triton AI . | . | Can ask professor if there’s any space in the lab for you to intern . | . Python scripting, web development, IT tools, how Linux works: all helps in college . Colin used these skills at his internship at Northrup Grumman: technical diagrams, website for flight data that takes information from the test database, scripting . | . | . Working on Personal Projects . Many companies look for personal projects that you’ve done or made . Help set you apart from other applicants to college/jobs/internships . | . | Visual projects are great - ex. Algorithm visualizers . | Can even make something fun; doesn’t have to be very life changing . | Sorting algorithms, travelling salesman problem, data visualization . | Can make scripts to make work on Mechanical Engineering projects easier . Data manipulation . | . | Computation Aided Manufacturing . Editing G-code + manipulating commands . | . | Material simulations . Can help you convert hand functions to actual functions –&gt; set up a server –&gt; run the data . | . | .",
            "url": "https://rey444.github.io/shreya/2022/09/11/Alumni-Panel-Notes.html",
            "relUrl": "/2022/09/11/Alumni-Panel-Notes.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Quiz Program Design w/ App Lab on Code.org",
            "content": "Code.org Lecture Notes . Debug Consoles help us determine whether or not our code is working, and also to identify areas where we messed up the code | . Program Purpose &amp; Function . Purpose: To quiz users on Okinawan Goju-Ryu Karate &amp; The Karate Kid. | Functionality: Take the user through a series of quiz pages with different questions and answer options on each page. Keep the user’s score and tell it to them at the end. Allow an opportunity to play the game again. | Input: User clicking on labeled buttons | Output: Program brings the screen for the next question, correct/incorrect answer screen, or the final score calculators screen | . Data Abstraction . Data is stored as a variable which counts the user’s score as they move through the quiz | The code segments on the final score screens print the score variable, thus showing it’s use in fulfilling the program’s purpose of quizzing the user and giving them a score | The variable is called “score” and is defined at the top of the program | The data contained in the variable “score” is the amount of points the user gathers by answering correct questions in the quiz | . Managing Complexity . My program doesn’t use a list being used to manage complexity in the program | . Procedural Abstraction . Each code segment which responds to the user clicking an answer choice button uses parameters. For example, when the user clicks the correct answer, the program adds 1 to their score and moves to the “correct answer” screen. On the other hand, when the user clicks any one of the 3 incorrect answer options, the program does not add 1 to their score and moves on to the “incorrect answer” screen. The parameter is whether the user selects the correct answer option, and the procedure that is impacted is the addition of the score and the next screen to display. | . Algorithm Implementation . My program does not use an algorithm, I think | . Testing . I included two console log message outputs to ensure that the code works when the user clicks the correct answer option for questions 1 and 2 | . Program Design Process/Flowchart . Link to code.org quiz . Program Design Flowchart . . Key Learnings . Organizing program paths in flowcharts makes it easy to understand what steps the program is taking &amp; how it responds to the user | Keeping a consistent method of naming buttons/images/pages/variables throughout the quiz makes it easier to call functions for each quiz page |",
            "url": "https://rey444.github.io/shreya/tri1/2022/09/08/code.org-quiz-design.html",
            "relUrl": "/tri1/2022/09/08/code.org-quiz-design.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Tri 1 Week 3 - Create Performance Task Notes",
            "content": "Create Performance Task Design . 6 Steps: . Program purpose &amp; function why you are making the program | purpose = why you are making it | function = what it does | . | Data Abstraction how do we make it so that data is separated from the code; storing variables, storing data in dictionaries etc. | . | Managing Complexity keeping data out of hard code | . | Procedural Abstraction using functions &amp; making loops to go through procedures rather than listing steps over and over again | . | Algorithm Implementation implementing an algorithm in your code; ex. the score calculator at the end of the quizzes we’ve been making | . | Testing debugging | checking to make sure everything works | . | Link to Resources/Project Description . AP Exam Create Task Project Description .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/09/07/create-task-lecture-copy.html",
            "relUrl": "/t1notes/2022/09/07/create-task-lecture-copy.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Customizations",
            "content": "Changing to Merlot Theme . Open config.yml | Open this link and scroll down to README.md | Change remote_theme | Add designated Plugin | . How Merlot Theme Looks . . . Reverting Back to Minima Theme . Go back to config.yml | Change remote_theme as shown in the image below | Delete the plugin | .",
            "url": "https://rey444.github.io/shreya/tri1/2022/09/04/layout-theme.html",
            "relUrl": "/tri1/2022/09/04/layout-theme.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Tri 1 Week 2 - Lists & Dictionaries Notes",
            "content": "jekyll: the coding language that allows you to do actions like committing changes/pushing changes to github | for statements: loops, iterates | if statements: conditional, branches code | HTML Fragments: all our posts are small fragments of code and files that go into the system and are processed to convert to HTML | img. tag: helps you control the size of the images you post | procedural abstraction: when we write code sections (called “procedures” or in Java, “static methods”) which are generalized by having variable parameters; The idea is that we have code which can cope with a variety of different situations, depending on how its parameters are set when it is called. | .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/09/04/Lists-Dictionaries.html",
            "relUrl": "/t1notes/2022/09/04/Lists-Dictionaries.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Tri 1 Week 1 - Python Lecture Notes",
            "content": "Python Key Terms . key = a field, or combination of fields, in a database table used to retrieve and sort rows in the table based on certain requirements . | sequence of code = two or more lines of code . | command/function = the code . | static text = what we ask it to print; does not change . | output = varies depending on tools and development intentions; what the code does when you run it . | variable = stores input from the user . | dynamic = the input and output can change each time the code is run . | jupyter notebook input box = obtains input from the user . | terminal = python print usually obtains inputs and outputs to a terminal . |",
            "url": "https://rey444.github.io/shreya/t1notes/2022/08/30/Python-Notes.html",
            "relUrl": "/t1notes/2022/08/30/Python-Notes.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: String, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Shreya Sapkal&quot; # name is the key/variable, and &quot;john doe&quot; is the value print(&quot;name&quot;, name, type(name)) # type(name) is an abbreviation for a string of code # variable of type integer age = 17 # integer variable = integers and whole numbers print(&quot;age&quot;, age, type(age)) # variable of type float score = 97.0 # float = more complicated numbers where you have decimal points print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] # making a list of items &amp; separating them with commas print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) # index in the list: change the number in the [] here to produce a different element in the list; 0 = 1st element, 1 = 2nd element, etc. print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, # key on the left, values on the right are the values that are going to be assigned &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Shreya Sapkal &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 97.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Shreya Sapkal&#39;, &#39;age&#39;: 17, &#39;score&#39;: 97.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Shreya Sapkal &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . # Define an empty List called InfoDb # 1st item is always 0; python is a zero index language # DICTIONARIES use keys and values to store data # make sure each key has a unique name InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Shreya&quot;, &quot;LastName&quot;: &quot;Sapkal&quot;, &quot;Nicknames&quot;: [&quot;Rey&quot;, &quot;Reyu&quot;, &quot;Shweya&quot;], &quot;DOB&quot;: &quot;December 12&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;shreya.sapkal959@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2013-Ford Escape&quot;, &quot;2020-Chrysler Pacifica&quot;], &quot;Hobbies&quot;: [&quot;Karate&quot;, &quot;Tennis&quot;, &quot;Reading&quot;, &quot;Writing&quot;, &quot;Drawing&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Jiya&quot;, &quot;LastName&quot;: &quot;Savlani&quot;, &quot;Nicknames&quot;: [&quot;Jiyu&quot;], &quot;DOB&quot;: &quot;March 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;starjiyu@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Lambo&quot;, &quot;Miata&quot;], &quot;Hobbies&quot;: [&quot;Reading&quot;, &quot;Watching Cobra Kai&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Vaishavi&quot;, &quot;LastName&quot;: &quot;Jayashankar&quot;, &quot;Nicknames&quot;: [&quot;Vaishavi-Chan&quot;, &quot;Vai&quot;, &quot;Vaiu&quot;], &quot;DOB&quot;: &quot;March 15&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;vaishavi2005@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Volkswagen&quot;, &quot;Chevrolet Traverse&quot;], &quot;Hobbies&quot;: [&quot;Music&quot;, &quot;Drawing&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Shreya&#39;, &#39;LastName&#39;: &#39;Sapkal&#39;, &#39;Nicknames&#39;: [&#39;Rey&#39;, &#39;Reyu&#39;, &#39;Shweya&#39;], &#39;DOB&#39;: &#39;December 12&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;shreya.sapkal959@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2013-Ford Escape&#39;, &#39;2020-Chrysler Pacifica&#39;], &#39;Hobbies&#39;: [&#39;Karate&#39;, &#39;Tennis&#39;, &#39;Reading&#39;, &#39;Writing&#39;, &#39;Drawing&#39;]}, {&#39;FirstName&#39;: &#39;Jiya&#39;, &#39;LastName&#39;: &#39;Savlani&#39;, &#39;Nicknames&#39;: [&#39;Jiyu&#39;], &#39;DOB&#39;: &#39;March 7&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;starjiyu@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Lambo&#39;, &#39;Miata&#39;], &#39;Hobbies&#39;: [&#39;Reading&#39;, &#39;Watching Cobra Kai&#39;]}, {&#39;FirstName&#39;: &#39;Vaishavi&#39;, &#39;LastName&#39;: &#39;Jayashankar&#39;, &#39;Nicknames&#39;: [&#39;Vaishavi-Chan&#39;, &#39;Vai&#39;, &#39;Vaiu&#39;], &#39;DOB&#39;: &#39;March 15&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;vaishavi2005@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;Volkswagen&#39;, &#39;Chevrolet Traverse&#39;], &#39;Hobbies&#39;: [&#39;Music&#39;, &#39;Drawing&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # given and index this will print InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Nicknames: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Nicknames&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print(&quot; t&quot;, &quot;Hobbies: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Hobbies&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Shreya Sapkal Residence: San Diego Birth Day: December 12 Nicknames: Rey, Reyu, Shweya Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Hobbies: Karate, Tennis, Reading, Writing, Drawing Jiya Savlani Residence: San Diego Birth Day: March 7 Nicknames: Jiyu Cars: Lambo, Miata Hobbies: Reading, Watching Cobra Kai Vaishavi Jayashankar Residence: San Diego Birth Day: March 15 Nicknames: Vaishavi-Chan, Vai, Vaiu Cars: Volkswagen, Chevrolet Traverse Hobbies: Music, Drawing . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # my work: changed variable name def while_loop(): print(&quot;While loop output n&quot;) n = 0 while n &lt; len(InfoDb): record = InfoDb[n] print_data(record) n += 1 return while_loop() . While loop output Shreya Sapkal Residence: San Diego Birth Day: December 12 Nicknames: Rey, Reyu, Shweya Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Hobbies: Karate, Tennis, Reading, Writing, Drawing Jiya Savlani Residence: San Diego Birth Day: March 7 Nicknames: Jiyu Cars: Lambo, Miata Hobbies: Reading, Watching Cobra Kai Vaishavi Jayashankar Residence: San Diego Birth Day: March 15 Nicknames: Vaishavi-Chan, Vai, Vaiu Cars: Volkswagen, Chevrolet Traverse Hobbies: Music, Drawing . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Shreya Sapkal Residence: San Diego Birth Day: December 12 Nicknames: Rey, Reyu, Shweya Cars: 2013-Ford Escape, 2020-Chrysler Pacifica Hobbies: Karate, Tennis, Reading, Writing, Drawing Jiya Savlani Residence: San Diego Birth Day: March 7 Nicknames: Jiyu Cars: Lambo, Miata Hobbies: Reading, Watching Cobra Kai Vaishavi Jayashankar Residence: San Diego Birth Day: March 15 Nicknames: Vaishavi-Chan, Vai, Vaiu Cars: Volkswagen, Chevrolet Traverse Hobbies: Music, Drawing . Quiz using List of Dictionaries . # values will be the correct answers q1 = &quot;&quot;&quot;How many cars does Shreya have? a. 1 b. 2 c. 3 d. none&quot;&quot;&quot; # triple quotation marks allows you to write the question string in multiple lines q2 = &quot;&quot;&quot;What is Jiya&#39;s nickname? a. Jiyu b. Jiji c. Yaya d. She doesn&#39;t have a nickname&quot;&quot;&quot; q3 = &quot;&quot;&quot;What are some of Shreya&#39;s hobbies? a. karate b. tennis c. drawing d. all of the above&quot;&quot;&quot; q4 = &quot;&quot;&quot;Where does Shreya live? a. San Jose b. San Fransisco c. San Diego d. San Clemente&quot;&quot;&quot; q5 = &quot;&quot;&quot;What is Jiya&#39;s favorite TV show? a. Miraculous Ladybug b. Cobra Kai c. Umbrella Academy d. Unlisted&quot;&quot;&quot; questions = {q1:&quot;b&quot;,q2:&quot;a&quot;,q3:&quot;d&quot;,q4:&quot;c&quot;,q5:&quot;b&quot;} # strings are q1, q2, q3, etc, and the values are the correct answers score = 0 name = input(&quot;Please enter your name:&quot;) print(&quot;Please enter your name&quot;) print(&quot;Hello&quot;, name, &quot;welcome to my quiz using a dictionary&quot;) for i in questions: # starting a for loop to print the questions print(i) # i = key = question and its option ans = input(&quot;enter the answer (a/b/c/d):&quot;) # use input function to get a string input print(&quot; t&quot;, &quot;enter answer (a/b/c/d):&quot;) print(&quot; t&quot;, ans) if ans==questions[i]: print(&quot;correct!&quot;) score = score+1 else: print(&quot;incorrect!&quot;) print(&quot;Your final score is:&quot;,score) . Please enter your name Hello Shreya welcome to my quiz using a dictionary How many cars does Shreya have? a. 1 b. 2 c. 3 d. none enter answer (a/b/c/d): b correct! What is Jiya&#39;s nickname? a. Jiyu b. Jiji c. Yaya d. She doesn&#39;t have a nickname enter answer (a/b/c/d): a correct! What are some of Shreya&#39;s hobbies? a. karate b. tennis c. drawing d. all of the above enter answer (a/b/c/d): d correct! Where does Shreya live? a. San Jose b. San Fransisco c. San Diego d. San Clemente enter answer (a/b/c/d): c correct! What is Jiya&#39;s favorite TV show? a. Miraculous Ladybug b. Cobra Kai c. Umbrella Academy d. Unlisted enter answer (a/b/c/d): b correct! Your final score is: 5 . Reversing Data Output Order . # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [20, 21, 22, 23, 24, 25, 26] print(Reverse(lst)) # reverse key . [26, 25, 24, 23, 22, 21, 20] . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://rey444.github.io/shreya/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python Quiz!",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 question_and_answer = input print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What kernel is used to make sure your code in jupyter notebooks shows up on your fastpages?&quot;) if rsp == &quot;bash&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How can you create a _posts page with an image?&quot;) if rsp == &quot;squiggly brackets&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, shreyasapkal running /home/shreyasapkal/anaconda3/bin/python You will be asked 3 questions. Question: What kernel is used to make sure your code in jupyter notebooks shows up on your fastpages? bash] is incorrect! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: How can you create a _posts page with an image? squiggly brackets is correct! shreyasapkal you scored 2/3 .",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/28/python-quiz.html",
            "relUrl": "/tri1/2022/08/28/python-quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Play Guess My Number!",
            "content": "Hello From Python . A simple line of code written using python. . print(&quot;Hello World&quot;) . Hello World . The Game . import random print(&quot;Welcome to Guess My Number!&quot;) secret_number = random.randint(1,100) num_guesses = 0 while True: current_guess = int(input(&quot;What is your guess?&quot;)) # num_guesses = num_guesses +1 num_guesses += 1 print(current_guess) if current_guess == secret_number: print(&quot;You are correct!&quot;) break elif current_guess &lt; secret_number: print(&quot;Too low!&quot;) elif current_guess &gt; secret_number: print(&quot;Too high!&quot;) print(f&quot;You took {num_guesses} guesses!&quot;) . Welcome to Guess My Number! 50 Too low! 60 Too high! 55 Too high! 55 Too high! 54 Too high! 53 Too high! 51 Too low! 52 You are correct! You took 8 guesses! .",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/26/first-python-game.html",
            "relUrl": "/tri1/2022/08/26/first-python-game.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "English Essay",
            "content": "Shreya Sapkal . Mrs. DaFoe . APEL: Period 4 . 3 November 2021 . On Demand 3 . During the 1960s, the Green Revolution was well underway. This was an agricultural revolution unlike any other before. Scientists were developing countless pesticides, insecticides, GMO crops, and other innovative technologies to produce higher yields and supposedly feed the world. However, the heavy use of the new insecticides, which were rightly advertised as a “one kills all,” had unforseen detrimental effects on our environment. In her book Silent Spring, American biologist Rachel Carson expounds upon such environmental issues, in order to open the eyes of the American people and draw urgent attention to such issues. Carson makes the American public aware that the use of insecticidal poisons jeapordizes the natural environment and American society, in order to persuade the American public to take a greater part in lobbying for the reduced use of such poisons. . Carson expounds on the drawbacks of using insecticidal poisons frequently on nature as well as the future of American society. She employs an anecdote to explain how even wildlife which is not being targeted directly by the poisons is suffering: “But such rabbits or raccoons or oppossums as may have roamed those bottomlands and perhaps never visited the farmers’ cornfields were doomed by a judge and jury who neigher knew of their existence nor cared” (28-32). In this anecdote, the innocent woodland creatures, or “rabbits,” “raccoons,” or “oppossums,” are on trial in front of a jury which has no regards for their lives or bringing them justice. They are sentenced to succumb to the “universal killer,” or the poison, despite causing no threat to American farmers or communtiies. Carson appeals to her American audience’s shared values of upholding justice and protecting the innocent. She creates a syllogism in that the animals in question likely never traversed on the fields and are innocent. According to American principles of justice and individual rights, the innocent should not be marked guilty. If the animals are innocent, they should not be considered guilty and condemned to death. The judges and juries are supposed to uphold justice and protect the innocent, but in this case, they did not. This goes against American values of liberty and justice under the law, as innocent animals are being killed for no reason due to the heavy use of these poisions, which in turn is harming our environment. The American people value defending the innocent, and hence will realize the negative effects and take a more active role in opposing the use of these pesticides. Carson suggests that if more Americans are aware of these injustices, “care,” and join this “jury,” we will be able to avoid further environmental damage and cruelty to wildlife. Another anecdote is used to invoke a sense of duty within the audience to advocate for reducing the use of pesticidal poisons: “Does Indiana still raise any boys who roam through woods or fields and might even explore margins of a river? If so, who guarded the poisoned area to keep out any who might wander in, in a misguided search for unspoiled nature?” (37-41). Carson appeal to pathos by using a annecdote of children exploring nature and being subject to health risks due to the poison. Children are generally viewed as innocents, and the American people want to protect their children. However, with all of this poision being sprayed everywhere, their children are in danger of “shock” and “death,” which can only be escaped through “skilled medical attention” (36-37). Additionally, such a dangerous poison is being used casually and widely, such as in “woods,” “fields,” or any region of “unspoiled nature.” The American public is further angered that they are not being protected or “guarded” against it, and that their children are in danger. Children also represent the future of America, and it is in jeopardy because of these pesticides. Hence, the American public is pushed to take a greater stand against the use of these pesticides. . Carson highlights the innatention the American people have been giving this issue, in order to persuade them to take a stand against the use of poisonous insecticides so they can protect what is important to them. She first employs a metaphor in the form of a rhetorical question to implore the audience to ponder about why the use of these poisons is so widespread, despite their negative consequences: “Who has made the decision that sets in motion these chains of poisonings, this ever-widening wave of death that spreads out, like ripples, when a pebble is dropped into a still pond?” This metaphor likens the increasing use of poisonous pesticides in America to a ripple in a pond. This metaphor is powerful because it demonstrates how a single instance of this pesticide use has created a vast chain of events. By likening pesticide use to an “ever-widening wave of death,” Carson frightens the American public by suggesting that they have invited death and suffering into their communities. Desiring to protect themselves and those around them, the American public will feel moved to take action to combat the destruction, which can be done by reducing the use of the poisons. Carson draws attention to the idea that many have thusfar been blind to the issue at hand by appealing to the audience’s shared values of reverence for nature and a desire for democracy. “The decision is that of the authoritarian… he has made it during a moment of inattention by millions to whom beauty and the ordered world of nature still have a meaning that is deep and imperative.” Here, Carson specifically uses the term “authoritarian” to refer to those who have approved the casual use of these pesticides. America is founded on the values of democracy, and the American people aim to fight authoritarianism and tyranny. Carson suggests that the American public can oppose this tyranny by opening their eyes and removing their “innattention.” This is an Appeal to shared values: speaker and audience, the “millions,” still care about nature and admire its beautyThis “deep and imperative” connection with nature is being threatened by the decision to use these poisons frequently . American public’s eyes are opened– these pesticides are threatening nature as we know it, and we must lobby for their reduced use to protect what we care about. .",
            "url": "https://rey444.github.io/shreya/2022/08/26/english-essay.html",
            "relUrl": "/2022/08/26/english-essay.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "My Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/shreyasapkal/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # for jupyter kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length of test if [[ ${n} &gt; 0 ]]; # define value of test length, begin while-if-else loop then # if the test legnth is greater than zero echo &quot;$check&quot; # confirmation message else # if the test length is less than zero echo &quot;$test not found&quot; #error message fi # end while-if-else loop . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/shreyasapkal/.local/share/jupyter/kernels/bash javascript /home/shreyasapkal/.local/share/jupyter/kernels/javascript python3 /home/shreyasapkal/.local/share/jupyter/kernels/python3 . Python3 Check . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/shreyasapkal/.local/share/jupyter/kernels/python3 .",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/25/tools-setup-tests.html",
            "relUrl": "/tri1/2022/08/25/tools-setup-tests.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Tri 1 Week 0 - Pseudo Code Notes",
            "content": "pseudo code = non-operational programming language; highlights instructions common for many languages | . AP Exam Resources . AP Exam Reference Sheet . .",
            "url": "https://rey444.github.io/shreya/t1notes/2022/08/24/Pseudo-Code-Notes.html",
            "relUrl": "/t1notes/2022/08/24/Pseudo-Code-Notes.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "My Favorite Cars",
            "content": "My Favorite Cars . Dodge Challenger SRT Hellcat | McLaren Senna | Nissan Skyline GTR | Chrysler Pacifica | Dodge Charger | Toyota Tacoma | Ford Mustang Shelby | Audi R8 | Images . Dodge Challenger SRT Hellcat . . McLaren Senna . . Nissan Skyline GTR . . Chrysler Pacifica . . Dodge Charger . . Toyota Tacoma . . Ford Mustang Shelby . . Audi R81 . . Link to Audi R8 Video! &#8617; . |",
            "url": "https://rey444.github.io/shreya/tri1/2022/08/24/My-Favorite-Cars-List.html",
            "relUrl": "/tri1/2022/08/24/My-Favorite-Cars-List.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://rey444.github.io/shreya/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rey444.github.io/shreya/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": ". . . I enjoy baking, writing, reading, and studying engine maintenance manuals. I’m the co-president of the DNHS Speech &amp; Debate Team, and the co-president of DNHS’ South Asian Student Union (SASU). You can regularly find me hiking or training at Karate. In the future, I aspire to become a Mechanical Engineer and pursue my passion for cars. click to learn more about SASU! 1. . Link to the South Asian Student Union Linktree. &#8617; . |",
          "url": "https://rey444.github.io/shreya/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Trimester 1",
          "content": "Trimester 1 - Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Learning Objectives Assignment Links Notes Pages . 0 | Tools Setup, Intro to Fastpages | Changing index.html | First Markdown Post | . | Pseudo Code Notes 1 | Intro to Python, Bash &amp; Checks, Fastpages, Jupyter Notebooks, &amp; Markdown Posts | Key Tools Installation Check Using Bash + Jupyter Notebooks | Published _notebook File | Published _docx file from Google Doc source | First Python Quiz | . | Python Notes 2 | Data Abstraction, Python Lists &amp; Dictionaries, HTML &amp; Markdown Fragments, Customization, Alumni Panel | Alumni Panel Notes | Python Lists &amp; Dictionaries | Changing Theme | . | Python Lists &amp; Dictionaries Notes | &lt;/table&gt; ![](/shreya/images/boost.png) . | . | .",
          "url": "https://rey444.github.io/shreya/Trimester%201",
          "relUrl": "/Trimester 1",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://rey444.github.io/shreya/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}